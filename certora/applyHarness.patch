diff -ruN .gitignore .gitignore
--- .gitignore	1970-01-01 01:00:00.000000000 +0100
+++ .gitignore	2022-11-04 17:01:51.099854400 +0100
@@ -0,0 +1,2 @@
+*
+!.gitignore
diff -ruN registries/PoolRegistry.sol registries/PoolRegistry.sol
--- registries/PoolRegistry.sol	2022-09-20 00:50:42.670368500 +0200
+++ registries/PoolRegistry.sol	2022-11-04 17:01:51.144734300 +0100
@@ -1,564 +1,568 @@
-// SPDX-License-Identifier: MIT
-
-pragma solidity 0.6.12;
-pragma experimental ABIEncoderV2;
-
-import "@openzeppelin/contracts/math/SafeMath.sol";
-import "@openzeppelin/contracts/access/Ownable.sol";
-import "@openzeppelin/contracts/access/AccessControl.sol";
-import "@openzeppelin/contracts/utils/ReentrancyGuard.sol";
-import "../helper/BaseBoringBatchable.sol";
-import "../interfaces/ISwap.sol";
-import "../interfaces/ISwapGuarded.sol";
-import "../interfaces/IMetaSwap.sol";
-import "../interfaces/IPoolRegistry.sol";
-import "../meta/MetaSwapDeposit.sol";
-
-/**
- * @title PoolRegistry
- * @notice This contract holds list of pools deployed.
- */
-contract PoolRegistry is
-    AccessControl,
-    ReentrancyGuard,
-    BaseBoringBatchable,
-    IPoolRegistry
-{
-    using SafeMath for uint256;
-
-    /// @notice Role responsible for managing pools.
-    bytes32 public constant SADDLE_MANAGER_ROLE =
-        keccak256("SADDLE_MANAGER_ROLE");
-    /// @notice Role responsible for managing community pools
-    bytes32 public constant COMMUNITY_MANAGER_ROLE =
-        keccak256("COMMUNITY_MANAGER_ROLE");
-    /// @notice Role that represents approved owners of pools.
-    /// owner of each pool must have this role if the pool is to be approved.
-    bytes32 public constant SADDLE_APPROVED_POOL_OWNER_ROLE =
-        keccak256("SADDLE_APPROVED_POOL_OWNER_ROLE");
-
-    /// @inheritdoc IPoolRegistry
-    mapping(address => uint256) public override poolsIndexOfPlusOne;
-    /// @inheritdoc IPoolRegistry
-    mapping(bytes32 => uint256) public override poolsIndexOfNamePlusOne;
-
-    PoolData[] private pools;
-    mapping(uint256 => address[]) private eligiblePairsMap;
-
-    /**
-     * @notice Add a new registry entry to the master list.
-     * @param poolAddress address of the added pool
-     * @param index index of the added pool in the pools list
-     * @param poolData added pool data
-     */
-    event AddPool(
-        address indexed poolAddress,
-        uint256 index,
-        PoolData poolData
-    );
-
-    /**
-     * @notice Add a new registry entry to the master list.
-     * @param poolAddress address of the added pool
-     * @param index index of the added pool in the pools list
-     * @param poolData added pool data
-     */
-    event AddCommunityPool(
-        address indexed poolAddress,
-        uint256 index,
-        PoolData poolData
-    );
-
-    /**
-     * @notice Add a new registry entry to the master list.
-     * @param poolAddress address of the updated pool
-     * @param index index of the updated pool in the pools list
-     * @param poolData updated pool data
-     */
-    event UpdatePool(
-        address indexed poolAddress,
-        uint256 index,
-        PoolData poolData
-    );
-
-    /**
-     * @notice Add a new registry entry to the master list.
-     * @param poolAddress address of the removed pool
-     * @param index index of the removed pool in the pools list
-     */
-    event RemovePool(address indexed poolAddress, uint256 index);
-
-    /**
-     * @notice Deploy this contract and set appropriate roles
-     * @param admin address who should have the DEFAULT_ADMIN_ROLE
-     * @dev caller of this function will be set as the owner on deployment
-     */
-    constructor(address admin, address poolOwner) public payable {
-        require(admin != address(0), "admin == 0");
-        _setupRole(DEFAULT_ADMIN_ROLE, admin);
-        _setupRole(SADDLE_MANAGER_ROLE, msg.sender);
-        _setupRole(SADDLE_APPROVED_POOL_OWNER_ROLE, poolOwner);
-    }
-
-    /// @inheritdoc IPoolRegistry
-    function addCommunityPool(PoolData memory data) external payable override {
-        require(
-            hasRole(COMMUNITY_MANAGER_ROLE, msg.sender),
-            "PR: Only managers can add pools"
-        );
-
-        // Check token addresses
-        for (uint8 i = 0; i < data.tokens.length; i++) {
-            for (uint8 j = 0; j < i; j++) {
-                eligiblePairsMap[
-                    uint160(address(data.tokens[i])) ^
-                        uint160(address(data.tokens[j]))
-                ].push(data.poolAddress);
-            }
-        }
-
-        // Check meta swap deposit address
-        if (data.metaSwapDepositAddress != address(0)) {
-            for (uint8 i = 0; i < data.underlyingTokens.length; i++) {
-                // add combinations of tokens to eligible pairs map
-                // i reprents the indexes of the underlying tokens of metaLPToken.
-                // j represents the indexes of MetaSwap level tokens that are not metaLPToken.
-                // Example: tokens = [sUSD, baseLPToken]
-                //         underlyingTokens = [sUSD, DAI, USDC, USDT]
-                // i represents index of [DAI, USDC, USDT] in underlyingTokens
-                // j represents index of [sUSD] in underlyingTokens
-                if (i > data.tokens.length.sub(2))
-                    for (uint256 j = 0; j < data.tokens.length - 1; j++) {
-                        eligiblePairsMap[
-                            uint160(address(data.underlyingTokens[i])) ^
-                                uint160(address(data.underlyingTokens[j]))
-                        ].push(data.metaSwapDepositAddress);
-                    }
-            }
-        }
-
-        pools.push(data);
-        poolsIndexOfPlusOne[data.poolAddress] = pools.length;
-        poolsIndexOfNamePlusOne[data.poolName] = pools.length;
-
-        emit AddCommunityPool(data.poolAddress, pools.length - 1, data);
-    }
-
-    /// @inheritdoc IPoolRegistry
-    function addPool(PoolInputData memory inputData)
-        external
-        payable
-        override
-        nonReentrant
-    {
-        require(
-            hasRole(SADDLE_MANAGER_ROLE, msg.sender),
-            "PR: Only managers can add pools"
-        );
-        require(inputData.poolAddress != address(0), "PR: poolAddress is 0");
-        require(
-            poolsIndexOfPlusOne[inputData.poolAddress] == 0,
-            "PR: Pool is already added"
-        );
-
-        IERC20[] memory tokens = new IERC20[](8);
-        IERC20[] memory underlyingTokens = new IERC20[](8);
-
-        PoolData memory data = PoolData(
-            inputData.poolAddress,
-            address(0),
-            inputData.typeOfAsset,
-            inputData.poolName,
-            inputData.targetAddress,
-            tokens,
-            underlyingTokens,
-            address(0),
-            inputData.metaSwapDepositAddress,
-            inputData.isSaddleApproved,
-            inputData.isRemoved,
-            inputData.isGuarded
-        );
-
-        // Get lp token address
-        data.lpToken = inputData.isGuarded
-            ? _getSwapStorageGuarded(inputData.poolAddress).lpToken
-            : _getSwapStorage(inputData.poolAddress).lpToken;
-
-        // Check token addresses
-        for (uint8 i = 0; i < 8; i++) {
-            try ISwap(inputData.poolAddress).getToken(i) returns (
-                IERC20 token
-            ) {
-                require(address(token) != address(0), "PR: token is 0");
-                tokens[i] = token;
-                // add combinations of tokens to eligible pairs map
-                for (uint8 j = 0; j < i; j++) {
-                    eligiblePairsMap[
-                        uint160(address(tokens[i])) ^
-                            uint160(address(tokens[j]))
-                    ].push(inputData.poolAddress);
-                }
-            } catch {
-                assembly {
-                    mstore(tokens, sub(mload(tokens), sub(8, i)))
-                }
-                break;
-            }
-        }
-
-        // Check meta swap deposit address
-        if (inputData.metaSwapDepositAddress != address(0)) {
-            // Get base pool address
-            data.basePoolAddress = address(
-                MetaSwapDeposit(inputData.metaSwapDepositAddress).baseSwap()
-            );
-            require(
-                poolsIndexOfPlusOne[data.basePoolAddress] > 0,
-                "PR: base pool not found"
-            );
-
-            // Get underlying tokens
-            for (uint8 i = 0; i < 8; i++) {
-                try
-                    MetaSwapDeposit(inputData.metaSwapDepositAddress).getToken(
-                        i
-                    )
-                returns (IERC20 token) {
-                    require(address(token) != address(0), "PR: token is 0");
-                    underlyingTokens[i] = token;
-                    // add combinations of tokens to eligible pairs map
-                    // i reprents the indexes of the underlying tokens of metaLPToken.
-                    // j represents the indexes of MetaSwap level tokens that are not metaLPToken.
-                    // Example: tokens = [sUSD, baseLPToken]
-                    //         underlyingTokens = [sUSD, DAI, USDC, USDT]
-                    // i represents index of [DAI, USDC, USDT] in underlyingTokens
-                    // j represents index of [sUSD] in underlyingTokens
-                    if (i > tokens.length.sub(2))
-                        for (uint256 j = 0; j < tokens.length - 1; j++) {
-                            eligiblePairsMap[
-                                uint160(address(underlyingTokens[i])) ^
-                                    uint160(address(underlyingTokens[j]))
-                            ].push(inputData.metaSwapDepositAddress);
-                        }
-                } catch {
-                    assembly {
-                        mstore(
-                            underlyingTokens,
-                            sub(mload(underlyingTokens), sub(8, i))
-                        )
-                    }
-                    break;
-                }
-            }
-            require(
-                address(
-                    MetaSwapDeposit(inputData.metaSwapDepositAddress).metaSwap()
-                ) == inputData.poolAddress,
-                "PR: metaSwap address mismatch"
-            );
-        } else {
-            assembly {
-                mstore(underlyingTokens, sub(mload(underlyingTokens), 8))
-            }
-        }
-
-        pools.push(data);
-        poolsIndexOfPlusOne[data.poolAddress] = pools.length;
-        poolsIndexOfNamePlusOne[data.poolName] = pools.length;
-
-        emit AddPool(inputData.poolAddress, pools.length - 1, data);
-    }
-
-    /// @inheritdoc IPoolRegistry
-    function approvePool(address poolAddress)
-        external
-        payable
-        override
-        managerOnly
-    {
-        uint256 poolIndex = poolsIndexOfPlusOne[poolAddress];
-        require(poolIndex > 0, "PR: Pool not found");
-
-        PoolData storage poolData = pools[poolIndex];
-
-        require(
-            poolData.poolAddress == poolAddress,
-            "PR: poolAddress mismatch"
-        );
-
-        // Effect
-        poolData.isSaddleApproved = true;
-
-        // Interaction
-        require(
-            hasRole(
-                SADDLE_APPROVED_POOL_OWNER_ROLE,
-                ISwap(poolAddress).owner()
-            ),
-            "Pool is not owned by saddle"
-        );
-
-        emit UpdatePool(poolAddress, poolIndex, poolData);
-    }
-
-    /// @inheritdoc IPoolRegistry
-    function updatePool(PoolData memory poolData)
-        external
-        payable
-        override
-        managerOnly
-    {
-        uint256 poolIndex = poolsIndexOfPlusOne[poolData.poolAddress];
-        require(poolIndex > 0, "PR: Pool not found");
-        poolIndex -= 1;
-
-        pools[poolIndex] = poolData;
-
-        emit UpdatePool(poolData.poolAddress, poolIndex, poolData);
-    }
-
-    /// @inheritdoc IPoolRegistry
-    function removePool(address poolAddress)
-        external
-        payable
-        override
-        managerOnly
-    {
-        uint256 poolIndex = poolsIndexOfPlusOne[poolAddress];
-        require(poolIndex > 0, "PR: Pool not found");
-        poolIndex -= 1;
-
-        pools[poolIndex].isRemoved = true;
-
-        emit RemovePool(poolAddress, poolIndex);
-    }
-
-    /// @inheritdoc IPoolRegistry
-    function getPoolDataAtIndex(uint256 index)
-        external
-        view
-        override
-        returns (PoolData memory)
-    {
-        require(index < pools.length, "PR: Index out of bounds");
-        return pools[index];
-    }
-
-    /// @inheritdoc IPoolRegistry
-    function getPoolData(address poolAddress)
-        external
-        view
-        override
-        hasMatchingPool(poolAddress)
-        returns (PoolData memory)
-    {
-        return pools[poolsIndexOfPlusOne[poolAddress] - 1];
-    }
-
-    /// @inheritdoc IPoolRegistry
-    function getPoolDataByName(bytes32 poolName)
-        external
-        view
-        override
-        returns (PoolData memory)
-    {
-        uint256 index = poolsIndexOfNamePlusOne[poolName];
-        require(index > 0, "PR: Pool not found");
-        return pools[index - 1];
-    }
-
-    modifier hasMatchingPool(address poolAddress) {
-        require(
-            poolsIndexOfPlusOne[poolAddress] > 0,
-            "PR: No matching pool found"
-        );
-        _;
-    }
-
-    modifier managerOnly() {
-        require(
-            hasRole(SADDLE_MANAGER_ROLE, msg.sender),
-            "PR: Caller is not saddle manager"
-        );
-        _;
-    }
-
-    /// @inheritdoc IPoolRegistry
-    function getVirtualPrice(address poolAddress)
-        external
-        view
-        override
-        hasMatchingPool(poolAddress)
-        returns (uint256)
-    {
-        return ISwap(poolAddress).getVirtualPrice();
-    }
-
-    /// @inheritdoc IPoolRegistry
-    function getA(address poolAddress)
-        external
-        view
-        override
-        hasMatchingPool(poolAddress)
-        returns (uint256)
-    {
-        return ISwap(poolAddress).getA();
-    }
-
-    /// @inheritdoc IPoolRegistry
-    function getPaused(address poolAddress)
-        external
-        view
-        override
-        hasMatchingPool(poolAddress)
-        returns (bool)
-    {
-        return ISwap(poolAddress).paused();
-    }
-
-    /// @inheritdoc IPoolRegistry
-    function getSwapStorage(address poolAddress)
-        external
-        view
-        override
-        hasMatchingPool(poolAddress)
-        returns (SwapStorageData memory swapStorageData)
-    {
-        swapStorageData = pools[poolsIndexOfPlusOne[poolAddress] - 1].isGuarded
-            ? _getSwapStorageGuarded(poolAddress)
-            : _getSwapStorage(poolAddress);
-    }
-
-    function _getSwapStorage(address poolAddress)
-        internal
-        view
-        returns (SwapStorageData memory swapStorageData)
-    {
-        (
-            swapStorageData.initialA,
-            swapStorageData.futureA,
-            swapStorageData.initialATime,
-            swapStorageData.futureATime,
-            swapStorageData.swapFee,
-            swapStorageData.adminFee,
-            swapStorageData.lpToken
-        ) = ISwap(poolAddress).swapStorage();
-    }
-
-    function _getSwapStorageGuarded(address poolAddress)
-        internal
-        view
-        returns (SwapStorageData memory swapStorageData)
-    {
-        (
-            swapStorageData.initialA,
-            swapStorageData.futureA,
-            swapStorageData.initialATime,
-            swapStorageData.futureATime,
-            swapStorageData.swapFee,
-            swapStorageData.adminFee,
-            ,
-            swapStorageData.lpToken
-        ) = ISwapGuarded(poolAddress).swapStorage();
-    }
-
-    /// @inheritdoc IPoolRegistry
-    function getTokens(address poolAddress)
-        external
-        view
-        override
-        hasMatchingPool(poolAddress)
-        returns (IERC20[] memory tokens)
-    {
-        return pools[poolsIndexOfPlusOne[poolAddress] - 1].tokens;
-    }
-
-    /// @inheritdoc IPoolRegistry
-    function getUnderlyingTokens(address poolAddress)
-        external
-        view
-        override
-        hasMatchingPool(poolAddress)
-        returns (IERC20[] memory underlyingTokens)
-    {
-        return pools[poolsIndexOfPlusOne[poolAddress] - 1].underlyingTokens;
-    }
-
-    /// @inheritdoc IPoolRegistry
-    function getPoolsLength() external view override returns (uint256) {
-        return pools.length;
-    }
-
-    /// @inheritdoc IPoolRegistry
-    function getEligiblePools(address from, address to)
-        external
-        view
-        override
-        returns (address[] memory eligiblePools)
-    {
-        require(
-            from != address(0) && from != to,
-            "PR: from and to cannot be the zero address"
-        );
-        return eligiblePairsMap[uint160(from) ^ uint160(to)];
-    }
-
-    /// @inheritdoc IPoolRegistry
-    function getTokenBalances(address poolAddress)
-        external
-        view
-        override
-        hasMatchingPool(poolAddress)
-        returns (uint256[] memory balances)
-    {
-        return _getTokenBalances(poolAddress);
-    }
-
-    function _getTokenBalances(address poolAddress)
-        internal
-        view
-        returns (uint256[] memory balances)
-    {
-        uint256 tokensLength = pools[poolsIndexOfPlusOne[poolAddress] - 1]
-            .tokens
-            .length;
-        balances = new uint256[](tokensLength);
-        for (uint8 i = 0; i < tokensLength; i++) {
-            balances[i] = ISwap(poolAddress).getTokenBalance(i);
-        }
-    }
-
-    /// @inheritdoc IPoolRegistry
-    function getUnderlyingTokenBalances(address poolAddress)
-        external
-        view
-        override
-        hasMatchingPool(poolAddress)
-        returns (uint256[] memory balances)
-    {
-        uint256 poolIndex = poolsIndexOfPlusOne[poolAddress] - 1;
-        address basePoolAddress = pools[poolIndex].basePoolAddress;
-        uint256[] memory basePoolBalances = _getTokenBalances(basePoolAddress);
-        uint256 underlyingTokensLength = pools[poolIndex]
-            .underlyingTokens
-            .length;
-        uint256 metaLPTokenIndex = underlyingTokensLength -
-            basePoolBalances.length;
-        uint256 baseLPTokenBalance = ISwap(poolAddress).getTokenBalance(
-            uint8(metaLPTokenIndex)
-        );
-        uint256 baseLPTokenTotalSupply = LPToken(
-            pools[poolsIndexOfPlusOne[basePoolAddress] - 1].lpToken
-        ).totalSupply();
-
-        balances = new uint256[](underlyingTokensLength);
-        for (uint8 i = 0; i < metaLPTokenIndex; i++) {
-            balances[i] = ISwap(poolAddress).getTokenBalance(i);
-        }
-        for (uint256 i = metaLPTokenIndex; i < underlyingTokensLength; i++) {
-            balances[i] = basePoolBalances[i - metaLPTokenIndex]
-                .mul(baseLPTokenBalance)
-                .div(baseLPTokenTotalSupply);
-        }
-    }
-}
+// SPDX-License-Identifier: MIT
+
+pragma solidity 0.6.12;
+pragma experimental ABIEncoderV2;
+
+import "@openzeppelin/contracts/math/SafeMath.sol";
+import "@openzeppelin/contracts/access/Ownable.sol";
+import "@openzeppelin/contracts/access/AccessControl.sol";
+import "@openzeppelin/contracts/utils/ReentrancyGuard.sol";
+import "../helper/BaseBoringBatchable.sol";
+import "../interfaces/ISwap.sol";
+import "../interfaces/ISwapGuarded.sol";
+import "../interfaces/IMetaSwap.sol";
+import "../interfaces/IPoolRegistry.sol";
+import "../meta/MetaSwapDeposit.sol";
+
+/**
+ * @title PoolRegistry
+ * @notice This contract holds list of pools deployed.
+ */
+contract PoolRegistry is
+    AccessControl,
+    ReentrancyGuard,
+    BaseBoringBatchable,
+    IPoolRegistry
+{
+    using SafeMath for uint256;
+
+    /// @notice Role responsible for managing pools.
+    bytes32 public constant SADDLE_MANAGER_ROLE =
+        keccak256("SADDLE_MANAGER_ROLE");
+    /// @notice Role responsible for managing community pools
+    bytes32 public constant COMMUNITY_MANAGER_ROLE =
+        keccak256("COMMUNITY_MANAGER_ROLE");
+    /// @notice Role that represents approved owners of pools.
+    /// owner of each pool must have this role if the pool is to be approved.
+    bytes32 public constant SADDLE_APPROVED_POOL_OWNER_ROLE =
+        keccak256("SADDLE_APPROVED_POOL_OWNER_ROLE");
+
+    /// @inheritdoc IPoolRegistry
+    mapping(address => uint256) public override poolsIndexOfPlusOne;
+    /// @inheritdoc IPoolRegistry
+    mapping(bytes32 => uint256) public override poolsIndexOfNamePlusOne;
+
+    PoolData[] public pools;                                // MUNGED private => public
+    mapping(uint256 => address[]) internal eligiblePairsMap; // MUNGED private => internal
+
+    /**
+     * @notice Add a new registry entry to the master list.
+     * @param poolAddress address of the added pool
+     * @param index index of the added pool in the pools list
+     * @param poolData added pool data
+     */
+    event AddPool(
+        address indexed poolAddress,
+        uint256 index,
+        PoolData poolData
+    );
+
+    /**
+     * @notice Add a new registry entry to the master list.
+     * @param poolAddress address of the added pool
+     * @param index index of the added pool in the pools list
+     * @param poolData added pool data
+     */
+    event AddCommunityPool(
+        address indexed poolAddress,
+        uint256 index,
+        PoolData poolData
+    );
+
+    /**
+     * @notice Add a new registry entry to the master list.
+     * @param poolAddress address of the updated pool
+     * @param index index of the updated pool in the pools list
+     * @param poolData updated pool data
+     */
+    event UpdatePool(
+        address indexed poolAddress,
+        uint256 index,
+        PoolData poolData
+    );
+
+    /**
+     * @notice Add a new registry entry to the master list.
+     * @param poolAddress address of the removed pool
+     * @param index index of the removed pool in the pools list
+     */
+    event RemovePool(address indexed poolAddress, uint256 index);
+
+    /**
+     * @notice Deploy this contract and set appropriate roles
+     * @param admin address who should have the DEFAULT_ADMIN_ROLE
+     * @dev caller of this function will be set as the owner on deployment
+     */
+    constructor(address admin, address poolOwner) public payable {
+        require(admin != address(0), "admin == 0");
+        _setupRole(DEFAULT_ADMIN_ROLE, admin);
+        _setupRole(SADDLE_MANAGER_ROLE, msg.sender);
+        _setupRole(SADDLE_APPROVED_POOL_OWNER_ROLE, poolOwner);
+    }
+
+    /// @inheritdoc IPoolRegistry
+    function addCommunityPool(PoolData memory data) external payable override {
+        require(
+            hasRole(COMMUNITY_MANAGER_ROLE, msg.sender),
+            "PR: Only managers can add pools"
+        );
+
+        // Check token addresses
+        for (uint8 i = 0; i < data.tokens.length; i++) {
+            for (uint8 j = 0; j < i; j++) {
+                eligiblePairsMap[
+                    uint160(address(data.tokens[i])) ^
+                        uint160(address(data.tokens[j]))
+                ].push(data.poolAddress);
+            }
+        }
+
+        // Check meta swap deposit address
+        if (data.metaSwapDepositAddress != address(0)) {
+            for (uint8 i = 0; i < data.underlyingTokens.length; i++) {
+                // add combinations of tokens to eligible pairs map
+                // i reprents the indexes of the underlying tokens of metaLPToken.
+                // j represents the indexes of MetaSwap level tokens that are not metaLPToken.
+                // Example: tokens = [sUSD, baseLPToken]
+                //         underlyingTokens = [sUSD, DAI, USDC, USDT]
+                // i represents index of [DAI, USDC, USDT] in underlyingTokens
+                // j represents index of [sUSD] in underlyingTokens
+                if (i > data.tokens.length.sub(2))
+                    for (uint256 j = 0; j < data.tokens.length - 1; j++) {
+                        eligiblePairsMap[
+                            uint160(address(data.underlyingTokens[i])) ^
+                                uint160(address(data.underlyingTokens[j]))
+                        ].push(data.metaSwapDepositAddress);
+                    }
+            }
+        }
+
+        pools.push(data);
+        poolsIndexOfPlusOne[data.poolAddress] = pools.length;
+        poolsIndexOfNamePlusOne[data.poolName] = pools.length;
+
+        emit AddCommunityPool(data.poolAddress, pools.length - 1, data);
+    }
+
+    /// @inheritdoc IPoolRegistry
+    function addPool(PoolInputData memory inputData)
+        external
+        payable
+        override
+        nonReentrant
+    {
+        require(
+            hasRole(SADDLE_MANAGER_ROLE, msg.sender),
+            "PR: Only managers can add pools"
+        );
+        require(inputData.poolAddress != address(0), "PR: poolAddress is 0");
+        require(
+            poolsIndexOfPlusOne[inputData.poolAddress] == 0,
+            "PR: Pool is already added"
+        );
+
+        IERC20[] memory tokens = new IERC20[](8);
+        IERC20[] memory underlyingTokens = new IERC20[](8);
+
+        PoolData memory data = PoolData(
+            inputData.poolAddress,
+            address(0),
+            inputData.typeOfAsset,
+            inputData.poolName,
+            inputData.targetAddress,
+            tokens,
+            underlyingTokens,
+            address(0),
+            inputData.metaSwapDepositAddress,
+            inputData.isSaddleApproved,
+            inputData.isRemoved,
+            inputData.isGuarded
+        );
+
+        // Get lp token address
+        data.lpToken = inputData.isGuarded
+            ? _getSwapStorageGuarded(inputData.poolAddress).lpToken
+            : _getSwapStorage(inputData.poolAddress).lpToken;
+
+        // Check token addresses
+        for (uint8 i = 0; i < getConstantLength(); i++) {
+            try ISwap(inputData.poolAddress).getToken(i) returns (
+                IERC20 token
+            ) {
+                require(address(token) != address(0), "PR: token is 0");
+                tokens[i] = token;
+                // add combinations of tokens to eligible pairs map
+                for (uint8 j = 0; j < i; j++) {
+                    eligiblePairsMap[
+                        uint160(address(tokens[i])) ^
+                            uint160(address(tokens[j]))
+                    ].push(inputData.poolAddress);
+                }
+            } catch {
+                assembly {
+                    mstore(tokens, sub(mload(tokens), sub(8, i)))
+                }
+                break;
+            }
+        }
+
+        // Check meta swap deposit address
+        if (inputData.metaSwapDepositAddress != address(0)) {
+            // Get base pool address
+            data.basePoolAddress = address(
+                MetaSwapDeposit(inputData.metaSwapDepositAddress).baseSwap()
+            );
+            require(
+                poolsIndexOfPlusOne[data.basePoolAddress] > 0,
+                "PR: base pool not found"
+            );
+
+            // Get underlying tokens
+            for (uint8 i = 0; i < 8; i++) {
+                try
+                    MetaSwapDeposit(inputData.metaSwapDepositAddress).getToken(
+                        i
+                    )
+                returns (IERC20 token) {
+                    require(address(token) != address(0), "PR: token is 0");
+                    underlyingTokens[i] = token;
+                    // add combinations of tokens to eligible pairs map
+                    // i reprents the indexes of the underlying tokens of metaLPToken.
+                    // j represents the indexes of MetaSwap level tokens that are not metaLPToken.
+                    // Example: tokens = [sUSD, baseLPToken]
+                    //         underlyingTokens = [sUSD, DAI, USDC, USDT]
+                    // i represents index of [DAI, USDC, USDT] in underlyingTokens
+                    // j represents index of [sUSD] in underlyingTokens
+                    if (i > tokens.length.sub(2))
+                        for (uint256 j = 0; j < tokens.length - 1; j++) {
+                            eligiblePairsMap[
+                                uint160(address(underlyingTokens[i])) ^
+                                    uint160(address(underlyingTokens[j]))
+                            ].push(inputData.metaSwapDepositAddress);
+                        }
+                } catch {
+                    assembly {
+                        mstore(
+                            underlyingTokens,
+                            sub(mload(underlyingTokens), sub(8, i))
+                        )
+                    }
+                    break;
+                }
+            }
+            require(
+                address(
+                    MetaSwapDeposit(inputData.metaSwapDepositAddress).metaSwap()
+                ) == inputData.poolAddress,
+                "PR: metaSwap address mismatch"
+            );
+        } else {
+            assembly {
+                mstore(underlyingTokens, sub(mload(underlyingTokens), 8))
+            }
+        }
+
+        pools.push(data);
+        poolsIndexOfPlusOne[data.poolAddress] = pools.length;
+        poolsIndexOfNamePlusOne[data.poolName] = pools.length;
+
+        emit AddPool(inputData.poolAddress, pools.length - 1, data);
+    }
+
+    /// @inheritdoc IPoolRegistry
+    function approvePool(address poolAddress)
+        external
+        payable
+        override
+        managerOnly
+    {
+        uint256 poolIndex = poolsIndexOfPlusOne[poolAddress];
+        require(poolIndex > 0, "PR: Pool not found");
+
+        PoolData storage poolData = pools[poolIndex];
+
+        require(
+            poolData.poolAddress == poolAddress,
+            "PR: poolAddress mismatch"
+        );
+
+        // Effect
+        poolData.isSaddleApproved = true;
+
+        // Interaction
+        require(
+            hasRole(
+                SADDLE_APPROVED_POOL_OWNER_ROLE,
+                ISwap(poolAddress).owner()
+            ),
+            "Pool is not owned by saddle"
+        );
+
+        emit UpdatePool(poolAddress, poolIndex, poolData);
+    }
+
+    /// @inheritdoc IPoolRegistry
+    function updatePool(PoolData memory poolData)
+        external
+        payable
+        override
+        managerOnly
+    {
+        uint256 poolIndex = poolsIndexOfPlusOne[poolData.poolAddress];
+        require(poolIndex > 0, "PR: Pool not found");
+        poolIndex -= 1;
+
+        pools[poolIndex] = poolData;
+
+        emit UpdatePool(poolData.poolAddress, poolIndex, poolData);
+    }
+
+    /// @inheritdoc IPoolRegistry
+    function removePool(address poolAddress)
+        external
+        payable
+        override
+        managerOnly
+    {
+        uint256 poolIndex = poolsIndexOfPlusOne[poolAddress];
+        require(poolIndex > 0, "PR: Pool not found");
+        poolIndex -= 1;
+
+        pools[poolIndex].isRemoved = true;
+
+        emit RemovePool(poolAddress, poolIndex);
+    }
+
+    /// @inheritdoc IPoolRegistry
+    function getPoolDataAtIndex(uint256 index)
+        external
+        view
+        override
+        returns (PoolData memory)
+    {
+        require(index < pools.length, "PR: Index out of bounds");
+        return pools[index];
+    }
+
+    /// @inheritdoc IPoolRegistry
+    function getPoolData(address poolAddress)
+        external
+        view
+        override
+        hasMatchingPool(poolAddress)
+        returns (PoolData memory)
+    {
+        return pools[poolsIndexOfPlusOne[poolAddress] - 1];
+    }
+
+    /// @inheritdoc IPoolRegistry
+    function getPoolDataByName(bytes32 poolName)
+        external
+        view
+        override
+        returns (PoolData memory)
+    {
+        uint256 index = poolsIndexOfNamePlusOne[poolName];
+        require(index > 0, "PR: Pool not found");
+        return pools[index - 1];
+    }
+
+    modifier hasMatchingPool(address poolAddress) {
+        require(
+            poolsIndexOfPlusOne[poolAddress] > 0,
+            "PR: No matching pool found"
+        );
+        _;
+    }
+
+    modifier managerOnly() {
+        require(
+            hasRole(SADDLE_MANAGER_ROLE, msg.sender),
+            "PR: Caller is not saddle manager"
+        );
+        _;
+    }
+
+    /// @inheritdoc IPoolRegistry
+    function getVirtualPrice(address poolAddress)
+        external
+        view
+        override
+        hasMatchingPool(poolAddress)
+        returns (uint256)
+    {
+        return ISwap(poolAddress).getVirtualPrice();
+    }
+
+    /// @inheritdoc IPoolRegistry
+    function getA(address poolAddress)
+        external
+        view
+        override
+        hasMatchingPool(poolAddress)
+        returns (uint256)
+    {
+        return ISwap(poolAddress).getA();
+    }
+
+    /// @inheritdoc IPoolRegistry
+    function getPaused(address poolAddress)
+        external
+        view
+        override
+        hasMatchingPool(poolAddress)
+        returns (bool)
+    {
+        return ISwap(poolAddress).paused();
+    }
+
+    /// @inheritdoc IPoolRegistry
+    function getSwapStorage(address poolAddress)
+        external
+        view
+        override
+        hasMatchingPool(poolAddress)
+        returns (SwapStorageData memory swapStorageData)
+    {
+        swapStorageData = pools[poolsIndexOfPlusOne[poolAddress] - 1].isGuarded
+            ? _getSwapStorageGuarded(poolAddress)
+            : _getSwapStorage(poolAddress);
+    }
+
+    function _getSwapStorage(address poolAddress)
+        internal
+        view
+        returns (SwapStorageData memory swapStorageData)
+    {
+        (
+            swapStorageData.initialA,
+            swapStorageData.futureA,
+            swapStorageData.initialATime,
+            swapStorageData.futureATime,
+            swapStorageData.swapFee,
+            swapStorageData.adminFee,
+            swapStorageData.lpToken
+        ) = ISwap(poolAddress).swapStorage();
+    }
+
+    function _getSwapStorageGuarded(address poolAddress)
+        internal
+        view
+        returns (SwapStorageData memory swapStorageData)
+    {
+        (
+            swapStorageData.initialA,
+            swapStorageData.futureA,
+            swapStorageData.initialATime,
+            swapStorageData.futureATime,
+            swapStorageData.swapFee,
+            swapStorageData.adminFee,
+            ,
+            swapStorageData.lpToken
+        ) = ISwapGuarded(poolAddress).swapStorage();
+    }
+
+    /// @inheritdoc IPoolRegistry
+    function getTokens(address poolAddress)
+        external
+        view
+        override
+        hasMatchingPool(poolAddress)
+        returns (IERC20[] memory tokens)
+    {
+        return pools[poolsIndexOfPlusOne[poolAddress] - 1].tokens;
+    }
+
+    /// @inheritdoc IPoolRegistry
+    function getUnderlyingTokens(address poolAddress)
+        external
+        view
+        override
+        hasMatchingPool(poolAddress)
+        returns (IERC20[] memory underlyingTokens)
+    {
+        return pools[poolsIndexOfPlusOne[poolAddress] - 1].underlyingTokens;
+    }
+
+    /// @inheritdoc IPoolRegistry
+    function getPoolsLength() external view override returns (uint256) {
+        return pools.length;
+    }
+
+    /// @inheritdoc IPoolRegistry
+    function getEligiblePools(address from, address to)
+        external
+        view
+        override
+        returns (address[] memory eligiblePools)
+    {
+        require(
+            from != address(0) && from != to,
+            "PR: from and to cannot be the zero address"
+        );
+        return eligiblePairsMap[uint160(from) ^ uint160(to)];
+    }
+
+    /// @inheritdoc IPoolRegistry
+    function getTokenBalances(address poolAddress)
+        external
+        view
+        override
+        hasMatchingPool(poolAddress)
+        returns (uint256[] memory balances)
+    {
+        return _getTokenBalances(poolAddress);
+    }
+
+    function _getTokenBalances(address poolAddress)
+        internal
+        view
+        returns (uint256[] memory balances)
+    {
+        uint256 tokensLength = pools[poolsIndexOfPlusOne[poolAddress] - 1]
+            .tokens
+            .length;
+        balances = new uint256[](tokensLength);
+        for (uint8 i = 0; i < tokensLength; i++) {
+            balances[i] = ISwap(poolAddress).getTokenBalance(i);
+        }
+    }
+
+    /// @inheritdoc IPoolRegistry
+    function getUnderlyingTokenBalances(address poolAddress)
+        external
+        view
+        override
+        hasMatchingPool(poolAddress)
+        returns (uint256[] memory balances)
+    {
+        uint256 poolIndex = poolsIndexOfPlusOne[poolAddress] - 1;
+        address basePoolAddress = pools[poolIndex].basePoolAddress;
+        uint256[] memory basePoolBalances = _getTokenBalances(basePoolAddress);
+        uint256 underlyingTokensLength = pools[poolIndex]
+            .underlyingTokens
+            .length;
+        uint256 metaLPTokenIndex = underlyingTokensLength -
+            basePoolBalances.length;
+        uint256 baseLPTokenBalance = ISwap(poolAddress).getTokenBalance(
+            uint8(metaLPTokenIndex)
+        );
+        uint256 baseLPTokenTotalSupply = LPToken(
+            pools[poolsIndexOfPlusOne[basePoolAddress] - 1].lpToken
+        ).totalSupply();
+
+        balances = new uint256[](underlyingTokensLength);
+        for (uint8 i = 0; i < metaLPTokenIndex; i++) {
+            balances[i] = ISwap(poolAddress).getTokenBalance(i);
+        }
+        for (uint256 i = metaLPTokenIndex; i < underlyingTokensLength; i++) {
+            balances[i] = basePoolBalances[i - metaLPTokenIndex]
+                .mul(baseLPTokenBalance)
+                .div(baseLPTokenTotalSupply);
+        }
+    }
+
+    function getConstantLength() public view returns (uint256) {
+        return 8; 
+    }
+}
diff -ruN SwapUtils.sol SwapUtils.sol
--- SwapUtils.sol	2022-09-20 00:50:42.650421200 +0200
+++ SwapUtils.sol	2022-11-04 17:04:17.075833000 +0100
@@ -1,1061 +1,1098 @@
-// SPDX-License-Identifier: MIT
-
-pragma solidity 0.6.12;
-
-import "@openzeppelin/contracts/math/SafeMath.sol";
-import "@openzeppelin/contracts/token/ERC20/SafeERC20.sol";
-import "./AmplificationUtils.sol";
-import "./LPToken.sol";
-import "./MathUtils.sol";
-
-/**
- * @title SwapUtils library
- * @notice A library to be used within Swap.sol. Contains functions responsible for custody and AMM functionalities.
- * @dev Contracts relying on this library must initialize SwapUtils.Swap struct then use this library
- * for SwapUtils.Swap struct. Note that this library contains both functions called by users and admins.
- * Admin functions should be protected within contracts using this library.
- */
-library SwapUtils {
-    using SafeERC20 for IERC20;
-    using SafeMath for uint256;
-    using MathUtils for uint256;
-
-    /*** EVENTS ***/
-
-    event TokenSwap(
-        address indexed buyer,
-        uint256 tokensSold,
-        uint256 tokensBought,
-        uint128 soldId,
-        uint128 boughtId
-    );
-    event AddLiquidity(
-        address indexed provider,
-        uint256[] tokenAmounts,
-        uint256[] fees,
-        uint256 invariant,
-        uint256 lpTokenSupply
-    );
-    event RemoveLiquidity(
-        address indexed provider,
-        uint256[] tokenAmounts,
-        uint256 lpTokenSupply
-    );
-    event RemoveLiquidityOne(
-        address indexed provider,
-        uint256 lpTokenAmount,
-        uint256 lpTokenSupply,
-        uint256 boughtId,
-        uint256 tokensBought
-    );
-    event RemoveLiquidityImbalance(
-        address indexed provider,
-        uint256[] tokenAmounts,
-        uint256[] fees,
-        uint256 invariant,
-        uint256 lpTokenSupply
-    );
-    event NewAdminFee(uint256 newAdminFee);
-    event NewSwapFee(uint256 newSwapFee);
-
-    struct Swap {
-        // variables around the ramp management of A,
-        // the amplification coefficient * n * (n - 1)
-        // see https://www.curve.fi/stableswap-paper.pdf for details
-        uint256 initialA;
-        uint256 futureA;
-        uint256 initialATime;
-        uint256 futureATime;
-        // fee calculation
-        uint256 swapFee;
-        uint256 adminFee;
-        LPToken lpToken;
-        // contract references for all tokens being pooled
-        IERC20[] pooledTokens;
-        // multipliers for each pooled token's precision to get to POOL_PRECISION_DECIMALS
-        // for example, TBTC has 18 decimals, so the multiplier should be 1. WBTC
-        // has 8, so the multiplier should be 10 ** 18 / 10 ** 8 => 10 ** 10
-        uint256[] tokenPrecisionMultipliers;
-        // the pool balance of each token, in the token's precision
-        // the contract's actual token balance might differ
-        uint256[] balances;
-    }
-
-    // Struct storing variables used in calculations in the
-    // calculateWithdrawOneTokenDY function to avoid stack too deep errors
-    struct CalculateWithdrawOneTokenDYInfo {
-        uint256 d0;
-        uint256 d1;
-        uint256 newY;
-        uint256 feePerToken;
-        uint256 preciseA;
-    }
-
-    // Struct storing variables used in calculations in the
-    // {add,remove}Liquidity functions to avoid stack too deep errors
-    struct ManageLiquidityInfo {
-        uint256 d0;
-        uint256 d1;
-        uint256 d2;
-        uint256 preciseA;
-        LPToken lpToken;
-        uint256 totalSupply;
-        uint256[] balances;
-        uint256[] multipliers;
-    }
-
-    // the precision all pools tokens will be converted to
-    uint8 public constant POOL_PRECISION_DECIMALS = 18;
-
-    // the denominator used to calculate admin and LP fees. For example, an
-    // LP fee might be something like tradeAmount.mul(fee).div(FEE_DENOMINATOR)
-    uint256 private constant FEE_DENOMINATOR = 10**10;
-
-    // Max swap fee is 1% or 100bps of each swap
-    uint256 public constant MAX_SWAP_FEE = 10**8;
-
-    // Max adminFee is 100% of the swapFee
-    // adminFee does not add additional fee on top of swapFee
-    // Instead it takes a certain % of the swapFee. Therefore it has no impact on the
-    // users but only on the earnings of LPs
-    uint256 public constant MAX_ADMIN_FEE = 10**10;
-
-    // Constant value used as max loop limit
-    uint256 private constant MAX_LOOP_LIMIT = 256;
-
-    /*** VIEW & PURE FUNCTIONS ***/
-
-    function _getAPrecise(Swap storage self) internal view returns (uint256) {
-        return AmplificationUtils._getAPrecise(self);
-    }
-
-    /**
-     * @notice Calculate the dy, the amount of selected token that user receives and
-     * the fee of withdrawing in one token
-     * @param tokenAmount the amount to withdraw in the pool's precision
-     * @param tokenIndex which token will be withdrawn
-     * @param self Swap struct to read from
-     * @return the amount of token user will receive
-     */
-    function calculateWithdrawOneToken(
-        Swap storage self,
-        uint256 tokenAmount,
-        uint8 tokenIndex
-    ) external view returns (uint256) {
-        (uint256 availableTokenAmount, ) = _calculateWithdrawOneToken(
-            self,
-            tokenAmount,
-            tokenIndex,
-            self.lpToken.totalSupply()
-        );
-        return availableTokenAmount;
-    }
-
-    function _calculateWithdrawOneToken(
-        Swap storage self,
-        uint256 tokenAmount,
-        uint8 tokenIndex,
-        uint256 totalSupply
-    ) internal view returns (uint256, uint256) {
-        uint256 dy;
-        uint256 newY;
-        uint256 currentY;
-
-        (dy, newY, currentY) = calculateWithdrawOneTokenDY(
-            self,
-            tokenIndex,
-            tokenAmount,
-            totalSupply
-        );
-
-        // dy_0 (without fees)
-        // dy, dy_0 - dy
-
-        uint256 dySwapFee = currentY
-            .sub(newY)
-            .div(self.tokenPrecisionMultipliers[tokenIndex])
-            .sub(dy);
-
-        return (dy, dySwapFee);
-    }
-
-    /**
-     * @notice Calculate the dy of withdrawing in one token
-     * @param self Swap struct to read from
-     * @param tokenIndex which token will be withdrawn
-     * @param tokenAmount the amount to withdraw in the pools precision
-     * @return the d and the new y after withdrawing one token
-     */
-    function calculateWithdrawOneTokenDY(
-        Swap storage self,
-        uint8 tokenIndex,
-        uint256 tokenAmount,
-        uint256 totalSupply
-    )
-        internal
-        view
-        returns (
-            uint256,
-            uint256,
-            uint256
-        )
-    {
-        // Get the current D, then solve the stableswap invariant
-        // y_i for D - tokenAmount
-        uint256[] memory xp = _xp(self);
-
-        require(tokenIndex < xp.length, "Token index out of range");
-
-        CalculateWithdrawOneTokenDYInfo
-            memory v = CalculateWithdrawOneTokenDYInfo(0, 0, 0, 0, 0);
-        v.preciseA = _getAPrecise(self);
-        v.d0 = getD(xp, v.preciseA);
-        v.d1 = v.d0.sub(tokenAmount.mul(v.d0).div(totalSupply));
-
-        require(tokenAmount <= xp[tokenIndex], "Withdraw exceeds available");
-
-        v.newY = getYD(v.preciseA, tokenIndex, xp, v.d1);
-
-        uint256[] memory xpReduced = new uint256[](xp.length);
-
-        v.feePerToken = _feePerToken(self.swapFee, xp.length);
-        for (uint256 i = 0; i < xp.length; i++) {
-            uint256 xpi = xp[i];
-            // if i == tokenIndex, dxExpected = xp[i] * d1 / d0 - newY
-            // else dxExpected = xp[i] - (xp[i] * d1 / d0)
-            // xpReduced[i] -= dxExpected * fee / FEE_DENOMINATOR
-            xpReduced[i] = xpi.sub(
-                (
-                    (i == tokenIndex)
-                        ? xpi.mul(v.d1).div(v.d0).sub(v.newY)
-                        : xpi.sub(xpi.mul(v.d1).div(v.d0))
-                ).mul(v.feePerToken).div(FEE_DENOMINATOR)
-            );
-        }
-
-        uint256 dy = xpReduced[tokenIndex].sub(
-            getYD(v.preciseA, tokenIndex, xpReduced, v.d1)
-        );
-        dy = dy.sub(1).div(self.tokenPrecisionMultipliers[tokenIndex]);
-
-        return (dy, v.newY, xp[tokenIndex]);
-    }
-
-    /**
-     * @notice Calculate the price of a token in the pool with given
-     * precision-adjusted balances and a particular D.
-     *
-     * @dev This is accomplished via solving the invariant iteratively.
-     * See the StableSwap paper and Curve.fi implementation for further details.
-     *
-     * x_1**2 + x1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)
-     * x_1**2 + b*x_1 = c
-     * x_1 = (x_1**2 + c) / (2*x_1 + b)
-     *
-     * @param a the amplification coefficient * n * (n - 1). See the StableSwap paper for details.
-     * @param tokenIndex Index of token we are calculating for.
-     * @param xp a precision-adjusted set of pool balances. Array should be
-     * the same cardinality as the pool.
-     * @param d the stableswap invariant
-     * @return the price of the token, in the same precision as in xp
-     */
-    function getYD(
-        uint256 a,
-        uint8 tokenIndex,
-        uint256[] memory xp,
-        uint256 d
-    ) internal pure returns (uint256) {
-        uint256 numTokens = xp.length;
-        require(tokenIndex < numTokens, "Token not found");
-
-        uint256 c = d;
-        uint256 s;
-        uint256 nA = a.mul(numTokens);
-
-        for (uint256 i = 0; i < numTokens; i++) {
-            if (i != tokenIndex) {
-                s = s.add(xp[i]);
-                c = c.mul(d).div(xp[i].mul(numTokens));
-                // If we were to protect the division loss we would have to keep the denominator separate
-                // and divide at the end. However this leads to overflow with large numTokens or/and D.
-                // c = c * D * D * D * ... overflow!
-            }
-        }
-        c = c.mul(d).mul(AmplificationUtils.A_PRECISION).div(nA.mul(numTokens));
-
-        uint256 b = s.add(d.mul(AmplificationUtils.A_PRECISION).div(nA));
-        uint256 yPrev;
-        uint256 y = d;
-        for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {
-            yPrev = y;
-            y = y.mul(y).add(c).div(y.mul(2).add(b).sub(d));
-            if (y.within1(yPrev)) {
-                return y;
-            }
-        }
-        revert("Approximation did not converge");
-    }
-
-    /**
-     * @notice Get D, the StableSwap invariant, based on a set of balances and a particular A.
-     * @param xp a precision-adjusted set of pool balances. Array should be the same cardinality
-     * as the pool.
-     * @param a the amplification coefficient * n * (n - 1) in A_PRECISION.
-     * See the StableSwap paper for details
-     * @return the invariant, at the precision of the pool
-     */
-    function getD(uint256[] memory xp, uint256 a)
-        internal
-        pure
-        returns (uint256)
-    {
-        uint256 numTokens = xp.length;
-        uint256 s;
-        for (uint256 i = 0; i < numTokens; i++) {
-            s = s.add(xp[i]);
-        }
-        if (s == 0) {
-            return 0;
-        }
-
-        uint256 prevD;
-        uint256 d = s;
-        uint256 nA = a.mul(numTokens);
-
-        for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {
-            uint256 dP = d;
-            for (uint256 j = 0; j < numTokens; j++) {
-                dP = dP.mul(d).div(xp[j].mul(numTokens));
-                // If we were to protect the division loss we would have to keep the denominator separate
-                // and divide at the end. However this leads to overflow with large numTokens or/and D.
-                // dP = dP * D * D * D * ... overflow!
-            }
-            prevD = d;
-            d = nA
-                .mul(s)
-                .div(AmplificationUtils.A_PRECISION)
-                .add(dP.mul(numTokens))
-                .mul(d)
-                .div(
-                    nA
-                        .sub(AmplificationUtils.A_PRECISION)
-                        .mul(d)
-                        .div(AmplificationUtils.A_PRECISION)
-                        .add(numTokens.add(1).mul(dP))
-                );
-            if (d.within1(prevD)) {
-                return d;
-            }
-        }
-
-        // Convergence should occur in 4 loops or less. If this is reached, there may be something wrong
-        // with the pool. If this were to occur repeatedly, LPs should withdraw via `removeLiquidity()`
-        // function which does not rely on D.
-        revert("D does not converge");
-    }
-
-    /**
-     * @notice Given a set of balances and precision multipliers, return the
-     * precision-adjusted balances.
-     *
-     * @param balances an array of token balances, in their native precisions.
-     * These should generally correspond with pooled tokens.
-     *
-     * @param precisionMultipliers an array of multipliers, corresponding to
-     * the amounts in the balances array. When multiplied together they
-     * should yield amounts at the pool's precision.
-     *
-     * @return an array of amounts "scaled" to the pool's precision
-     */
-    function _xp(
-        uint256[] memory balances,
-        uint256[] memory precisionMultipliers
-    ) internal pure returns (uint256[] memory) {
-        uint256 numTokens = balances.length;
-        require(
-            numTokens == precisionMultipliers.length,
-            "Balances must match multipliers"
-        );
-        uint256[] memory xp = new uint256[](numTokens);
-        for (uint256 i = 0; i < numTokens; i++) {
-            xp[i] = balances[i].mul(precisionMultipliers[i]);
-        }
-        return xp;
-    }
-
-    /**
-     * @notice Return the precision-adjusted balances of all tokens in the pool
-     * @param self Swap struct to read from
-     * @return the pool balances "scaled" to the pool's precision, allowing
-     * them to be more easily compared.
-     */
-    function _xp(Swap storage self) internal view returns (uint256[] memory) {
-        return _xp(self.balances, self.tokenPrecisionMultipliers);
-    }
-
-    /**
-     * @notice Get the virtual price, to help calculate profit
-     * @param self Swap struct to read from
-     * @return the virtual price, scaled to precision of POOL_PRECISION_DECIMALS
-     */
-    function getVirtualPrice(Swap storage self)
-        external
-        view
-        returns (uint256)
-    {
-        uint256 d = getD(_xp(self), _getAPrecise(self));
-        LPToken lpToken = self.lpToken;
-        uint256 supply = lpToken.totalSupply();
-        if (supply > 0) {
-            return d.mul(10**uint256(POOL_PRECISION_DECIMALS)).div(supply);
-        }
-        return 0;
-    }
-
-    /**
-     * @notice Calculate the new balances of the tokens given the indexes of the token
-     * that is swapped from (FROM) and the token that is swapped to (TO).
-     * This function is used as a helper function to calculate how much TO token
-     * the user should receive on swap.
-     *
-     * @param preciseA precise form of amplification coefficient
-     * @param tokenIndexFrom index of FROM token
-     * @param tokenIndexTo index of TO token
-     * @param x the new total amount of FROM token
-     * @param xp balances of the tokens in the pool
-     * @return the amount of TO token that should remain in the pool
-     */
-    function getY(
-        uint256 preciseA,
-        uint8 tokenIndexFrom,
-        uint8 tokenIndexTo,
-        uint256 x,
-        uint256[] memory xp
-    ) internal pure returns (uint256) {
-        uint256 numTokens = xp.length;
-        require(
-            tokenIndexFrom != tokenIndexTo,
-            "Can't compare token to itself"
-        );
-        require(
-            tokenIndexFrom < numTokens && tokenIndexTo < numTokens,
-            "Tokens must be in pool"
-        );
-
-        uint256 d = getD(xp, preciseA);
-        uint256 c = d;
-        uint256 s;
-        uint256 nA = numTokens.mul(preciseA);
-
-        uint256 _x;
-        for (uint256 i = 0; i < numTokens; i++) {
-            if (i == tokenIndexFrom) {
-                _x = x;
-            } else if (i != tokenIndexTo) {
-                _x = xp[i];
-            } else {
-                continue;
-            }
-            s = s.add(_x);
-            c = c.mul(d).div(_x.mul(numTokens));
-            // If we were to protect the division loss we would have to keep the denominator separate
-            // and divide at the end. However this leads to overflow with large numTokens or/and D.
-            // c = c * D * D * D * ... overflow!
-        }
-        c = c.mul(d).mul(AmplificationUtils.A_PRECISION).div(nA.mul(numTokens));
-        uint256 b = s.add(d.mul(AmplificationUtils.A_PRECISION).div(nA));
-        uint256 yPrev;
-        uint256 y = d;
-
-        // iterative approximation
-        for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {
-            yPrev = y;
-            y = y.mul(y).add(c).div(y.mul(2).add(b).sub(d));
-            if (y.within1(yPrev)) {
-                return y;
-            }
-        }
-        revert("Approximation did not converge");
-    }
-
-    /**
-     * @notice Externally calculates a swap between two tokens.
-     * @param self Swap struct to read from
-     * @param tokenIndexFrom the token to sell
-     * @param tokenIndexTo the token to buy
-     * @param dx the number of tokens to sell. If the token charges a fee on transfers,
-     * use the amount that gets transferred after the fee.
-     * @return dy the number of tokens the user will get
-     */
-    function calculateSwap(
-        Swap storage self,
-        uint8 tokenIndexFrom,
-        uint8 tokenIndexTo,
-        uint256 dx
-    ) external view returns (uint256 dy) {
-        (dy, ) = _calculateSwap(
-            self,
-            tokenIndexFrom,
-            tokenIndexTo,
-            dx,
-            self.balances
-        );
-    }
-
-    /**
-     * @notice Internally calculates a swap between two tokens.
-     *
-     * @dev The caller is expected to transfer the actual amounts (dx and dy)
-     * using the token contracts.
-     *
-     * @param self Swap struct to read from
-     * @param tokenIndexFrom the token to sell
-     * @param tokenIndexTo the token to buy
-     * @param dx the number of tokens to sell. If the token charges a fee on transfers,
-     * use the amount that gets transferred after the fee.
-     * @return dy the number of tokens the user will get
-     * @return dyFee the associated fee
-     */
-    function _calculateSwap(
-        Swap storage self,
-        uint8 tokenIndexFrom,
-        uint8 tokenIndexTo,
-        uint256 dx,
-        uint256[] memory balances
-    ) internal view returns (uint256 dy, uint256 dyFee) {
-        uint256[] memory multipliers = self.tokenPrecisionMultipliers;
-        uint256[] memory xp = _xp(balances, multipliers);
-        require(
-            tokenIndexFrom < xp.length && tokenIndexTo < xp.length,
-            "Token index out of range"
-        );
-        uint256 x = dx.mul(multipliers[tokenIndexFrom]).add(xp[tokenIndexFrom]);
-        uint256 y = getY(
-            _getAPrecise(self),
-            tokenIndexFrom,
-            tokenIndexTo,
-            x,
-            xp
-        );
-        dy = xp[tokenIndexTo].sub(y).sub(1);
-        dyFee = dy.mul(self.swapFee).div(FEE_DENOMINATOR);
-        dy = dy.sub(dyFee).div(multipliers[tokenIndexTo]);
-    }
-
-    /**
-     * @notice A simple method to calculate amount of each underlying
-     * tokens that is returned upon burning given amount of
-     * LP tokens
-     *
-     * @param amount the amount of LP tokens that would to be burned on
-     * withdrawal
-     * @return array of amounts of tokens user will receive
-     */
-    function calculateRemoveLiquidity(Swap storage self, uint256 amount)
-        external
-        view
-        returns (uint256[] memory)
-    {
-        return
-            _calculateRemoveLiquidity(
-                self.balances,
-                amount,
-                self.lpToken.totalSupply()
-            );
-    }
-
-    function _calculateRemoveLiquidity(
-        uint256[] memory balances,
-        uint256 amount,
-        uint256 totalSupply
-    ) internal pure returns (uint256[] memory) {
-        require(amount <= totalSupply, "Cannot exceed total supply");
-
-        uint256[] memory amounts = new uint256[](balances.length);
-
-        for (uint256 i = 0; i < balances.length; i++) {
-            amounts[i] = balances[i].mul(amount).div(totalSupply);
-        }
-        return amounts;
-    }
-
-    /**
-     * @notice A simple method to calculate prices from deposits or
-     * withdrawals, excluding fees but including slippage. This is
-     * helpful as an input into the various "min" parameters on calls
-     * to fight front-running
-     *
-     * @dev This shouldn't be used outside frontends for user estimates.
-     *
-     * @param self Swap struct to read from
-     * @param amounts an array of token amounts to deposit or withdrawal,
-     * corresponding to pooledTokens. The amount should be in each
-     * pooled token's native precision. If a token charges a fee on transfers,
-     * use the amount that gets transferred after the fee.
-     * @param deposit whether this is a deposit or a withdrawal
-     * @return if deposit was true, total amount of lp token that will be minted and if
-     * deposit was false, total amount of lp token that will be burned
-     */
-    function calculateTokenAmount(
-        Swap storage self,
-        uint256[] calldata amounts,
-        bool deposit
-    ) external view returns (uint256) {
-        uint256 a = _getAPrecise(self);
-        uint256[] memory balances = self.balances;
-        uint256[] memory multipliers = self.tokenPrecisionMultipliers;
-
-        uint256 d0 = getD(_xp(balances, multipliers), a);
-        for (uint256 i = 0; i < balances.length; i++) {
-            if (deposit) {
-                balances[i] = balances[i].add(amounts[i]);
-            } else {
-                balances[i] = balances[i].sub(
-                    amounts[i],
-                    "Cannot withdraw more than available"
-                );
-            }
-        }
-        uint256 d1 = getD(_xp(balances, multipliers), a);
-        uint256 totalSupply = self.lpToken.totalSupply();
-
-        if (deposit) {
-            return d1.sub(d0).mul(totalSupply).div(d0);
-        } else {
-            return d0.sub(d1).mul(totalSupply).div(d0);
-        }
-    }
-
-    /**
-     * @notice return accumulated amount of admin fees of the token with given index
-     * @param self Swap struct to read from
-     * @param index Index of the pooled token
-     * @return admin balance in the token's precision
-     */
-    function getAdminBalance(Swap storage self, uint256 index)
-        external
-        view
-        returns (uint256)
-    {
-        require(index < self.pooledTokens.length, "Token index out of range");
-        return
-            self.pooledTokens[index].balanceOf(address(this)).sub(
-                self.balances[index]
-            );
-    }
-
-    /**
-     * @notice internal helper function to calculate fee per token multiplier used in
-     * swap fee calculations
-     * @param swapFee swap fee for the tokens
-     * @param numTokens number of tokens pooled
-     */
-    function _feePerToken(uint256 swapFee, uint256 numTokens)
-        internal
-        pure
-        returns (uint256)
-    {
-        return swapFee.mul(numTokens).div(numTokens.sub(1).mul(4));
-    }
-
-    /*** STATE MODIFYING FUNCTIONS ***/
-
-    /**
-     * @notice swap two tokens in the pool
-     * @param self Swap struct to read from and write to
-     * @param tokenIndexFrom the token the user wants to sell
-     * @param tokenIndexTo the token the user wants to buy
-     * @param dx the amount of tokens the user wants to sell
-     * @param minDy the min amount the user would like to receive, or revert.
-     * @return amount of token user received on swap
-     */
-    function swap(
-        Swap storage self,
-        uint8 tokenIndexFrom,
-        uint8 tokenIndexTo,
-        uint256 dx,
-        uint256 minDy
-    ) external returns (uint256) {
-        {
-            IERC20 tokenFrom = self.pooledTokens[tokenIndexFrom];
-            require(
-                dx <= tokenFrom.balanceOf(msg.sender),
-                "Cannot swap more than you own"
-            );
-            // Transfer tokens first to see if a fee was charged on transfer
-            uint256 beforeBalance = tokenFrom.balanceOf(address(this));
-            tokenFrom.safeTransferFrom(msg.sender, address(this), dx);
-
-            // Use the actual transferred amount for AMM math
-            dx = tokenFrom.balanceOf(address(this)).sub(beforeBalance);
-        }
-
-        uint256 dy;
-        uint256 dyFee;
-        uint256[] memory balances = self.balances;
-        (dy, dyFee) = _calculateSwap(
-            self,
-            tokenIndexFrom,
-            tokenIndexTo,
-            dx,
-            balances
-        );
-        require(dy >= minDy, "Swap didn't result in min tokens");
-
-        uint256 dyAdminFee = dyFee.mul(self.adminFee).div(FEE_DENOMINATOR).div(
-            self.tokenPrecisionMultipliers[tokenIndexTo]
-        );
-
-        self.balances[tokenIndexFrom] = balances[tokenIndexFrom].add(dx);
-        self.balances[tokenIndexTo] = balances[tokenIndexTo].sub(dy).sub(
-            dyAdminFee
-        );
-
-        self.pooledTokens[tokenIndexTo].safeTransfer(msg.sender, dy);
-
-        emit TokenSwap(msg.sender, dx, dy, tokenIndexFrom, tokenIndexTo);
-
-        return dy;
-    }
-
-    /**
-     * @notice Add liquidity to the pool
-     * @param self Swap struct to read from and write to
-     * @param amounts the amounts of each token to add, in their native precision
-     * @param minToMint the minimum LP tokens adding this amount of liquidity
-     * should mint, otherwise revert. Handy for front-running mitigation
-     * allowed addresses. If the pool is not in the guarded launch phase, this parameter will be ignored.
-     * @return amount of LP token user received
-     */
-    function addLiquidity(
-        Swap storage self,
-        uint256[] memory amounts,
-        uint256 minToMint
-    ) external returns (uint256) {
-        IERC20[] memory pooledTokens = self.pooledTokens;
-        require(
-            amounts.length == pooledTokens.length,
-            "Amounts must match pooled tokens"
-        );
-
-        // current state
-        ManageLiquidityInfo memory v = ManageLiquidityInfo(
-            0,
-            0,
-            0,
-            _getAPrecise(self),
-            self.lpToken,
-            0,
-            self.balances,
-            self.tokenPrecisionMultipliers
-        );
-        v.totalSupply = v.lpToken.totalSupply();
-
-        if (v.totalSupply != 0) {
-            v.d0 = getD(_xp(v.balances, v.multipliers), v.preciseA);
-        }
-
-        uint256[] memory newBalances = new uint256[](pooledTokens.length);
-
-        for (uint256 i = 0; i < pooledTokens.length; i++) {
-            require(
-                v.totalSupply != 0 || amounts[i] > 0,
-                "Must supply all tokens in pool"
-            );
-
-            // Transfer tokens first to see if a fee was charged on transfer
-            if (amounts[i] != 0) {
-                uint256 beforeBalance = pooledTokens[i].balanceOf(
-                    address(this)
-                );
-                pooledTokens[i].safeTransferFrom(
-                    msg.sender,
-                    address(this),
-                    amounts[i]
-                );
-
-                // Update the amounts[] with actual transfer amount
-                amounts[i] = pooledTokens[i].balanceOf(address(this)).sub(
-                    beforeBalance
-                );
-            }
-
-            newBalances[i] = v.balances[i].add(amounts[i]);
-        }
-
-        // invariant after change
-        v.d1 = getD(_xp(newBalances, v.multipliers), v.preciseA);
-        require(v.d1 > v.d0, "D should increase");
-
-        // updated to reflect fees and calculate the user's LP tokens
-        v.d2 = v.d1;
-        uint256[] memory fees = new uint256[](pooledTokens.length);
-
-        if (v.totalSupply != 0) {
-            uint256 feePerToken = _feePerToken(
-                self.swapFee,
-                pooledTokens.length
-            );
-            for (uint256 i = 0; i < pooledTokens.length; i++) {
-                uint256 idealBalance = v.d1.mul(v.balances[i]).div(v.d0);
-                fees[i] = feePerToken
-                    .mul(idealBalance.difference(newBalances[i]))
-                    .div(FEE_DENOMINATOR);
-                self.balances[i] = newBalances[i].sub(
-                    fees[i].mul(self.adminFee).div(FEE_DENOMINATOR)
-                );
-                newBalances[i] = newBalances[i].sub(fees[i]);
-            }
-            v.d2 = getD(_xp(newBalances, v.multipliers), v.preciseA);
-        } else {
-            // the initial depositor doesn't pay fees
-            self.balances = newBalances;
-        }
-
-        uint256 toMint;
-        if (v.totalSupply == 0) {
-            toMint = v.d1;
-        } else {
-            toMint = v.d2.sub(v.d0).mul(v.totalSupply).div(v.d0);
-        }
-
-        require(toMint >= minToMint, "Couldn't mint min requested");
-
-        // mint the user's LP tokens
-        v.lpToken.mint(msg.sender, toMint);
-
-        emit AddLiquidity(
-            msg.sender,
-            amounts,
-            fees,
-            v.d1,
-            v.totalSupply.add(toMint)
-        );
-
-        return toMint;
-    }
-
-    /**
-     * @notice Burn LP tokens to remove liquidity from the pool.
-     * @dev Liquidity can always be removed, even when the pool is paused.
-     * @param self Swap struct to read from and write to
-     * @param amount the amount of LP tokens to burn
-     * @param minAmounts the minimum amounts of each token in the pool
-     * acceptable for this burn. Useful as a front-running mitigation
-     * @return amounts of tokens the user received
-     */
-    function removeLiquidity(
-        Swap storage self,
-        uint256 amount,
-        uint256[] calldata minAmounts
-    ) external returns (uint256[] memory) {
-        LPToken lpToken = self.lpToken;
-        IERC20[] memory pooledTokens = self.pooledTokens;
-        require(amount <= lpToken.balanceOf(msg.sender), ">LP.balanceOf");
-        require(
-            minAmounts.length == pooledTokens.length,
-            "minAmounts must match poolTokens"
-        );
-
-        uint256[] memory balances = self.balances;
-        uint256 totalSupply = lpToken.totalSupply();
-
-        uint256[] memory amounts = _calculateRemoveLiquidity(
-            balances,
-            amount,
-            totalSupply
-        );
-
-        for (uint256 i = 0; i < amounts.length; i++) {
-            require(amounts[i] >= minAmounts[i], "amounts[i] < minAmounts[i]");
-            self.balances[i] = balances[i].sub(amounts[i]);
-            pooledTokens[i].safeTransfer(msg.sender, amounts[i]);
-        }
-
-        lpToken.burnFrom(msg.sender, amount);
-
-        emit RemoveLiquidity(msg.sender, amounts, totalSupply.sub(amount));
-
-        return amounts;
-    }
-
-    /**
-     * @notice Remove liquidity from the pool all in one token.
-     * @param self Swap struct to read from and write to
-     * @param tokenAmount the amount of the lp tokens to burn
-     * @param tokenIndex the index of the token you want to receive
-     * @param minAmount the minimum amount to withdraw, otherwise revert
-     * @return amount chosen token that user received
-     */
-    function removeLiquidityOneToken(
-        Swap storage self,
-        uint256 tokenAmount,
-        uint8 tokenIndex,
-        uint256 minAmount
-    ) external returns (uint256) {
-        LPToken lpToken = self.lpToken;
-        IERC20[] memory pooledTokens = self.pooledTokens;
-
-        require(tokenAmount <= lpToken.balanceOf(msg.sender), ">LP.balanceOf");
-        require(tokenIndex < pooledTokens.length, "Token not found");
-
-        uint256 totalSupply = lpToken.totalSupply();
-
-        (uint256 dy, uint256 dyFee) = _calculateWithdrawOneToken(
-            self,
-            tokenAmount,
-            tokenIndex,
-            totalSupply
-        );
-
-        require(dy >= minAmount, "dy < minAmount");
-
-        self.balances[tokenIndex] = self.balances[tokenIndex].sub(
-            dy.add(dyFee.mul(self.adminFee).div(FEE_DENOMINATOR))
-        );
-        lpToken.burnFrom(msg.sender, tokenAmount);
-        pooledTokens[tokenIndex].safeTransfer(msg.sender, dy);
-
-        emit RemoveLiquidityOne(
-            msg.sender,
-            tokenAmount,
-            totalSupply,
-            tokenIndex,
-            dy
-        );
-
-        return dy;
-    }
-
-    /**
-     * @notice Remove liquidity from the pool, weighted differently than the
-     * pool's current balances.
-     *
-     * @param self Swap struct to read from and write to
-     * @param amounts how much of each token to withdraw
-     * @param maxBurnAmount the max LP token provider is willing to pay to
-     * remove liquidity. Useful as a front-running mitigation.
-     * @return actual amount of LP tokens burned in the withdrawal
-     */
-    function removeLiquidityImbalance(
-        Swap storage self,
-        uint256[] memory amounts,
-        uint256 maxBurnAmount
-    ) public returns (uint256) {
-        ManageLiquidityInfo memory v = ManageLiquidityInfo(
-            0,
-            0,
-            0,
-            _getAPrecise(self),
-            self.lpToken,
-            0,
-            self.balances,
-            self.tokenPrecisionMultipliers
-        );
-        v.totalSupply = v.lpToken.totalSupply();
-
-        IERC20[] memory pooledTokens = self.pooledTokens;
-
-        require(
-            amounts.length == pooledTokens.length,
-            "Amounts should match pool tokens"
-        );
-
-        require(
-            maxBurnAmount <= v.lpToken.balanceOf(msg.sender) &&
-                maxBurnAmount != 0,
-            ">LP.balanceOf"
-        );
-
-        uint256 feePerToken = _feePerToken(self.swapFee, pooledTokens.length);
-        uint256[] memory fees = new uint256[](pooledTokens.length);
-        {
-            uint256[] memory balances1 = new uint256[](pooledTokens.length);
-            v.d0 = getD(_xp(v.balances, v.multipliers), v.preciseA);
-            for (uint256 i = 0; i < pooledTokens.length; i++) {
-                balances1[i] = v.balances[i].sub(
-                    amounts[i],
-                    "Cannot withdraw more than available"
-                );
-            }
-            v.d1 = getD(_xp(balances1, v.multipliers), v.preciseA);
-
-            for (uint256 i = 0; i < pooledTokens.length; i++) {
-                uint256 idealBalance = v.d1.mul(v.balances[i]).div(v.d0);
-                uint256 difference = idealBalance.difference(balances1[i]);
-                fees[i] = feePerToken.mul(difference).div(FEE_DENOMINATOR);
-                self.balances[i] = balances1[i].sub(
-                    fees[i].mul(self.adminFee).div(FEE_DENOMINATOR)
-                );
-                balances1[i] = balances1[i].sub(fees[i]);
-            }
-
-            v.d2 = getD(_xp(balances1, v.multipliers), v.preciseA);
-        }
-        uint256 tokenAmount = v.d0.sub(v.d2).mul(v.totalSupply).div(v.d0);
-        require(tokenAmount != 0, "Burnt amount cannot be zero");
-        tokenAmount = tokenAmount.add(1);
-
-        require(tokenAmount <= maxBurnAmount, "tokenAmount > maxBurnAmount");
-
-        v.lpToken.burnFrom(msg.sender, tokenAmount);
-
-        for (uint256 i = 0; i < pooledTokens.length; i++) {
-            pooledTokens[i].safeTransfer(msg.sender, amounts[i]);
-        }
-
-        emit RemoveLiquidityImbalance(
-            msg.sender,
-            amounts,
-            fees,
-            v.d1,
-            v.totalSupply.sub(tokenAmount)
-        );
-
-        return tokenAmount;
-    }
-
-    /**
-     * @notice withdraw all admin fees to a given address
-     * @param self Swap struct to withdraw fees from
-     * @param to Address to send the fees to
-     */
-    function withdrawAdminFees(Swap storage self, address to) external {
-        IERC20[] memory pooledTokens = self.pooledTokens;
-        for (uint256 i = 0; i < pooledTokens.length; i++) {
-            IERC20 token = pooledTokens[i];
-            uint256 balance = token.balanceOf(address(this)).sub(
-                self.balances[i]
-            );
-            if (balance != 0) {
-                token.safeTransfer(to, balance);
-            }
-        }
-    }
-
-    /**
-     * @notice Sets the admin fee
-     * @dev adminFee cannot be higher than 100% of the swap fee
-     * @param self Swap struct to update
-     * @param newAdminFee new admin fee to be applied on future transactions
-     */
-    function setAdminFee(Swap storage self, uint256 newAdminFee) external {
-        require(newAdminFee <= MAX_ADMIN_FEE, "Fee is too high");
-        self.adminFee = newAdminFee;
-
-        emit NewAdminFee(newAdminFee);
-    }
-
-    /**
-     * @notice update the swap fee
-     * @dev fee cannot be higher than 1% of each swap
-     * @param self Swap struct to update
-     * @param newSwapFee new swap fee to be applied on future transactions
-     */
-    function setSwapFee(Swap storage self, uint256 newSwapFee) external {
-        require(newSwapFee <= MAX_SWAP_FEE, "Fee is too high");
-        self.swapFee = newSwapFee;
-
-        emit NewSwapFee(newSwapFee);
-    }
-}
+// SPDX-License-Identifier: MIT
+
+pragma solidity 0.6.12;
+
+import "@openzeppelin/contracts/math/SafeMath.sol";
+import "@openzeppelin/contracts/token/ERC20/SafeERC20.sol";
+import "./AmplificationUtils.sol";
+import "./LPToken.sol";
+import "./MathUtils.sol";
+
+/**
+ * @title SwapUtils library
+ * @notice A library to be used within Swap.sol. Contains functions responsible for custody and AMM functionalities.
+ * @dev Contracts relying on this library must initialize SwapUtils.Swap struct then use this library
+ * for SwapUtils.Swap struct. Note that this library contains both functions called by users and admins.
+ * Admin functions should be protected within contracts using this library.
+ */
+library SwapUtils {
+    using SafeERC20 for IERC20;
+    using SafeMath for uint256;
+    using MathUtils for uint256;
+
+    /*** EVENTS ***/
+
+    event TokenSwap(
+        address indexed buyer,
+        uint256 tokensSold,
+        uint256 tokensBought,
+        uint128 soldId,
+        uint128 boughtId
+    );
+    event AddLiquidity(
+        address indexed provider,
+        uint256[] tokenAmounts,
+        uint256[] fees,
+        uint256 invariant,
+        uint256 lpTokenSupply
+    );
+    event RemoveLiquidity(
+        address indexed provider,
+        uint256[] tokenAmounts,
+        uint256 lpTokenSupply
+    );
+    event RemoveLiquidityOne(
+        address indexed provider,
+        uint256 lpTokenAmount,
+        uint256 lpTokenSupply,
+        uint256 boughtId,
+        uint256 tokensBought
+    );
+    event RemoveLiquidityImbalance(
+        address indexed provider,
+        uint256[] tokenAmounts,
+        uint256[] fees,
+        uint256 invariant,
+        uint256 lpTokenSupply
+    );
+    event NewAdminFee(uint256 newAdminFee);
+    event NewSwapFee(uint256 newSwapFee);
+
+    struct Swap {
+        // variables around the ramp management of A,
+        // the amplification coefficient * n * (n - 1)
+        // see https://www.curve.fi/stableswap-paper.pdf for details
+        uint256 initialA;
+        uint256 futureA;
+        uint256 initialATime;
+        uint256 futureATime;
+        // fee calculation
+        uint256 swapFee;
+        uint256 adminFee;
+        LPToken lpToken;
+        // contract references for all tokens being pooled
+        IERC20[] pooledTokens;
+        // multipliers for each pooled token's precision to get to POOL_PRECISION_DECIMALS
+        // for example, TBTC has 18 decimals, so the multiplier should be 1. WBTC
+        // has 8, so the multiplier should be 10 ** 18 / 10 ** 8 => 10 ** 10
+        uint256[] tokenPrecisionMultipliers;
+        // the pool balance of each token, in the token's precision
+        // the contract's actual token balance might differ
+        uint256[] balances;
+    }
+
+    // Struct storing variables used in calculations in the
+    // calculateWithdrawOneTokenDY function to avoid stack too deep errors
+    struct CalculateWithdrawOneTokenDYInfo {
+        uint256 d0;
+        uint256 d1;
+        uint256 newY;
+        uint256 feePerToken;
+        uint256 preciseA;
+    }
+
+    // Struct storing variables used in calculations in the
+    // {add,remove}Liquidity functions to avoid stack too deep errors
+    struct ManageLiquidityInfo {
+        uint256 d0;
+        uint256 d1;
+        uint256 d2;
+        uint256 preciseA;
+        LPToken lpToken;
+        uint256 totalSupply;
+        uint256[] balances;
+        uint256[] multipliers;
+    }
+
+    // the precision all pools tokens will be converted to
+    uint8 public constant POOL_PRECISION_DECIMALS = 18;
+
+    // the denominator used to calculate admin and LP fees. For example, an
+    // LP fee might be something like tradeAmount.mul(fee).div(FEE_DENOMINATOR)
+    uint256 private constant FEE_DENOMINATOR = 10**10;
+
+    // Max swap fee is 1% or 100bps of each swap
+    uint256 public constant MAX_SWAP_FEE = 10**8;
+
+    // Max adminFee is 100% of the swapFee
+    // adminFee does not add additional fee on top of swapFee
+    // Instead it takes a certain % of the swapFee. Therefore it has no impact on the
+    // users but only on the earnings of LPs
+    uint256 public constant MAX_ADMIN_FEE = 10**10;
+
+    // Constant value used as max loop limit
+    uint256 private constant MAX_LOOP_LIMIT = 256;
+
+    /*** VIEW & PURE FUNCTIONS ***/
+
+    function _getAPrecise(Swap storage self) internal view returns (uint256) {
+        return AmplificationUtils._getAPrecise(self);
+    }
+
+    /**
+     * @notice Calculate the dy, the amount of selected token that user receives and
+     * the fee of withdrawing in one token
+     * @param tokenAmount the amount to withdraw in the pool's precision
+     * @param tokenIndex which token will be withdrawn
+     * @param self Swap struct to read from
+     * @return the amount of token user will receive
+     */
+    function calculateWithdrawOneToken(
+        Swap storage self,
+        uint256 tokenAmount,
+        uint8 tokenIndex
+    ) external view returns (uint256) {
+        (uint256 availableTokenAmount, ) = _calculateWithdrawOneToken(
+            self,
+            tokenAmount,
+            tokenIndex,
+            self.lpToken.totalSupply()
+        );
+        return availableTokenAmount;
+    }
+
+    function _calculateWithdrawOneToken(
+        Swap storage self,
+        uint256 tokenAmount,
+        uint8 tokenIndex,
+        uint256 totalSupply
+    ) internal view returns (uint256, uint256) {
+        uint256 dy;
+        uint256 newY;
+        uint256 currentY;
+
+        (dy, newY, currentY) = calculateWithdrawOneTokenDY(
+            self,
+            tokenIndex,
+            tokenAmount,
+            totalSupply
+        );
+
+        // dy_0 (without fees)
+        // dy, dy_0 - dy
+
+        uint256 dySwapFee = currentY
+            .sub(newY)
+            .div(self.tokenPrecisionMultipliers[tokenIndex])
+            .sub(dy);
+
+        return (dy, dySwapFee);
+    }
+
+    /**
+     * @notice Calculate the dy of withdrawing in one token
+     * @param self Swap struct to read from
+     * @param tokenIndex which token will be withdrawn
+     * @param tokenAmount the amount to withdraw in the pools precision
+     * @return the d and the new y after withdrawing one token
+     */
+    function calculateWithdrawOneTokenDY(
+        Swap storage self,
+        uint8 tokenIndex,
+        uint256 tokenAmount,
+        uint256 totalSupply
+    )
+        internal
+        view
+        returns (
+            uint256,
+            uint256,
+            uint256
+        )
+    {
+        // Get the current D, then solve the stableswap invariant
+        // y_i for D - tokenAmount
+        uint256[] memory xp = _xp(self);
+
+        require(tokenIndex < xp.length, "Token index out of range");
+
+        CalculateWithdrawOneTokenDYInfo
+            memory v = CalculateWithdrawOneTokenDYInfo(0, 0, 0, 0, 0);
+        v.preciseA = _getAPrecise(self);
+        v.d0 = getD(xp, v.preciseA);
+        v.d1 = v.d0.sub(tokenAmount.mul(v.d0).div(totalSupply));
+
+        require(tokenAmount <= xp[tokenIndex], "Withdraw exceeds available");
+
+        v.newY = getYD(v.preciseA, tokenIndex, xp, v.d1);
+
+        uint256[] memory xpReduced = new uint256[](xp.length);
+
+        v.feePerToken = _feePerToken(self.swapFee, xp.length);
+        for (uint256 i = 0; i < xp.length; i++) {
+            uint256 xpi = xp[i];
+            // if i == tokenIndex, dxExpected = xp[i] * d1 / d0 - newY
+            // else dxExpected = xp[i] - (xp[i] * d1 / d0)
+            // xpReduced[i] -= dxExpected * fee / FEE_DENOMINATOR
+            xpReduced[i] = xpi.sub(
+                (
+                    (i == tokenIndex)
+                        ? xpi.mul(v.d1).div(v.d0).sub(v.newY)
+                        : xpi.sub(xpi.mul(v.d1).div(v.d0))
+                ).mul(v.feePerToken).div(FEE_DENOMINATOR)
+            );
+        }
+
+        uint256 dy = xpReduced[tokenIndex].sub(
+            getYD(v.preciseA, tokenIndex, xpReduced, v.d1)
+        );
+        dy = dy.sub(1).div(self.tokenPrecisionMultipliers[tokenIndex]);
+
+        return (dy, v.newY, xp[tokenIndex]);
+    }
+
+    /**
+     * @notice Calculate the price of a token in the pool with given
+     * precision-adjusted balances and a particular D.
+     *
+     * @dev This is accomplished via solving the invariant iteratively.
+     * See the StableSwap paper and Curve.fi implementation for further details.
+     *
+     * x_1**2 + x1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)
+     * x_1**2 + b*x_1 = c
+     * x_1 = (x_1**2 + c) / (2*x_1 + b)
+     *
+     * @param a the amplification coefficient * n * (n - 1). See the StableSwap paper for details.
+     * @param tokenIndex Index of token we are calculating for.
+     * @param xp a precision-adjusted set of pool balances. Array should be
+     * the same cardinality as the pool.
+     * @param d the stableswap invariant
+     * @return the price of the token, in the same precision as in xp
+     */
+    function getYD(
+        uint256 a,
+        uint8 tokenIndex,
+        uint256[] memory xp,
+        uint256 d
+    ) internal pure returns (uint256) {
+        uint256 numTokens = xp.length;
+        require(tokenIndex < numTokens, "Token not found");
+
+        uint256 c = d;
+        uint256 s;
+        uint256 nA = a.mul(numTokens);
+
+        for (uint256 i = 0; i < numTokens; i++) {
+            if (i != tokenIndex) {
+                s = s.add(xp[i]);
+                c = c.mul(d).div(xp[i].mul(numTokens));
+                // If we were to protect the division loss we would have to keep the denominator separate
+                // and divide at the end. However this leads to overflow with large numTokens or/and D.
+                // c = c * D * D * D * ... overflow!
+            }
+        }
+        c = c.mul(d).mul(AmplificationUtils.A_PRECISION).div(nA.mul(numTokens));
+
+        uint256 b = s.add(d.mul(AmplificationUtils.A_PRECISION).div(nA));
+        uint256 yPrev;
+        uint256 y = d;
+        for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {
+            yPrev = y;
+            y = y.mul(y).add(c).div(y.mul(2).add(b).sub(d));
+            if (y.within1(yPrev)) {
+                return y;
+            }
+        }
+        revert("Approximation did not converge");
+    }
+    
+    function getDApprox(uint256 xp1, uint256 xp2) public pure returns(uint256) {
+        return xp1;
+    }
+
+    /**
+     * @notice Get D, the StableSwap invariant, based on a set of balances and a particular A.
+     * @param xp a precision-adjusted set of pool balances. Array should be the same cardinality
+     * as the pool.
+     * @param a the amplification coefficient * n * (n - 1) in A_PRECISION.
+     * See the StableSwap paper for details
+     * @return the invariant, at the precision of the pool
+     */
+    function getD(uint256[] memory xp, uint256 a)
+        internal
+        pure
+        returns (uint256)
+    {
+        return getDApprox(xp[0], xp[1]);
+        uint256 numTokens = xp.length;
+        uint256 s;
+        for (uint256 i = 0; i < numTokens; i++) {
+            s = s.add(xp[i]);
+        }
+        if (s == 0) {
+            return 0;
+        }
+
+        uint256 prevD;
+        uint256 d = s;
+        uint256 nA = a.mul(numTokens);
+
+        for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {
+            uint256 dP = d;
+            for (uint256 j = 0; j < numTokens; j++) {
+                dP = dP.mul(d).div(xp[j].mul(numTokens));
+                // If we were to protect the division loss we would have to keep the denominator separate
+                // and divide at the end. However this leads to overflow with large numTokens or/and D.
+                // dP = dP * D * D * D * ... overflow!
+            }
+            prevD = d;
+            d = nA
+                .mul(s)
+                .div(AmplificationUtils.A_PRECISION)
+                .add(dP.mul(numTokens))
+                .mul(d)
+                .div(
+                    nA
+                        .sub(AmplificationUtils.A_PRECISION)
+                        .mul(d)
+                        .div(AmplificationUtils.A_PRECISION)
+                        .add(numTokens.add(1).mul(dP))
+                );
+            if (d.within1(prevD)) {
+                return d;
+            }
+        }
+
+        // Convergence should occur in 4 loops or less. If this is reached, there may be something wrong
+        // with the pool. If this were to occur repeatedly, LPs should withdraw via `removeLiquidity()`
+        // function which does not rely on D.
+        revert("D does not converge");
+    }
+
+    /**
+     * @notice Given a set of balances and precision multipliers, return the
+     * precision-adjusted balances.
+     *
+     * @param balances an array of token balances, in their native precisions.
+     * These should generally correspond with pooled tokens.
+     *
+     * @param precisionMultipliers an array of multipliers, corresponding to
+     * the amounts in the balances array. When multiplied together they
+     * should yield amounts at the pool's precision.
+     *
+     * @return an array of amounts "scaled" to the pool's precision
+     */
+    function _xp(
+        uint256[] memory balances,
+        uint256[] memory precisionMultipliers
+    ) internal pure returns (uint256[] memory) {
+        uint256 numTokens = balances.length;
+        require(
+            numTokens == precisionMultipliers.length,
+            "Balances must match multipliers"
+        );
+        uint256[] memory xp = new uint256[](numTokens);
+        for (uint256 i = 0; i < numTokens; i++) {
+            xp[i] = balances[i].mul(precisionMultipliers[i]);
+        }
+        return xp;
+    }
+
+    /**
+     * @notice Return the precision-adjusted balances of all tokens in the pool
+     * @param self Swap struct to read from
+     * @return the pool balances "scaled" to the pool's precision, allowing
+     * them to be more easily compared.
+     */
+    function _xp(Swap storage self) internal view returns (uint256[] memory) {
+        return _xp(self.balances, self.tokenPrecisionMultipliers);
+    }
+
+    /**
+     * @notice Get the virtual price, to help calculate profit
+     * @param self Swap struct to read from
+     * @return the virtual price, scaled to precision of POOL_PRECISION_DECIMALS
+     */
+    function getVirtualPrice(Swap storage self)
+        external
+        view
+        returns (uint256)
+    {
+        uint256 d = getD(_xp(self), _getAPrecise(self));
+        LPToken lpToken = self.lpToken;
+        uint256 supply = lpToken.totalSupply();
+        if (supply > 0) {
+            return d.mul(10**uint256(POOL_PRECISION_DECIMALS)).div(supply);
+        }
+        return 0;
+    }
+
+    /**
+     * @notice Calculate the new balances of the tokens given the indexes of the token
+     * that is swapped from (FROM) and the token that is swapped to (TO).
+     * This function is used as a helper function to calculate how much TO token
+     * the user should receive on swap.
+     *
+     * @param preciseA precise form of amplification coefficient
+     * @param tokenIndexFrom index of FROM token
+     * @param tokenIndexTo index of TO token
+     * @param x the new total amount of FROM token
+     * @param xp balances of the tokens in the pool
+     * @return the amount of TO token that should remain in the pool
+     */
+    function getY(
+        uint256 preciseA,
+        uint8 tokenIndexFrom,
+        uint8 tokenIndexTo,
+        uint256 x,
+        uint256[] memory xp
+    ) internal pure returns (uint256) {
+        uint256 numTokens = xp.length;
+        require(
+            tokenIndexFrom != tokenIndexTo,
+            "Can't compare token to itself"
+        );
+        require(
+            tokenIndexFrom < numTokens && tokenIndexTo < numTokens,
+            "Tokens must be in pool"
+        );
+
+        uint256 d = getD(xp, preciseA);
+        uint256 c = d;
+        uint256 s;
+        uint256 nA = numTokens.mul(preciseA);
+
+        uint256 _x;
+        for (uint256 i = 0; i < numTokens; i++) {
+            if (i == tokenIndexFrom) {
+                _x = x;
+            } else if (i != tokenIndexTo) {
+                _x = xp[i];
+            } else {
+                continue;
+            }
+            s = s.add(_x);
+            c = c.mul(d).div(_x.mul(numTokens));
+            // If we were to protect the division loss we would have to keep the denominator separate
+            // and divide at the end. However this leads to overflow with large numTokens or/and D.
+            // c = c * D * D * D * ... overflow!
+        }
+        c = c.mul(d).mul(AmplificationUtils.A_PRECISION).div(nA.mul(numTokens));
+        uint256 b = s.add(d.mul(AmplificationUtils.A_PRECISION).div(nA));
+        uint256 yPrev;
+        uint256 y = d;
+
+        // iterative approximation
+        for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {
+            yPrev = y;
+            y = y.mul(y).add(c).div(y.mul(2).add(b).sub(d));
+            if (y.within1(yPrev)) {
+                return y;
+            }
+        }
+        revert("Approximation did not converge");
+    }
+
+    /**
+     * @notice Externally calculates a swap between two tokens.
+     * @param self Swap struct to read from
+     * @param tokenIndexFrom the token to sell
+     * @param tokenIndexTo the token to buy
+     * @param dx the number of tokens to sell. If the token charges a fee on transfers,
+     * use the amount that gets transferred after the fee.
+     * @return dy the number of tokens the user will get
+     */
+    function calculateSwap(
+        Swap storage self,
+        uint8 tokenIndexFrom,
+        uint8 tokenIndexTo,
+        uint256 dx
+    ) external view returns (uint256 dy) {
+        (dy, ) = _calculateSwap(
+            self,
+            tokenIndexFrom,
+            tokenIndexTo,
+            dx,
+            self.balances
+        );
+    }
+
+    /**
+     * @notice Internally calculates a swap between two tokens.
+     *
+     * @dev The caller is expected to transfer the actual amounts (dx and dy)
+     * using the token contracts.
+     *
+     * @param self Swap struct to read from
+     * @param tokenIndexFrom the token to sell
+     * @param tokenIndexTo the token to buy
+     * @param dx the number of tokens to sell. If the token charges a fee on transfers,
+     * use the amount that gets transferred after the fee.
+     * @return dy the number of tokens the user will get
+     * @return dyFee the associated fee
+     */
+    function _calculateSwap(
+        Swap storage self,
+        uint8 tokenIndexFrom,
+        uint8 tokenIndexTo,
+        uint256 dx,
+        uint256[] memory balances
+    ) internal view returns (uint256 dy, uint256 dyFee) {
+        uint256[] memory multipliers = self.tokenPrecisionMultipliers;
+        uint256[] memory xp = _xp(balances, multipliers);
+        require(
+            tokenIndexFrom < xp.length && tokenIndexTo < xp.length,
+            "Token index out of range"
+        );
+        uint256 x = dx.mul(multipliers[tokenIndexFrom]).add(xp[tokenIndexFrom]);
+        uint256 y = getY(
+            _getAPrecise(self),
+            tokenIndexFrom,
+            tokenIndexTo,
+            x,
+            xp
+        );
+        dy = xp[tokenIndexTo].sub(y).sub(1);
+        dyFee = dy.mul(self.swapFee).div(FEE_DENOMINATOR);
+        dy = dy.sub(dyFee).div(multipliers[tokenIndexTo]);
+    }
+
+    /**
+     * @notice A simple method to calculate amount of each underlying
+     * tokens that is returned upon burning given amount of
+     * LP tokens
+     *
+     * @param amount the amount of LP tokens that would to be burned on
+     * withdrawal
+     * @return array of amounts of tokens user will receive
+     */
+    function calculateRemoveLiquidity(Swap storage self, uint256 amount)
+        external
+        view
+        returns (uint256[] memory)
+    {
+        return
+            _calculateRemoveLiquidity(
+                self.balances,
+                amount,
+                self.lpToken.totalSupply()
+            );
+    }
+
+    function _calculateRemoveLiquidity(
+        uint256[] memory balances,
+        uint256 amount,
+        uint256 totalSupply
+    ) internal pure returns (uint256[] memory) {
+        require(amount <= totalSupply, "Cannot exceed total supply");
+
+        uint256[] memory amounts = new uint256[](balances.length);
+
+        for (uint256 i = 0; i < balances.length; i++) {
+            amounts[i] = balances[i].mul(amount).div(totalSupply);
+        }
+        return amounts;
+    }
+
+    /**
+     * @notice A simple method to calculate prices from deposits or
+     * withdrawals, excluding fees but including slippage. This is
+     * helpful as an input into the various "min" parameters on calls
+     * to fight front-running
+     *
+     * @dev This shouldn't be used outside frontends for user estimates.
+     *
+     * @param self Swap struct to read from
+     * @param amounts an array of token amounts to deposit or withdrawal,
+     * corresponding to pooledTokens. The amount should be in each
+     * pooled token's native precision. If a token charges a fee on transfers,
+     * use the amount that gets transferred after the fee.
+     * @param deposit whether this is a deposit or a withdrawal
+     * @return if deposit was true, total amount of lp token that will be minted and if
+     * deposit was false, total amount of lp token that will be burned
+     */
+    function calculateTokenAmount(
+        Swap storage self,
+        uint256[] calldata amounts,
+        bool deposit
+    ) external view returns (uint256) {
+        uint256 a = _getAPrecise(self);
+        uint256[] memory balances = self.balances;
+        uint256[] memory multipliers = self.tokenPrecisionMultipliers;
+
+        uint256 d0 = getD(_xp(balances, multipliers), a);
+        for (uint256 i = 0; i < balances.length; i++) {
+            if (deposit) {
+                balances[i] = balances[i].add(amounts[i]);
+            } else {
+                balances[i] = balances[i].sub(
+                    amounts[i],
+                    "Cannot withdraw more than available"
+                );
+            }
+        }
+        uint256 d1 = getD(_xp(balances, multipliers), a);
+        uint256 totalSupply = self.lpToken.totalSupply();
+
+        if (deposit) {
+            return d1.sub(d0).mul(totalSupply).div(d0);
+        } else {
+            return d0.sub(d1).mul(totalSupply).div(d0);
+        }
+    }
+
+    /**
+     * @notice return accumulated amount of admin fees of the token with given index
+     * @param self Swap struct to read from
+     * @param index Index of the pooled token
+     * @return admin balance in the token's precision
+     */
+    function getAdminBalance(Swap storage self, uint256 index)
+        external
+        view
+        returns (uint256)
+    {
+        require(index < self.pooledTokens.length, "Token index out of range");
+        return
+            self.pooledTokens[index].balanceOf(address(this)).sub(
+                self.balances[index]
+            );
+    }
+
+    /**
+     * @notice internal helper function to calculate fee per token multiplier used in
+     * swap fee calculations
+     * @param swapFee swap fee for the tokens
+     * @param numTokens number of tokens pooled
+     */
+    function _feePerToken(uint256 swapFee, uint256 numTokens)
+        internal
+        pure
+        returns (uint256)
+    {
+        return swapFee.mul(numTokens).div(numTokens.sub(1).mul(4));
+    }
+
+    /*** STATE MODIFYING FUNCTIONS ***/
+
+    /**
+     * @notice swap two tokens in the pool
+     * @param self Swap struct to read from and write to
+     * @param tokenIndexFrom the token the user wants to sell
+     * @param tokenIndexTo the token the user wants to buy
+     * @param dx the amount of tokens the user wants to sell
+     * @param minDy the min amount the user would like to receive, or revert.
+     * @return amount of token user received on swap
+     */
+    function swap(
+        Swap storage self,
+        uint8 tokenIndexFrom,
+        uint8 tokenIndexTo,
+        uint256 dx,
+        uint256 minDy
+    ) external returns (uint256) {
+        {
+            IERC20 tokenFrom = self.pooledTokens[tokenIndexFrom];
+            require(
+                dx <= tokenFrom.balanceOf(msg.sender),
+                "Cannot swap more than you own"
+            );
+            // Transfer tokens first to see if a fee was charged on transfer
+            uint256 beforeBalance = tokenFrom.balanceOf(address(this));
+            tokenFrom.safeTransferFrom(msg.sender, address(this), dx);
+
+            // Use the actual transferred amount for AMM math
+            dx = tokenFrom.balanceOf(address(this)).sub(beforeBalance);
+        }
+
+        uint256 dy;
+        uint256 dyFee;
+        uint256[] memory balances = self.balances;
+        (dy, dyFee) = _calculateSwap(
+            self,
+            tokenIndexFrom,
+            tokenIndexTo,
+            dx,
+            balances
+        );
+        require(dy >= minDy, "Swap didn't result in min tokens");
+
+        uint256 dyAdminFee = dyFee.mul(self.adminFee).div(FEE_DENOMINATOR).div(
+            self.tokenPrecisionMultipliers[tokenIndexTo]
+        );
+
+        self.balances[tokenIndexFrom] = balances[tokenIndexFrom].add(dx);
+        self.balances[tokenIndexTo] = balances[tokenIndexTo].sub(dy).sub(
+            dyAdminFee
+        );
+
+        self.pooledTokens[tokenIndexTo].safeTransfer(msg.sender, dy);
+
+        emit TokenSwap(msg.sender, dx, dy, tokenIndexFrom, tokenIndexTo);
+
+        return dy;
+    }
+
+    /**
+     * @notice Add liquidity to the pool
+     * @param self Swap struct to read from and write to
+     * @param amounts the amounts of each token to add, in their native precision
+     * @param minToMint the minimum LP tokens adding this amount of liquidity
+     * should mint, otherwise revert. Handy for front-running mitigation
+     * allowed addresses. If the pool is not in the guarded launch phase, this parameter will be ignored.
+     * @return amount of LP token user received
+     */
+    function addLiquidity(
+        Swap storage self,
+        uint256[] memory amounts,
+        uint256 minToMint
+    ) external returns (uint256) {
+        IERC20[] memory pooledTokens = self.pooledTokens;
+        require(
+            amounts.length == pooledTokens.length,
+            "Amounts must match pooled tokens"
+        );
+
+        // current state
+        ManageLiquidityInfo memory v = ManageLiquidityInfo(
+            0,
+            0,
+            0,
+            _getAPrecise(self),
+            self.lpToken,
+            0,
+            self.balances,
+            self.tokenPrecisionMultipliers
+        );
+        v.totalSupply = v.lpToken.totalSupply();
+
+        if (v.totalSupply != 0) {
+            v.d0 = getD(_xp(v.balances, v.multipliers), v.preciseA);
+        }
+
+        uint256[] memory newBalances = _addLiquidityHelper1(v, pooledTokens, amounts);
+
+        // invariant after change
+        v.d1 = getD(_xp(newBalances, v.multipliers), v.preciseA);
+        require(v.d1 > v.d0, "D should increase");
+
+        // updated to reflect fees and calculate the user's LP tokens
+        v.d2 = v.d1;
+        uint256[] memory fees = _addLiquidityHelper2(self, v, pooledTokens, newBalances);
+
+        uint256 toMint;
+        if (v.totalSupply == 0) {
+            toMint = v.d1;
+        } else {
+            toMint = v.d2.sub(v.d0).mul(v.totalSupply).div(v.d0);
+        }
+
+        require(toMint >= minToMint, "Couldn't mint min requested");
+
+        // mint the user's LP tokens
+        v.lpToken.mint(msg.sender, toMint);
+
+        emit AddLiquidity(
+            msg.sender,
+            amounts,
+            fees,
+            v.d1,
+            v.totalSupply.add(toMint)
+        );
+
+        return toMint;
+    }
+
+    function _addLiquidityHelper1(
+        ManageLiquidityInfo memory v,
+        IERC20[] memory pooledTokens,
+        uint256[] memory amounts
+    ) internal returns(uint256[] memory newBalances) {
+        newBalances = new uint256[](pooledTokens.length);
+
+        for (uint256 i = 0; i < pooledTokens.length; i++) {
+            require(
+                v.totalSupply != 0 || amounts[i] > 0,
+                "Must supply all tokens in pool"
+            );
+
+            // Transfer tokens first to see if a fee was charged on transfer
+            if (amounts[i] != 0) {
+                uint256 beforeBalance = pooledTokens[i].balanceOf(
+                    address(this)
+                );
+                pooledTokens[i].safeTransferFrom(
+                    msg.sender,
+                    address(this),
+                    amounts[i]
+                );
+
+                // Update the amounts[] with actual transfer amount
+                amounts[i] = pooledTokens[i].balanceOf(address(this)).sub(
+                    beforeBalance
+                );
+            }
+
+            newBalances[i] = v.balances[i].add(amounts[i]);
+        }
+    }
+
+    
+    function _addLiquidityHelper2(
+        Swap storage self,
+        ManageLiquidityInfo memory v,
+        IERC20[] memory pooledTokens,
+        uint256[] memory newBalances
+    ) internal returns(uint256[] memory fees) {
+        fees = new uint256[](pooledTokens.length);
+
+        if (v.totalSupply != 0) {
+            uint256 feePerToken = _feePerToken(
+                self.swapFee,
+                pooledTokens.length
+            );
+            for (uint256 i = 0; i < pooledTokens.length; i++) {
+                uint256 idealBalance = v.d1.mul(v.balances[i]).div(v.d0);
+                fees[i] = feePerToken
+                    .mul(idealBalance.difference(newBalances[i]))
+                    .div(FEE_DENOMINATOR);
+                self.balances[i] = newBalances[i].sub(
+                    fees[i].mul(self.adminFee).div(FEE_DENOMINATOR)
+                );
+                newBalances[i] = newBalances[i].sub(fees[i]);
+            }
+            v.d2 = getD(_xp(newBalances, v.multipliers), v.preciseA);
+        } else {
+            // the initial depositor doesn't pay fees
+            self.balances = newBalances;
+        }
+    }
+    
+
+    /**
+     * @notice Burn LP tokens to remove liquidity from the pool.
+     * @dev Liquidity can always be removed, even when the pool is paused.
+     * @param self Swap struct to read from and write to
+     * @param amount the amount of LP tokens to burn
+     * @param minAmounts the minimum amounts of each token in the pool
+     * acceptable for this burn. Useful as a front-running mitigation
+     * @return amounts of tokens the user received
+     */
+    function removeLiquidity(
+        Swap storage self,
+        uint256 amount,
+        uint256[] calldata minAmounts
+    ) external returns (uint256[] memory) {
+        LPToken lpToken = self.lpToken;
+        IERC20[] memory pooledTokens = self.pooledTokens;
+        require(amount <= lpToken.balanceOf(msg.sender), ">LP.balanceOf");
+        require(
+            minAmounts.length == pooledTokens.length,
+            "minAmounts must match poolTokens"
+        );
+
+        uint256[] memory balances = self.balances;
+        uint256 totalSupply = lpToken.totalSupply();
+
+        uint256[] memory amounts = _calculateRemoveLiquidity(
+            balances,
+            amount,
+            totalSupply
+        );
+
+        for (uint256 i = 0; i < amounts.length; i++) {
+            require(amounts[i] >= minAmounts[i], "amounts[i] < minAmounts[i]");
+            self.balances[i] = balances[i].sub(amounts[i]);
+            pooledTokens[i].safeTransfer(msg.sender, amounts[i]);
+        }
+
+        lpToken.burnFrom(msg.sender, amount);
+
+        emit RemoveLiquidity(msg.sender, amounts, totalSupply.sub(amount));
+
+        return amounts;
+    }
+
+    /**
+     * @notice Remove liquidity from the pool all in one token.
+     * @param self Swap struct to read from and write to
+     * @param tokenAmount the amount of the lp tokens to burn
+     * @param tokenIndex the index of the token you want to receive
+     * @param minAmount the minimum amount to withdraw, otherwise revert
+     * @return amount chosen token that user received
+     */
+    function removeLiquidityOneToken(
+        Swap storage self,
+        uint256 tokenAmount,
+        uint8 tokenIndex,
+        uint256 minAmount
+    ) external returns (uint256) {
+        LPToken lpToken = self.lpToken;
+        IERC20[] memory pooledTokens = self.pooledTokens;
+
+        require(tokenAmount <= lpToken.balanceOf(msg.sender), ">LP.balanceOf");
+        require(tokenIndex < pooledTokens.length, "Token not found");
+
+        uint256 totalSupply = lpToken.totalSupply();
+
+        (uint256 dy, uint256 dyFee) = _calculateWithdrawOneToken(
+            self,
+            tokenAmount,
+            tokenIndex,
+            totalSupply
+        );
+
+        require(dy >= minAmount, "dy < minAmount");
+
+        self.balances[tokenIndex] = _removeLiquidityOneTokenHelper1(self, dy, dyFee, tokenIndex);
+        lpToken.burnFrom(msg.sender, tokenAmount);
+        pooledTokens[tokenIndex].safeTransfer(msg.sender, dy);
+
+        emit RemoveLiquidityOne(
+            msg.sender,
+            tokenAmount,
+            totalSupply,
+            tokenIndex,
+            dy
+        );
+
+        return dy;
+    }
+
+    function _removeLiquidityOneTokenHelper1(Swap storage self, uint256 dy, uint256 dyFee, uint8 tokenIndex) internal returns(uint256) {
+        self.balances[tokenIndex].sub(
+            dy.add(dyFee.mul(self.adminFee).div(FEE_DENOMINATOR))
+        );
+    }
+
+    /**
+     * @notice Remove liquidity from the pool, weighted differently than the
+     * pool's current balances.
+     *
+     * @param self Swap struct to read from and write to
+     * @param amounts how much of each token to withdraw
+     * @param maxBurnAmount the max LP token provider is willing to pay to
+     * remove liquidity. Useful as a front-running mitigation.
+     * @return actual amount of LP tokens burned in the withdrawal
+     */
+    function removeLiquidityImbalance(
+        Swap storage self,
+        uint256[] memory amounts,
+        uint256 maxBurnAmount
+    ) public returns (uint256) {
+        ManageLiquidityInfo memory v = ManageLiquidityInfo(
+            0,
+            0,
+            0,
+            _getAPrecise(self),
+            self.lpToken,
+            0,
+            self.balances,
+            self.tokenPrecisionMultipliers
+        );
+        v.totalSupply = v.lpToken.totalSupply();
+
+        IERC20[] memory pooledTokens = self.pooledTokens;
+
+        require(
+            amounts.length == pooledTokens.length,
+            "Amounts should match pool tokens"
+        );
+
+        require(
+            maxBurnAmount <= v.lpToken.balanceOf(msg.sender) &&
+                maxBurnAmount != 0,
+            ">LP.balanceOf"
+        );
+        uint256[] memory fees;
+        uint256 tokenAmount;
+
+        (fees, tokenAmount) = _removeLiquidityImbalanceHelper1(self, v, pooledTokens, amounts);
+        
+        require(tokenAmount != 0, "Burnt amount cannot be zero");
+        tokenAmount = tokenAmount.add(1);
+
+        require(tokenAmount <= maxBurnAmount, "tokenAmount > maxBurnAmount");
+
+        v.lpToken.burnFrom(msg.sender, tokenAmount);
+
+        for (uint256 i = 0; i < pooledTokens.length; i++) {
+            pooledTokens[i].safeTransfer(msg.sender, amounts[i]);
+        }
+
+        emit RemoveLiquidityImbalance(
+            msg.sender,
+            amounts,
+            fees,
+            v.d1,
+            v.totalSupply.sub(tokenAmount)
+        );
+
+        return tokenAmount;
+    }
+
+    function _removeLiquidityImbalanceHelper1(
+        Swap storage self,
+        ManageLiquidityInfo memory v,
+        IERC20[] memory pooledTokens,
+        uint256[] memory amounts
+    ) internal returns(uint256[] memory fees, uint256 tokenAmount) {
+        uint256[] memory balances1 = new uint256[](pooledTokens.length);
+        uint256 feePerToken = _feePerToken(self.swapFee, pooledTokens.length);
+        v.d0 = getD(_xp(v.balances, v.multipliers), v.preciseA);
+        for (uint256 i = 0; i < pooledTokens.length; i++) {
+            balances1[i] = v.balances[i].sub(
+                amounts[i],
+                "Cannot withdraw more than available"
+            );
+        }
+        v.d1 = getD(_xp(balances1, v.multipliers), v.preciseA);
+
+        for (uint256 i = 0; i < pooledTokens.length; i++) {
+            uint256 idealBalance = v.d1.mul(v.balances[i]).div(v.d0);
+            uint256 difference = idealBalance.difference(balances1[i]);
+            fees[i] = feePerToken.mul(difference).div(FEE_DENOMINATOR);
+            self.balances[i] = balances1[i].sub(
+                fees[i].mul(self.adminFee).div(FEE_DENOMINATOR)
+            );
+            balances1[i] = balances1[i].sub(fees[i]);
+        }
+
+        v.d2 = getD(_xp(balances1, v.multipliers), v.preciseA);
+        uint256 tokenAmount = v.d0.sub(v.d2).mul(v.totalSupply).div(v.d0);
+    }
+
+    /**
+     * @notice withdraw all admin fees to a given address
+     * @param self Swap struct to withdraw fees from
+     * @param to Address to send the fees to
+     */
+    function withdrawAdminFees(Swap storage self, address to) external {
+        IERC20[] memory pooledTokens = self.pooledTokens;
+        for (uint256 i = 0; i < pooledTokens.length; i++) {
+            IERC20 token = pooledTokens[i];
+            uint256 balance = token.balanceOf(address(this)).sub(
+                self.balances[i]
+            );
+            if (balance != 0) {
+                token.safeTransfer(to, balance);
+            }
+        }
+    }
+
+    /**
+     * @notice Sets the admin fee
+     * @dev adminFee cannot be higher than 100% of the swap fee
+     * @param self Swap struct to update
+     * @param newAdminFee new admin fee to be applied on future transactions
+     */
+    function setAdminFee(Swap storage self, uint256 newAdminFee) external {
+        require(newAdminFee <= MAX_ADMIN_FEE, "Fee is too high");
+        self.adminFee = newAdminFee;
+
+        emit NewAdminFee(newAdminFee);
+    }
+
+    /**
+     * @notice update the swap fee
+     * @dev fee cannot be higher than 1% of each swap
+     * @param self Swap struct to update
+     * @param newSwapFee new swap fee to be applied on future transactions
+     */
+    function setSwapFee(Swap storage self, uint256 newSwapFee) external {
+        require(newSwapFee <= MAX_SWAP_FEE, "Fee is too high");
+        self.swapFee = newSwapFee;
+
+        emit NewSwapFee(newSwapFee);
+    }
+}
