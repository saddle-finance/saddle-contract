{
  "address": "0x38262c17a06A6B3588d3E5b70dfa768C06bf4ef1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "poolOwner",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lpToken",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "typeOfAsset",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "poolName",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "targetAddress",
              "type": "address"
            },
            {
              "internalType": "contract IERC20[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "contract IERC20[]",
              "name": "underlyingTokens",
              "type": "address[]"
            },
            {
              "internalType": "address",
              "name": "basePoolAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "metaSwapDepositAddress",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isSaddleApproved",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isRemoved",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isGuarded",
              "type": "bool"
            }
          ],
          "indexed": false,
          "internalType": "struct IPoolRegistry.PoolData",
          "name": "poolData",
          "type": "tuple"
        }
      ],
      "name": "AddCommunityPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lpToken",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "typeOfAsset",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "poolName",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "targetAddress",
              "type": "address"
            },
            {
              "internalType": "contract IERC20[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "contract IERC20[]",
              "name": "underlyingTokens",
              "type": "address[]"
            },
            {
              "internalType": "address",
              "name": "basePoolAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "metaSwapDepositAddress",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isSaddleApproved",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isRemoved",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isGuarded",
              "type": "bool"
            }
          ],
          "indexed": false,
          "internalType": "struct IPoolRegistry.PoolData",
          "name": "poolData",
          "type": "tuple"
        }
      ],
      "name": "AddPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "RemovePool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lpToken",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "typeOfAsset",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "poolName",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "targetAddress",
              "type": "address"
            },
            {
              "internalType": "contract IERC20[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "contract IERC20[]",
              "name": "underlyingTokens",
              "type": "address[]"
            },
            {
              "internalType": "address",
              "name": "basePoolAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "metaSwapDepositAddress",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isSaddleApproved",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isRemoved",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isGuarded",
              "type": "bool"
            }
          ],
          "indexed": false,
          "internalType": "struct IPoolRegistry.PoolData",
          "name": "poolData",
          "type": "tuple"
        }
      ],
      "name": "UpdatePool",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "COMMUNITY_MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SADDLE_APPROVED_POOL_OWNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SADDLE_MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lpToken",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "typeOfAsset",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "poolName",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "targetAddress",
              "type": "address"
            },
            {
              "internalType": "contract IERC20[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "contract IERC20[]",
              "name": "underlyingTokens",
              "type": "address[]"
            },
            {
              "internalType": "address",
              "name": "basePoolAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "metaSwapDepositAddress",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isSaddleApproved",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isRemoved",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isGuarded",
              "type": "bool"
            }
          ],
          "internalType": "struct IPoolRegistry.PoolData",
          "name": "data",
          "type": "tuple"
        }
      ],
      "name": "addCommunityPool",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "typeOfAsset",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "poolName",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "targetAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "metaSwapDepositAddress",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isSaddleApproved",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isRemoved",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isGuarded",
              "type": "bool"
            }
          ],
          "internalType": "struct IPoolRegistry.PoolInputData",
          "name": "inputData",
          "type": "tuple"
        }
      ],
      "name": "addPool",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        }
      ],
      "name": "approvePool",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "calls",
          "type": "bytes[]"
        },
        {
          "internalType": "bool",
          "name": "revertOnFail",
          "type": "bool"
        }
      ],
      "name": "batch",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        }
      ],
      "name": "getA",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "getEligiblePools",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "eligiblePools",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        }
      ],
      "name": "getPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        }
      ],
      "name": "getPoolData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lpToken",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "typeOfAsset",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "poolName",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "targetAddress",
              "type": "address"
            },
            {
              "internalType": "contract IERC20[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "contract IERC20[]",
              "name": "underlyingTokens",
              "type": "address[]"
            },
            {
              "internalType": "address",
              "name": "basePoolAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "metaSwapDepositAddress",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isSaddleApproved",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isRemoved",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isGuarded",
              "type": "bool"
            }
          ],
          "internalType": "struct IPoolRegistry.PoolData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPoolDataAtIndex",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lpToken",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "typeOfAsset",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "poolName",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "targetAddress",
              "type": "address"
            },
            {
              "internalType": "contract IERC20[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "contract IERC20[]",
              "name": "underlyingTokens",
              "type": "address[]"
            },
            {
              "internalType": "address",
              "name": "basePoolAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "metaSwapDepositAddress",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isSaddleApproved",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isRemoved",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isGuarded",
              "type": "bool"
            }
          ],
          "internalType": "struct IPoolRegistry.PoolData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolName",
          "type": "bytes32"
        }
      ],
      "name": "getPoolDataByName",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lpToken",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "typeOfAsset",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "poolName",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "targetAddress",
              "type": "address"
            },
            {
              "internalType": "contract IERC20[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "contract IERC20[]",
              "name": "underlyingTokens",
              "type": "address[]"
            },
            {
              "internalType": "address",
              "name": "basePoolAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "metaSwapDepositAddress",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isSaddleApproved",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isRemoved",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isGuarded",
              "type": "bool"
            }
          ],
          "internalType": "struct IPoolRegistry.PoolData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPoolsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        }
      ],
      "name": "getSwapStorage",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "initialA",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "futureA",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialATime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "futureATime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "swapFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "adminFee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "lpToken",
              "type": "address"
            }
          ],
          "internalType": "struct IPoolRegistry.SwapStorageData",
          "name": "swapStorageData",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        }
      ],
      "name": "getTokenBalances",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        }
      ],
      "name": "getTokens",
      "outputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        }
      ],
      "name": "getUnderlyingTokenBalances",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        }
      ],
      "name": "getUnderlyingTokens",
      "outputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "underlyingTokens",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        }
      ],
      "name": "getVirtualPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "poolsIndexOfNamePlusOne",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolsIndexOfPlusOne",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        }
      ],
      "name": "removePool",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lpToken",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "typeOfAsset",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "poolName",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "targetAddress",
              "type": "address"
            },
            {
              "internalType": "contract IERC20[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "contract IERC20[]",
              "name": "underlyingTokens",
              "type": "address[]"
            },
            {
              "internalType": "address",
              "name": "basePoolAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "metaSwapDepositAddress",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isSaddleApproved",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isRemoved",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isGuarded",
              "type": "bool"
            }
          ],
          "internalType": "struct IPoolRegistry.PoolData",
          "name": "poolData",
          "type": "tuple"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3d50fca60aa387d22c4c1e8ccd65e396cbfdcfb5051bd1e4adee65e7c85c6fa9",
  "receipt": {
    "to": null,
    "from": "0x5BDb37d0Ddea3A90F233c7B7F6b9394B6b2eef34",
    "contractAddress": "0x38262c17a06A6B3588d3E5b70dfa768C06bf4ef1",
    "transactionIndex": 0,
    "gasUsed": "59757410",
    "logsBloom": "0x
    "blockHash": "0x938795db2e2b6d42f6e012092c8aa252a1a24cbba601e065df8320d440e78d06",
    "transactionHash": "0x3d50fca60aa387d22c4c1e8ccd65e396cbfdcfb5051bd1e4adee65e7c85c6fa9",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 15010058,
        "transactionHash": "0x3d50fca60aa387d22c4c1e8ccd65e396cbfdcfb5051bd1e4adee65e7c85c6fa9",
        "address": "0x38262c17a06A6B3588d3E5b70dfa768C06bf4ef1",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005bdb37d0ddea3a90f233c7b7f6b9394b6b2eef34",
          "0x0000000000000000000000005bdb37d0ddea3a90f233c7b7f6b9394b6b2eef34"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x938795db2e2b6d42f6e012092c8aa252a1a24cbba601e065df8320d440e78d06"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 15010058,
        "transactionHash": "0x3d50fca60aa387d22c4c1e8ccd65e396cbfdcfb5051bd1e4adee65e7c85c6fa9",
        "address": "0x38262c17a06A6B3588d3E5b70dfa768C06bf4ef1",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xe132a6a517694e2454dc663f0d4fa738f94e7c1bd06c8950d14f9db8832494bd",
          "0x0000000000000000000000005bdb37d0ddea3a90f233c7b7f6b9394b6b2eef34",
          "0x0000000000000000000000005bdb37d0ddea3a90f233c7b7f6b9394b6b2eef34"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x938795db2e2b6d42f6e012092c8aa252a1a24cbba601e065df8320d440e78d06"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 15010058,
        "transactionHash": "0x3d50fca60aa387d22c4c1e8ccd65e396cbfdcfb5051bd1e4adee65e7c85c6fa9",
        "address": "0x38262c17a06A6B3588d3E5b70dfa768C06bf4ef1",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x3a8f22a562b0a1c1adc8307ab58a0c1a080aee6a8195ccea22d34ff640461c26",
          "0x0000000000000000000000008e6e84ddab9d13a17806d34b097102605454d147",
          "0x0000000000000000000000005bdb37d0ddea3a90f233c7b7f6b9394b6b2eef34"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x938795db2e2b6d42f6e012092c8aa252a1a24cbba601e065df8320d440e78d06"
      }
    ],
    "blockNumber": 15010058,
    "cumulativeGasUsed": "28173350",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5BDb37d0Ddea3A90F233c7B7F6b9394B6b2eef34",
    "0x8e6e84DDab9d13A17806d34B097102605454D147"
  ],
  "numDeployments": 1,
  "solcInputHash": "7a7197e94e0b7a804b4a2957fac0c59c",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolOwner\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"typeOfAsset\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"poolName\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"underlyingTokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"basePoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"metaSwapDepositAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isSaddleApproved\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRemoved\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isGuarded\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct IPoolRegistry.PoolData\",\"name\":\"poolData\",\"type\":\"tuple\"}],\"name\":\"AddCommunityPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"typeOfAsset\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"poolName\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"underlyingTokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"basePoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"metaSwapDepositAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isSaddleApproved\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRemoved\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isGuarded\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct IPoolRegistry.PoolData\",\"name\":\"poolData\",\"type\":\"tuple\"}],\"name\":\"AddPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"RemovePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"typeOfAsset\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"poolName\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"underlyingTokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"basePoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"metaSwapDepositAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isSaddleApproved\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRemoved\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isGuarded\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct IPoolRegistry.PoolData\",\"name\":\"poolData\",\"type\":\"tuple\"}],\"name\":\"UpdatePool\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COMMUNITY_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SADDLE_APPROVED_POOL_OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SADDLE_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"typeOfAsset\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"poolName\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"underlyingTokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"basePoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"metaSwapDepositAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isSaddleApproved\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRemoved\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isGuarded\",\"type\":\"bool\"}],\"internalType\":\"struct IPoolRegistry.PoolData\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"addCommunityPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"typeOfAsset\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"poolName\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"metaSwapDepositAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isSaddleApproved\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRemoved\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isGuarded\",\"type\":\"bool\"}],\"internalType\":\"struct IPoolRegistry.PoolInputData\",\"name\":\"inputData\",\"type\":\"tuple\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"name\":\"approvePool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"calls\",\"type\":\"bytes[]\"},{\"internalType\":\"bool\",\"name\":\"revertOnFail\",\"type\":\"bool\"}],\"name\":\"batch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"name\":\"getA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"getEligiblePools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"eligiblePools\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"name\":\"getPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"name\":\"getPoolData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"typeOfAsset\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"poolName\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"underlyingTokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"basePoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"metaSwapDepositAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isSaddleApproved\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRemoved\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isGuarded\",\"type\":\"bool\"}],\"internalType\":\"struct IPoolRegistry.PoolData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPoolDataAtIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"typeOfAsset\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"poolName\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"underlyingTokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"basePoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"metaSwapDepositAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isSaddleApproved\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRemoved\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isGuarded\",\"type\":\"bool\"}],\"internalType\":\"struct IPoolRegistry.PoolData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolName\",\"type\":\"bytes32\"}],\"name\":\"getPoolDataByName\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"typeOfAsset\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"poolName\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"underlyingTokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"basePoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"metaSwapDepositAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isSaddleApproved\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRemoved\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isGuarded\",\"type\":\"bool\"}],\"internalType\":\"struct IPoolRegistry.PoolData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"name\":\"getSwapStorage\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"initialA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialATime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureATime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"adminFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"}],\"internalType\":\"struct IPoolRegistry.SwapStorageData\",\"name\":\"swapStorageData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"name\":\"getTokenBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"name\":\"getTokens\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"name\":\"getUnderlyingTokenBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"name\":\"getUnderlyingTokens\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"underlyingTokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"name\":\"getVirtualPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"poolsIndexOfNamePlusOne\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolsIndexOfPlusOne\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"name\":\"removePool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"typeOfAsset\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"poolName\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"underlyingTokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"basePoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"metaSwapDepositAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isSaddleApproved\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRemoved\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isGuarded\",\"type\":\"bool\"}],\"internalType\":\"struct IPoolRegistry.PoolData\",\"name\":\"poolData\",\"type\":\"tuple\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AddCommunityPool(address,uint256,(address,address,uint8,bytes32,address,address[],address[],address,address,bool,bool,bool))\":{\"params\":{\"index\":\"index of the added pool in the pools list\",\"poolAddress\":\"address of the added pool\",\"poolData\":\"added pool data\"}},\"AddPool(address,uint256,(address,address,uint8,bytes32,address,address[],address[],address,address,bool,bool,bool))\":{\"params\":{\"index\":\"index of the added pool in the pools list\",\"poolAddress\":\"address of the added pool\",\"poolData\":\"added pool data\"}},\"RemovePool(address,uint256)\":{\"params\":{\"index\":\"index of the removed pool in the pools list\",\"poolAddress\":\"address of the removed pool\"}},\"UpdatePool(address,uint256,(address,address,uint8,bytes32,address,address[],address[],address,address,bool,bool,bool))\":{\"params\":{\"index\":\"index of the updated pool in the pools list\",\"poolAddress\":\"address of the updated pool\",\"poolData\":\"updated pool data\"}}},\"kind\":\"dev\",\"methods\":{\"addCommunityPool((address,address,uint8,bytes32,address,address[],address[],address,address,bool,bool,bool))\":{\"details\":\"Before adding a meta pool, the user must first add the underlying base pool. Only Swap and MetaSwap contracts need to be added.\",\"params\":{\"data\":\"PoolInputData struct for the new pool\"}},\"addPool((address,uint8,bytes32,address,address,bool,bool,bool))\":{\"details\":\"Before adding a meta pool, the user must first add the underlying base pool. Only Swap and MetaSwap contracts need to be added.\",\"params\":{\"inputData\":\"PoolInputData struct for the new pool\"}},\"approvePool(address)\":{\"details\":\"since array entries are difficult to remove, we modify the entry to mark it as a Saddle owned pool.\",\"params\":{\"poolAddress\":\"address of the community pool\"}},\"batch(bytes[],bool)\":{\"params\":{\"calls\":\"An array of inputs for each call.\",\"revertOnFail\":\"If True then reverts after a failed call and stops doing further calls.\"}},\"constructor\":{\"details\":\"caller of this function will be set as the owner on deployment\",\"params\":{\"admin\":\"address who should have the DEFAULT_ADMIN_ROLE\"}},\"getA(address)\":{\"params\":{\"poolAddress\":\"address of the pool to read\"}},\"getEligiblePools(address,address)\":{\"params\":{\"from\":\"address of the token to swap from\",\"to\":\"address of the token to swap to\"},\"returns\":{\"eligiblePools\":\"array of pool addresses that can swap between from and to\"}},\"getPaused(address)\":{\"params\":{\"poolAddress\":\"address of the pool to read\"}},\"getPoolData(address)\":{\"params\":{\"poolAddress\":\"address of the pool to read\"}},\"getPoolDataAtIndex(uint256)\":{\"params\":{\"index\":\"index of the pool to read\"}},\"getPoolDataByName(bytes32)\":{\"params\":{\"poolName\":\"name of the pool to read\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"getSwapStorage(address)\":{\"params\":{\"poolAddress\":\"address of the pool to read\"}},\"getTokenBalances(address)\":{\"params\":{\"poolAddress\":\"address of the pool to look up the token balances for\"},\"returns\":{\"balances\":\"array of token balances\"}},\"getTokens(address)\":{\"params\":{\"poolAddress\":\"address of the pool to read\"}},\"getUnderlyingTokenBalances(address)\":{\"params\":{\"poolAddress\":\"address of the pool to look up the token balances for\"},\"returns\":{\"balances\":\"array of token balances\"}},\"getUnderlyingTokens(address)\":{\"params\":{\"poolAddress\":\"address of the pool to read\"}},\"getVirtualPrice(address)\":{\"params\":{\"poolAddress\":\"address of the pool to read\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"removePool(address)\":{\"details\":\"Since arrays are not easily reducable, the entry will be marked as removed.\",\"params\":{\"poolAddress\":\"address of the pool to remove\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"updatePool((address,address,uint8,bytes32,address,address[],address[],address,address,bool,bool,bool))\":{\"params\":{\"poolData\":\"new PoolData struct to store\"}}},\"stateVariables\":{\"poolsIndexOfNamePlusOne\":{\"params\":{\"poolName\":\"pool name in bytes32 format to look for\"}},\"poolsIndexOfPlusOne\":{\"params\":{\"poolAddress\":\"address to look for\"}}},\"title\":\"PoolRegistry\",\"version\":1},\"userdoc\":{\"events\":{\"AddCommunityPool(address,uint256,(address,address,uint8,bytes32,address,address[],address[],address,address,bool,bool,bool))\":{\"notice\":\"Add a new registry entry to the master list.\"},\"AddPool(address,uint256,(address,address,uint8,bytes32,address,address[],address[],address,address,bool,bool,bool))\":{\"notice\":\"Add a new registry entry to the master list.\"},\"RemovePool(address,uint256)\":{\"notice\":\"Add a new registry entry to the master list.\"},\"UpdatePool(address,uint256,(address,address,uint8,bytes32,address,address[],address[],address,address,bool,bool,bool))\":{\"notice\":\"Add a new registry entry to the master list.\"}},\"kind\":\"user\",\"methods\":{\"COMMUNITY_MANAGER_ROLE()\":{\"notice\":\"Role responsible for managing community pools\"},\"SADDLE_APPROVED_POOL_OWNER_ROLE()\":{\"notice\":\"Role that represents approved owners of pools. owner of each pool must have this role if the pool is to be approved.\"},\"SADDLE_MANAGER_ROLE()\":{\"notice\":\"Role responsible for managing pools.\"},\"addCommunityPool((address,address,uint8,bytes32,address,address[],address[],address,address,bool,bool,bool))\":{\"notice\":\"Add a new pool to the registry\"},\"addPool((address,uint8,bytes32,address,address,bool,bool,bool))\":{\"notice\":\"Add a new pool to the registry\"},\"approvePool(address)\":{\"notice\":\"Approve community deployed pools to be upgraded as Saddle owned\"},\"batch(bytes[],bool)\":{\"notice\":\"Allows batched call to self (this contract).\"},\"constructor\":\"Deploy this contract and set appropriate roles\",\"getA(address)\":{\"notice\":\"Returns A of the given pool address\"},\"getEligiblePools(address,address)\":{\"notice\":\"Returns an array of pool addresses that can swap between from and to\"},\"getPaused(address)\":{\"notice\":\"Returns the paused status of the given pool address\"},\"getPoolData(address)\":{\"notice\":\"Returns PoolData for given pool address\"},\"getPoolDataAtIndex(uint256)\":{\"notice\":\"Returns PoolData at given index\"},\"getPoolDataByName(bytes32)\":{\"notice\":\"Returns PoolData with given name\"},\"getPoolsLength()\":{\"notice\":\"Returns number of entries in the registry. Includes removed pools in the list as well.\"},\"getSwapStorage(address)\":{\"notice\":\"Returns the SwapStorage struct of the given pool address\"},\"getTokenBalances(address)\":{\"notice\":\"Returns an array of balances of the tokens\"},\"getTokens(address)\":{\"notice\":\"Returns the tokens of the given pool address\"},\"getUnderlyingTokenBalances(address)\":{\"notice\":\"Returns an array of balances of the tokens\"},\"getUnderlyingTokens(address)\":{\"notice\":\"Returns the underlying tokens of the given pool address. Base pools will return an empty array.\"},\"getVirtualPrice(address)\":{\"notice\":\"Returns virtual price of the given pool address\"},\"poolsIndexOfNamePlusOne(bytes32)\":{\"notice\":\"Returns the index + 1 of the pool name in the registry\"},\"poolsIndexOfPlusOne(address)\":{\"notice\":\"Returns the index + 1 of the pool address in the registry\"},\"removePool(address)\":{\"notice\":\"Remove pool from the registry\"},\"updatePool((address,address,uint8,bytes32,address,address[],address[],address,address,bool,bool,bool))\":{\"notice\":\"Overwrite existing entry with new PoolData\"}},\"notice\":\"This contract holds list of pools deployed.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/registries/PoolRegistry.sol\":\"PoolRegistry\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb419e68addcb82ecda3ad3974b0d2db76435ce9b08435a04d5b119a0c5d45ea5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x0dd1e9b19801e3e7d900fbf4182d81e1afd23ad7be39504e33df6bbcba91d724\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"./ERC20Upgradeable.sol\\\";\\nimport \\\"../../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\\n    function __ERC20Burnable_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC20Burnable_init_unchained();\\n    }\\n\\n    function __ERC20Burnable_init_unchained() internal initializer {\\n    }\\n    using SafeMathUpgradeable for uint256;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n\\n        _approve(account, _msgSender(), decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xd0359e87fe2618573f49a95e13d9dbc31521ad64526b135618abb2a2dc362fbe\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x506dd0718f9ace50588c13848167df5e04ae16abb56341afb10c31ff149bc79b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa1931c47a617014f858580db625aa0dcf343796f39acd4b5b51effc092a1f0a9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x46034cd5cca740f636345c8f7aebae0f78adfd4b70e31e6f888cccbe1086586e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4fc155a2f7837603d69a13cfa481eb5e7f5e02cb77e2ec9edbac30986db37988\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/LPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20BurnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./interfaces/ISwap.sol\\\";\\n\\n/**\\n * @title Liquidity Provider Token\\n * @notice This token is an ERC20 detailed token with added capability to be minted by the owner.\\n * It is used to represent user's shares when providing liquidity to swap contracts.\\n * @dev Only Swap contracts should initialize and own LPToken contracts.\\n */\\ncontract LPToken is ERC20BurnableUpgradeable, OwnableUpgradeable {\\n    using SafeMathUpgradeable for uint256;\\n\\n    /**\\n     * @notice Initializes this LPToken contract with the given name and symbol\\n     * @dev The caller of this function will become the owner. A Swap contract should call this\\n     * in its initializer function.\\n     * @param name name of this token\\n     * @param symbol symbol of this token\\n     */\\n    function initialize(string memory name, string memory symbol)\\n        external\\n        initializer\\n        returns (bool)\\n    {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name, symbol);\\n        __Ownable_init_unchained();\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Mints the given amount of LPToken to the recipient.\\n     * @dev only owner can call this mint function\\n     * @param recipient address of account to receive the tokens\\n     * @param amount amount of tokens to mint\\n     */\\n    function mint(address recipient, uint256 amount) external onlyOwner {\\n        require(amount != 0, \\\"LPToken: cannot mint 0\\\");\\n        _mint(recipient, amount);\\n    }\\n\\n    /**\\n     * @dev Overrides ERC20._beforeTokenTransfer() which get called on every transfers including\\n     * minting and burning. This ensures that Swap.updateUserWithdrawFees are called everytime.\\n     * This assumes the owner is set to a Swap contract's address.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override(ERC20Upgradeable) {\\n        super._beforeTokenTransfer(from, to, amount);\\n        require(to != address(this), \\\"LPToken: cannot send to itself\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x8b16a37e14fd2d387dac20bf1773522b7667402f27a4b301617b928d7b998ac5\",\"license\":\"MIT\"},\"contracts/helper/BaseBoringBatchable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n// solhint-disable avoid-low-level-calls\\n// solhint-disable no-inline-assembly\\n\\n// Audit on 5-Jan-2021 by Keno and BoringCrypto\\n// WARNING!!!\\n// Combining BoringBatchable with msg.value can cause double spending issues\\n// https://www.paradigm.xyz/2021/08/two-rights-might-make-a-wrong/\\n\\ncontract BaseBoringBatchable {\\n    /// @dev Helper function to extract a useful revert message from a failed call.\\n    /// If the returned data is malformed or not correctly abi encoded then this call can fail itself.\\n    function _getRevertMsg(bytes memory _returnData)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\n\\n        assembly {\\n            // Slice the sighash.\\n            _returnData := add(_returnData, 0x04)\\n        }\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\n    }\\n\\n    /// @notice Allows batched call to self (this contract).\\n    /// @param calls An array of inputs for each call.\\n    /// @param revertOnFail If True then reverts after a failed call and stops doing further calls.\\n    // F1: External is ok here because this is the batch function, adding it to a batch makes no sense\\n    // F2: Calls in the batch may be payable, delegatecall operates in the same context, so each call in the batch has access to msg.value\\n    // C3: The length of the loop is fully under user control, so can't be exploited\\n    // C7: Delegatecall is only used on the same contract, so it's safe\\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable {\\n        for (uint256 i = 0; i < calls.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(\\n                calls[i]\\n            );\\n            if (!success && revertOnFail) {\\n                revert(_getRevertMsg(result));\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x95f34c0ce5cd71071698709dd23eea9b6031fe973be9d6f53f9f08452a444d66\",\"license\":\"MIT\"},\"contracts/interfaces/IAllowlist.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IAllowlist {\\n    function getPoolAccountLimit(address poolAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getPoolCap(address poolAddress) external view returns (uint256);\\n\\n    function verifyAddress(address account, bytes32[] calldata merkleProof)\\n        external\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0xf55e4d678d05bc5d0e24ec5f24504d7437b885e19579f9d29152748c3c1c732e\",\"license\":\"MIT\"},\"contracts/interfaces/IMetaSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./ISwap.sol\\\";\\n\\ninterface IMetaSwap {\\n    // pool data view functions\\n    function getA() external view returns (uint256);\\n\\n    function getToken(uint8 index) external view returns (IERC20);\\n\\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\\n\\n    function getTokenBalance(uint8 index) external view returns (uint256);\\n\\n    function getVirtualPrice() external view returns (uint256);\\n\\n    function isGuarded() external view returns (bool);\\n\\n    function metaSwapStorage()\\n        external\\n        view\\n        returns (\\n            address baseSwap,\\n            uint256 baseVirtualPrice,\\n            uint256 baseCacheLastUpdated\\n        );\\n\\n    // min return calculation functions\\n    function calculateSwap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calculateSwapUnderlying(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calculateRemoveLiquidity(uint256 amount)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function calculateRemoveLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex\\n    ) external view returns (uint256 availableTokenAmount);\\n\\n    // state modifying functions\\n    function initialize(\\n        IERC20[] memory _pooledTokens,\\n        uint8[] memory decimals,\\n        string memory lpTokenName,\\n        string memory lpTokenSymbol,\\n        uint256 _a,\\n        uint256 _fee,\\n        uint256 _adminFee,\\n        address lpTokenTargetAddress\\n    ) external;\\n\\n    function initializeMetaSwap(\\n        IERC20[] memory _pooledTokens,\\n        uint8[] memory decimals,\\n        string memory lpTokenName,\\n        string memory lpTokenSymbol,\\n        uint256 _a,\\n        uint256 _fee,\\n        uint256 _adminFee,\\n        address lpTokenTargetAddress,\\n        ISwap baseSwap\\n    ) external;\\n\\n    function swap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function swapUnderlying(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function addLiquidity(\\n        uint256[] calldata amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256[] calldata minAmounts,\\n        uint256 deadline\\n    ) external returns (uint256[] memory);\\n\\n    function removeLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidityImbalance(\\n        uint256[] calldata amounts,\\n        uint256 maxBurnAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x9392f53aaf25e15dbe85bf92477c1bf526ab70c00c5e4cd389da8e12e061c1d1\",\"license\":\"MIT\"},\"contracts/interfaces/IPoolRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IPoolRegistry {\\n    /* Structs */\\n\\n    struct PoolInputData {\\n        address poolAddress;\\n        uint8 typeOfAsset;\\n        bytes32 poolName;\\n        address targetAddress;\\n        address metaSwapDepositAddress;\\n        bool isSaddleApproved;\\n        bool isRemoved;\\n        bool isGuarded;\\n    }\\n\\n    struct PoolData {\\n        address poolAddress;\\n        address lpToken;\\n        uint8 typeOfAsset;\\n        bytes32 poolName;\\n        address targetAddress;\\n        IERC20[] tokens;\\n        IERC20[] underlyingTokens;\\n        address basePoolAddress;\\n        address metaSwapDepositAddress;\\n        bool isSaddleApproved;\\n        bool isRemoved;\\n        bool isGuarded;\\n    }\\n\\n    struct SwapStorageData {\\n        uint256 initialA;\\n        uint256 futureA;\\n        uint256 initialATime;\\n        uint256 futureATime;\\n        uint256 swapFee;\\n        uint256 adminFee;\\n        address lpToken;\\n    }\\n\\n    /* Public Variables */\\n\\n    /**\\n     * @notice Returns the index + 1 of the pool address in the registry\\n     * @param poolAddress address to look for\\n     */\\n    function poolsIndexOfPlusOne(address poolAddress)\\n        external\\n        returns (uint256);\\n\\n    /**\\n     * @notice Returns the index + 1 of the pool name in the registry\\n     * @param poolName pool name in bytes32 format to look for\\n     */\\n    function poolsIndexOfNamePlusOne(bytes32 poolName)\\n        external\\n        returns (uint256);\\n\\n    /* Functions */\\n\\n    /**\\n     * @notice Add a new pool to the registry\\n     * @param inputData PoolInputData struct for the new pool\\n     * @dev Before adding a meta pool, the user must first add the underlying base pool.\\n     * Only Swap and MetaSwap contracts need to be added.\\n     */\\n    function addPool(PoolInputData memory inputData) external payable;\\n\\n    /**\\n     * @notice Add a new pool to the registry\\n     * @param data PoolInputData struct for the new pool\\n     * @dev Before adding a meta pool, the user must first add the underlying base pool.\\n     * Only Swap and MetaSwap contracts need to be added.\\n     */\\n    function addCommunityPool(PoolData memory data) external payable;\\n\\n    /**\\n     * @notice Approve community deployed pools to be upgraded as Saddle owned\\n     * @dev since array entries are difficult to remove, we modify the entry to mark it\\n     * as a Saddle owned pool.\\n     * @param poolAddress address of the community pool\\n     */\\n    function approvePool(address poolAddress) external payable;\\n\\n    /**\\n     * @notice Overwrite existing entry with new PoolData\\n     * @param poolData new PoolData struct to store\\n     */\\n    function updatePool(PoolData memory poolData) external payable;\\n\\n    /**\\n     * @notice Remove pool from the registry\\n     * @dev Since arrays are not easily reducable, the entry will be marked as removed.\\n     * @param poolAddress address of the pool to remove\\n     */\\n    function removePool(address poolAddress) external payable;\\n\\n    /**\\n     * @notice Returns PoolData for given pool address\\n     * @param poolAddress address of the pool to read\\n     */\\n    function getPoolData(address poolAddress)\\n        external\\n        view\\n        returns (PoolData memory);\\n\\n    /**\\n     * @notice Returns PoolData at given index\\n     * @param index index of the pool to read\\n     */\\n    function getPoolDataAtIndex(uint256 index)\\n        external\\n        view\\n        returns (PoolData memory);\\n\\n    /**\\n     * @notice Returns PoolData with given name\\n     * @param poolName name of the pool to read\\n     */\\n    function getPoolDataByName(bytes32 poolName)\\n        external\\n        view\\n        returns (PoolData memory);\\n\\n    /**\\n     * @notice Returns virtual price of the given pool address\\n     * @param poolAddress address of the pool to read\\n     */\\n    function getVirtualPrice(address poolAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Returns A of the given pool address\\n     * @param poolAddress address of the pool to read\\n     */\\n    function getA(address poolAddress) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the paused status of the given pool address\\n     * @param poolAddress address of the pool to read\\n     */\\n    function getPaused(address poolAddress) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the SwapStorage struct of the given pool address\\n     * @param poolAddress address of the pool to read\\n     */\\n    function getSwapStorage(address poolAddress)\\n        external\\n        view\\n        returns (SwapStorageData memory swapStorageData);\\n\\n    /**\\n     * @notice Returns the tokens of the given pool address\\n     * @param poolAddress address of the pool to read\\n     */\\n    function getTokens(address poolAddress)\\n        external\\n        view\\n        returns (IERC20[] memory);\\n\\n    /**\\n     * @notice Returns the underlying tokens of the given pool address. Base pools will return an empty array.\\n     * @param poolAddress address of the pool to read\\n     */\\n    function getUnderlyingTokens(address poolAddress)\\n        external\\n        view\\n        returns (IERC20[] memory);\\n\\n    /**\\n     * @notice Returns number of entries in the registry. Includes removed pools\\n     * in the list as well.\\n     */\\n    function getPoolsLength() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns an array of pool addresses that can swap between from and to\\n     * @param from address of the token to swap from\\n     * @param to address of the token to swap to\\n     * @return eligiblePools array of pool addresses that can swap between from and to\\n     */\\n    function getEligiblePools(address from, address to)\\n        external\\n        view\\n        returns (address[] memory eligiblePools);\\n\\n    /**\\n     * @notice Returns an array of balances of the tokens\\n     * @param poolAddress address of the pool to look up the token balances for\\n     * @return balances array of token balances\\n     */\\n    function getTokenBalances(address poolAddress)\\n        external\\n        view\\n        returns (uint256[] memory balances);\\n\\n    /**\\n     * @notice Returns an array of balances of the tokens\\n     * @param poolAddress address of the pool to look up the token balances for\\n     * @return balances array of token balances\\n     */\\n    function getUnderlyingTokenBalances(address poolAddress)\\n        external\\n        view\\n        returns (uint256[] memory balances);\\n}\\n\",\"keccak256\":\"0x49d99b1207cc1697ff77c75d721833b64f2810d670bc81f8cee801f877806367\",\"license\":\"MIT\"},\"contracts/interfaces/ISwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./IAllowlist.sol\\\";\\n\\ninterface ISwap {\\n    // pool data view functions\\n    function getA() external view returns (uint256);\\n\\n    function getAPrecise() external view returns (uint256);\\n\\n    function getAllowlist() external view returns (IAllowlist);\\n\\n    function getToken(uint8 index) external view returns (IERC20);\\n\\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\\n\\n    function getTokenBalance(uint8 index) external view returns (uint256);\\n\\n    function getVirtualPrice() external view returns (uint256);\\n\\n    function owner() external view returns (address);\\n\\n    function isGuarded() external view returns (bool);\\n\\n    function paused() external view returns (bool);\\n\\n    function swapStorage()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            address\\n        );\\n\\n    // min return calculation functions\\n    function calculateSwap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calculateRemoveLiquidity(uint256 amount)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function calculateRemoveLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex\\n    ) external view returns (uint256 availableTokenAmount);\\n\\n    // state modifying functions\\n    function initialize(\\n        IERC20[] memory pooledTokens,\\n        uint8[] memory decimals,\\n        string memory lpTokenName,\\n        string memory lpTokenSymbol,\\n        uint256 a,\\n        uint256 fee,\\n        uint256 adminFee,\\n        address lpTokenTargetAddress\\n    ) external;\\n\\n    function swap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function addLiquidity(\\n        uint256[] calldata amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256[] calldata minAmounts,\\n        uint256 deadline\\n    ) external returns (uint256[] memory);\\n\\n    function removeLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidityImbalance(\\n        uint256[] calldata amounts,\\n        uint256 maxBurnAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xcd26195c5e3824e7984750a05c9fcb6dde3e266022c3bd1a9dcdda9e967a6f4c\",\"license\":\"MIT\"},\"contracts/interfaces/ISwapGuarded.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./IAllowlist.sol\\\";\\n\\ninterface ISwapGuarded {\\n    // pool data view functions\\n    function getA() external view returns (uint256);\\n\\n    function getAllowlist() external view returns (IAllowlist);\\n\\n    function getToken(uint8 index) external view returns (IERC20);\\n\\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\\n\\n    function getTokenBalance(uint8 index) external view returns (uint256);\\n\\n    function getVirtualPrice() external view returns (uint256);\\n\\n    function isGuarded() external view returns (bool);\\n\\n    // min return calculation functions\\n    function calculateSwap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calculateRemoveLiquidity(uint256 amount)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function calculateRemoveLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex\\n    ) external view returns (uint256 availableTokenAmount);\\n\\n    // state modifying functions\\n    function swap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function addLiquidity(\\n        uint256[] calldata amounts,\\n        uint256 minToMint,\\n        uint256 deadline,\\n        bytes32[] calldata merkleProof\\n    ) external returns (uint256);\\n\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256[] calldata minAmounts,\\n        uint256 deadline\\n    ) external returns (uint256[] memory);\\n\\n    function removeLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidityImbalance(\\n        uint256[] calldata amounts,\\n        uint256 maxBurnAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    // withdraw fee update function\\n    function updateUserWithdrawFee(address recipient, uint256 transferAmount)\\n        external;\\n\\n    function swapStorage()\\n        external\\n        view\\n        returns (\\n            uint256 initialA,\\n            uint256 futureA,\\n            uint256 initialATime,\\n            uint256 futureATime,\\n            uint256 swapFee,\\n            uint256 adminFee,\\n            uint256 defaultWithdrawFee,\\n            address lpToken\\n        );\\n}\\n\",\"keccak256\":\"0x9693ff0a334f1df8e3e1f08ddf9580299b247117028268bf8437576e0d534bc7\",\"license\":\"MIT\"},\"contracts/meta/MetaSwapDeposit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"../LPToken.sol\\\";\\nimport \\\"../interfaces/ISwap.sol\\\";\\nimport \\\"../interfaces/IMetaSwap.sol\\\";\\n\\n/**\\n * @title MetaSwapDeposit\\n * @notice This contract flattens the LP token in a MetaSwap pool for easier user access. MetaSwap must be\\n * deployed before this contract can be initialized successfully.\\n *\\n * For example, suppose there exists a base Swap pool consisting of [DAI, USDC, USDT].\\n * Then a MetaSwap pool can be created with [sUSD, BaseSwapLPToken] to allow trades between either\\n * the LP token or the underlying tokens and sUSD.\\n *\\n * MetaSwapDeposit flattens the LP token and remaps them to a single array, allowing users\\n * to ignore the dependency on BaseSwapLPToken. Using the above example, MetaSwapDeposit can act\\n * as a Swap containing [sUSD, DAI, USDC, USDT] tokens.\\n */\\ncontract MetaSwapDeposit is Initializable, ReentrancyGuardUpgradeable {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    ISwap public baseSwap;\\n    IMetaSwap public metaSwap;\\n    IERC20[] public baseTokens;\\n    IERC20[] public metaTokens;\\n    IERC20[] public tokens;\\n    IERC20 public metaLPToken;\\n\\n    uint256 constant MAX_UINT256 = 2**256 - 1;\\n\\n    struct RemoveLiquidityImbalanceInfo {\\n        ISwap baseSwap;\\n        IMetaSwap metaSwap;\\n        IERC20 metaLPToken;\\n        uint8 baseLPTokenIndex;\\n        bool withdrawFromBase;\\n        uint256 leftoverMetaLPTokenAmount;\\n    }\\n\\n    /**\\n     * @notice Sets the address for the base Swap contract, MetaSwap contract, and the\\n     * MetaSwap LP token contract.\\n     * @param _baseSwap the address of the base Swap contract\\n     * @param _metaSwap the address of the MetaSwap contract\\n     * @param _metaLPToken the address of the MetaSwap LP token contract\\n     */\\n    function initialize(\\n        ISwap _baseSwap,\\n        IMetaSwap _metaSwap,\\n        IERC20 _metaLPToken\\n    ) external initializer {\\n        __ReentrancyGuard_init();\\n        // Check and approve base level tokens to be deposited to the base Swap contract\\n        {\\n            uint8 i;\\n            for (; i < 32; i++) {\\n                try _baseSwap.getToken(i) returns (IERC20 token) {\\n                    baseTokens.push(token);\\n                    token.safeApprove(address(_baseSwap), MAX_UINT256);\\n                    token.safeApprove(address(_metaSwap), MAX_UINT256);\\n                } catch {\\n                    break;\\n                }\\n            }\\n            require(i > 1, \\\"baseSwap must have at least 2 tokens\\\");\\n        }\\n\\n        // Check and approve meta level tokens to be deposited to the MetaSwap contract\\n        IERC20 baseLPToken;\\n        {\\n            uint8 i;\\n            for (; i < 32; i++) {\\n                try _metaSwap.getToken(i) returns (IERC20 token) {\\n                    baseLPToken = token;\\n                    metaTokens.push(token);\\n                    tokens.push(token);\\n                    token.safeApprove(address(_metaSwap), MAX_UINT256);\\n                } catch {\\n                    break;\\n                }\\n            }\\n            require(i > 1, \\\"metaSwap must have at least 2 tokens\\\");\\n        }\\n\\n        // Flatten baseTokens and append it to tokens array\\n        tokens[tokens.length - 1] = baseTokens[0];\\n        for (uint8 i = 1; i < baseTokens.length; i++) {\\n            tokens.push(baseTokens[i]);\\n        }\\n\\n        // Approve base Swap LP token to be burned by the base Swap contract for withdrawing\\n        baseLPToken.safeApprove(address(_baseSwap), MAX_UINT256);\\n        // Approve MetaSwap LP token to be burned by the MetaSwap contract for withdrawing\\n        _metaLPToken.safeApprove(address(_metaSwap), MAX_UINT256);\\n\\n        // Initialize storage variables\\n        baseSwap = _baseSwap;\\n        metaSwap = _metaSwap;\\n        metaLPToken = _metaLPToken;\\n    }\\n\\n    // Mutative functions\\n\\n    /**\\n     * @notice Swap two underlying tokens using the meta pool and the base pool\\n     * @param tokenIndexFrom the token the user wants to swap from\\n     * @param tokenIndexTo the token the user wants to swap to\\n     * @param dx the amount of tokens the user wants to swap from\\n     * @param minDy the min amount the user would like to receive, or revert.\\n     * @param deadline latest timestamp to accept this transaction\\n     */\\n    function swap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external nonReentrant returns (uint256) {\\n        tokens[tokenIndexFrom].safeTransferFrom(msg.sender, address(this), dx);\\n        uint256 tokenToAmount = metaSwap.swapUnderlying(\\n            tokenIndexFrom,\\n            tokenIndexTo,\\n            dx,\\n            minDy,\\n            deadline\\n        );\\n        tokens[tokenIndexTo].safeTransfer(msg.sender, tokenToAmount);\\n        return tokenToAmount;\\n    }\\n\\n    /**\\n     * @notice Add liquidity to the pool with the given amounts of tokens\\n     * @param amounts the amounts of each token to add, in their native precision\\n     * @param minToMint the minimum LP tokens adding this amount of liquidity\\n     * should mint, otherwise revert. Handy for front-running mitigation\\n     * @param deadline latest timestamp to accept this transaction\\n     * @return amount of LP token user minted and received\\n     */\\n    function addLiquidity(\\n        uint256[] calldata amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external nonReentrant returns (uint256) {\\n        // Read to memory to save on gas\\n        IERC20[] memory memBaseTokens = baseTokens;\\n        IERC20[] memory memMetaTokens = metaTokens;\\n        uint256 baseLPTokenIndex = memMetaTokens.length - 1;\\n\\n        require(amounts.length == memBaseTokens.length + baseLPTokenIndex);\\n\\n        uint256 baseLPTokenAmount;\\n        {\\n            // Transfer base tokens from the caller and deposit to the base Swap pool\\n            uint256[] memory baseAmounts = new uint256[](memBaseTokens.length);\\n            bool shouldDepositBaseTokens;\\n            for (uint8 i = 0; i < memBaseTokens.length; i++) {\\n                IERC20 token = memBaseTokens[i];\\n                uint256 depositAmount = amounts[baseLPTokenIndex + i];\\n                if (depositAmount > 0) {\\n                    token.safeTransferFrom(\\n                        msg.sender,\\n                        address(this),\\n                        depositAmount\\n                    );\\n                    baseAmounts[i] = token.balanceOf(address(this)); // account for any fees on transfer\\n                    // if there are any base Swap level tokens, flag it for deposits\\n                    shouldDepositBaseTokens = true;\\n                }\\n            }\\n            if (shouldDepositBaseTokens) {\\n                // Deposit any base Swap level tokens and receive baseLPToken\\n                baseLPTokenAmount = baseSwap.addLiquidity(\\n                    baseAmounts,\\n                    0,\\n                    deadline\\n                );\\n            }\\n        }\\n\\n        uint256 metaLPTokenAmount;\\n        {\\n            // Transfer remaining meta level tokens from the caller\\n            uint256[] memory metaAmounts = new uint256[](metaTokens.length);\\n            for (uint8 i = 0; i < baseLPTokenIndex; i++) {\\n                IERC20 token = memMetaTokens[i];\\n                uint256 depositAmount = amounts[i];\\n                if (depositAmount > 0) {\\n                    token.safeTransferFrom(\\n                        msg.sender,\\n                        address(this),\\n                        depositAmount\\n                    );\\n                    metaAmounts[i] = token.balanceOf(address(this)); // account for any fees on transfer\\n                }\\n            }\\n            // Update the baseLPToken amount that will be deposited\\n            metaAmounts[baseLPTokenIndex] = baseLPTokenAmount;\\n\\n            // Deposit the meta level tokens and the baseLPToken\\n            metaLPTokenAmount = metaSwap.addLiquidity(\\n                metaAmounts,\\n                minToMint,\\n                deadline\\n            );\\n        }\\n\\n        // Transfer the meta lp token to the caller\\n        metaLPToken.safeTransfer(msg.sender, metaLPTokenAmount);\\n\\n        return metaLPTokenAmount;\\n    }\\n\\n    /**\\n     * @notice Burn LP tokens to remove liquidity from the pool. Withdraw fee that decays linearly\\n     * over period of 4 weeks since last deposit will apply.\\n     * @dev Liquidity can always be removed, even when the pool is paused.\\n     * @param amount the amount of LP tokens to burn\\n     * @param minAmounts the minimum amounts of each token in the pool\\n     *        acceptable for this burn. Useful as a front-running mitigation\\n     * @param deadline latest timestamp to accept this transaction\\n     * @return amounts of tokens user received\\n     */\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256[] calldata minAmounts,\\n        uint256 deadline\\n    ) external nonReentrant returns (uint256[] memory) {\\n        IERC20[] memory memBaseTokens = baseTokens;\\n        IERC20[] memory memMetaTokens = metaTokens;\\n        uint256[] memory totalRemovedAmounts;\\n\\n        {\\n            uint256 numOfAllTokens = memBaseTokens.length +\\n                memMetaTokens.length -\\n                1;\\n            require(minAmounts.length == numOfAllTokens, \\\"out of range\\\");\\n            totalRemovedAmounts = new uint256[](numOfAllTokens);\\n        }\\n\\n        // Transfer meta lp token from the caller to this\\n        metaLPToken.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        uint256 baseLPTokenAmount;\\n        {\\n            // Remove liquidity from the MetaSwap pool\\n            uint256[] memory removedAmounts;\\n            uint256 baseLPTokenIndex = memMetaTokens.length - 1;\\n            {\\n                uint256[] memory metaMinAmounts = new uint256[](\\n                    memMetaTokens.length\\n                );\\n                for (uint8 i = 0; i < baseLPTokenIndex; i++) {\\n                    metaMinAmounts[i] = minAmounts[i];\\n                }\\n                removedAmounts = metaSwap.removeLiquidity(\\n                    amount,\\n                    metaMinAmounts,\\n                    deadline\\n                );\\n            }\\n\\n            // Send the meta level tokens to the caller\\n            for (uint8 i = 0; i < baseLPTokenIndex; i++) {\\n                totalRemovedAmounts[i] = removedAmounts[i];\\n                memMetaTokens[i].safeTransfer(msg.sender, removedAmounts[i]);\\n            }\\n            baseLPTokenAmount = removedAmounts[baseLPTokenIndex];\\n\\n            // Remove liquidity from the base Swap pool\\n            {\\n                uint256[] memory baseMinAmounts = new uint256[](\\n                    memBaseTokens.length\\n                );\\n                for (uint8 i = 0; i < baseLPTokenIndex; i++) {\\n                    baseMinAmounts[i] = minAmounts[baseLPTokenIndex + i];\\n                }\\n                removedAmounts = baseSwap.removeLiquidity(\\n                    baseLPTokenAmount,\\n                    baseMinAmounts,\\n                    deadline\\n                );\\n            }\\n\\n            // Send the base level tokens to the caller\\n            for (uint8 i = 0; i < memBaseTokens.length; i++) {\\n                totalRemovedAmounts[baseLPTokenIndex + i] = removedAmounts[i];\\n                memBaseTokens[i].safeTransfer(msg.sender, removedAmounts[i]);\\n            }\\n        }\\n\\n        return totalRemovedAmounts;\\n    }\\n\\n    /**\\n     * @notice Remove liquidity from the pool all in one token. Withdraw fee that decays linearly\\n     * over period of 4 weeks since last deposit will apply.\\n     * @param tokenAmount the amount of the token you want to receive\\n     * @param tokenIndex the index of the token you want to receive\\n     * @param minAmount the minimum amount to withdraw, otherwise revert\\n     * @param deadline latest timestamp to accept this transaction\\n     * @return amount of chosen token user received\\n     */\\n    function removeLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount,\\n        uint256 deadline\\n    ) external nonReentrant returns (uint256) {\\n        uint8 baseLPTokenIndex = uint8(metaTokens.length - 1);\\n        uint8 baseTokensLength = uint8(baseTokens.length);\\n\\n        // Transfer metaLPToken from the caller\\n        metaLPToken.safeTransferFrom(msg.sender, address(this), tokenAmount);\\n\\n        IERC20 token;\\n        if (tokenIndex < baseLPTokenIndex) {\\n            // When the desired token is meta level token, we can just call `removeLiquidityOneToken` directly\\n            metaSwap.removeLiquidityOneToken(\\n                tokenAmount,\\n                tokenIndex,\\n                minAmount,\\n                deadline\\n            );\\n            token = metaTokens[tokenIndex];\\n        } else if (tokenIndex < baseLPTokenIndex + baseTokensLength) {\\n            // When the desired token is a base level token, we need to first withdraw via baseLPToken, then withdraw\\n            // the desired token from the base Swap contract.\\n            uint256 removedBaseLPTokenAmount = metaSwap.removeLiquidityOneToken(\\n                tokenAmount,\\n                baseLPTokenIndex,\\n                0,\\n                deadline\\n            );\\n\\n            baseSwap.removeLiquidityOneToken(\\n                removedBaseLPTokenAmount,\\n                tokenIndex - baseLPTokenIndex,\\n                minAmount,\\n                deadline\\n            );\\n            token = baseTokens[tokenIndex - baseLPTokenIndex];\\n        } else {\\n            revert(\\\"out of range\\\");\\n        }\\n\\n        uint256 amountWithdrawn = token.balanceOf(address(this));\\n        token.safeTransfer(msg.sender, amountWithdrawn);\\n        return amountWithdrawn;\\n    }\\n\\n    /**\\n     * @notice Remove liquidity from the pool, weighted differently than the\\n     * pool's current balances. Withdraw fee that decays linearly\\n     * over period of 4 weeks since last deposit will apply.\\n     * @param amounts how much of each token to withdraw\\n     * @param maxBurnAmount the max LP token provider is willing to pay to\\n     * remove liquidity. Useful as a front-running mitigation.\\n     * @param deadline latest timestamp to accept this transaction\\n     * @return amount of LP tokens burned\\n     */\\n    function removeLiquidityImbalance(\\n        uint256[] calldata amounts,\\n        uint256 maxBurnAmount,\\n        uint256 deadline\\n    ) external nonReentrant returns (uint256) {\\n        IERC20[] memory memBaseTokens = baseTokens;\\n        IERC20[] memory memMetaTokens = metaTokens;\\n        uint256[] memory metaAmounts = new uint256[](memMetaTokens.length);\\n        uint256[] memory baseAmounts = new uint256[](memBaseTokens.length);\\n\\n        require(\\n            amounts.length == memBaseTokens.length + memMetaTokens.length - 1,\\n            \\\"out of range\\\"\\n        );\\n\\n        RemoveLiquidityImbalanceInfo memory v = RemoveLiquidityImbalanceInfo(\\n            baseSwap,\\n            metaSwap,\\n            metaLPToken,\\n            uint8(metaAmounts.length - 1),\\n            false,\\n            0\\n        );\\n\\n        for (uint8 i = 0; i < v.baseLPTokenIndex; i++) {\\n            metaAmounts[i] = amounts[i];\\n        }\\n\\n        for (uint8 i = 0; i < baseAmounts.length; i++) {\\n            baseAmounts[i] = amounts[v.baseLPTokenIndex + i];\\n            if (baseAmounts[i] > 0) {\\n                v.withdrawFromBase = true;\\n            }\\n        }\\n\\n        // Calculate how much base LP token we need to get the desired amount of underlying tokens\\n        if (v.withdrawFromBase) {\\n            metaAmounts[v.baseLPTokenIndex] = v\\n                .baseSwap\\n                .calculateTokenAmount(baseAmounts, false)\\n                .mul(10005)\\n                .div(10000);\\n        }\\n\\n        // Transfer MetaSwap LP token from the caller to this contract\\n        v.metaLPToken.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            maxBurnAmount\\n        );\\n\\n        // Withdraw the paired meta level tokens and the base LP token from the MetaSwap pool\\n        uint256 burnedMetaLPTokenAmount = v.metaSwap.removeLiquidityImbalance(\\n            metaAmounts,\\n            maxBurnAmount,\\n            deadline\\n        );\\n        v.leftoverMetaLPTokenAmount = maxBurnAmount.sub(\\n            burnedMetaLPTokenAmount\\n        );\\n\\n        // If underlying tokens are desired, withdraw them from the base Swap pool\\n        if (v.withdrawFromBase) {\\n            v.baseSwap.removeLiquidityImbalance(\\n                baseAmounts,\\n                metaAmounts[v.baseLPTokenIndex],\\n                deadline\\n            );\\n\\n            // Base Swap may require LESS base LP token than the amount we have\\n            // In that case, deposit it to the MetaSwap pool.\\n            uint256[] memory leftovers = new uint256[](metaAmounts.length);\\n            IERC20 baseLPToken = memMetaTokens[v.baseLPTokenIndex];\\n            uint256 leftoverBaseLPTokenAmount = baseLPToken.balanceOf(\\n                address(this)\\n            );\\n            if (leftoverBaseLPTokenAmount > 0) {\\n                leftovers[v.baseLPTokenIndex] = leftoverBaseLPTokenAmount;\\n                v.leftoverMetaLPTokenAmount = v.leftoverMetaLPTokenAmount.add(\\n                    v.metaSwap.addLiquidity(leftovers, 0, deadline)\\n                );\\n            }\\n        }\\n\\n        // Transfer all withdrawn tokens to the caller\\n        for (uint8 i = 0; i < amounts.length; i++) {\\n            IERC20 token;\\n            if (i < v.baseLPTokenIndex) {\\n                token = memMetaTokens[i];\\n            } else {\\n                token = memBaseTokens[i - v.baseLPTokenIndex];\\n            }\\n            if (amounts[i] > 0) {\\n                token.safeTransfer(msg.sender, amounts[i]);\\n            }\\n        }\\n\\n        // If there were any extra meta lp token, transfer them back to the caller as well\\n        if (v.leftoverMetaLPTokenAmount > 0) {\\n            v.metaLPToken.safeTransfer(msg.sender, v.leftoverMetaLPTokenAmount);\\n        }\\n\\n        return maxBurnAmount - v.leftoverMetaLPTokenAmount;\\n    }\\n\\n    // VIEW FUNCTIONS\\n\\n    /**\\n     * @notice A simple method to calculate prices from deposits or\\n     * withdrawals, excluding fees but including slippage. This is\\n     * helpful as an input into the various \\\"min\\\" parameters on calls\\n     * to fight front-running. When withdrawing from the base pool in imbalanced\\n     * fashion, the recommended slippage setting is 0.2% or higher.\\n     *\\n     * @dev This shouldn't be used outside frontends for user estimates.\\n     *\\n     * @param amounts an array of token amounts to deposit or withdrawal,\\n     * corresponding to pooledTokens. The amount should be in each\\n     * pooled token's native precision. If a token charges a fee on transfers,\\n     * use the amount that gets transferred after the fee.\\n     * @param deposit whether this is a deposit or a withdrawal\\n     * @return token amount the user will receive\\n     */\\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        uint256[] memory metaAmounts = new uint256[](metaTokens.length);\\n        uint256[] memory baseAmounts = new uint256[](baseTokens.length);\\n        uint256 baseLPTokenIndex = metaAmounts.length - 1;\\n\\n        for (uint8 i = 0; i < baseLPTokenIndex; i++) {\\n            metaAmounts[i] = amounts[i];\\n        }\\n\\n        for (uint8 i = 0; i < baseAmounts.length; i++) {\\n            baseAmounts[i] = amounts[baseLPTokenIndex + i];\\n        }\\n\\n        uint256 baseLPTokenAmount = baseSwap.calculateTokenAmount(\\n            baseAmounts,\\n            deposit\\n        );\\n        metaAmounts[baseLPTokenIndex] = baseLPTokenAmount;\\n\\n        return metaSwap.calculateTokenAmount(metaAmounts, deposit);\\n    }\\n\\n    /**\\n     * @notice A simple method to calculate amount of each underlying\\n     * tokens that is returned upon burning given amount of LP tokens\\n     * @param amount the amount of LP tokens that would be burned on withdrawal\\n     * @return array of token balances that the user will receive\\n     */\\n    function calculateRemoveLiquidity(uint256 amount)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory metaAmounts = metaSwap.calculateRemoveLiquidity(\\n            amount\\n        );\\n        uint8 baseLPTokenIndex = uint8(metaAmounts.length - 1);\\n        uint256[] memory baseAmounts = baseSwap.calculateRemoveLiquidity(\\n            metaAmounts[baseLPTokenIndex]\\n        );\\n\\n        uint256[] memory totalAmounts = new uint256[](\\n            baseLPTokenIndex + baseAmounts.length\\n        );\\n        for (uint8 i = 0; i < baseLPTokenIndex; i++) {\\n            totalAmounts[i] = metaAmounts[i];\\n        }\\n        for (uint8 i = 0; i < baseAmounts.length; i++) {\\n            totalAmounts[baseLPTokenIndex + i] = baseAmounts[i];\\n        }\\n\\n        return totalAmounts;\\n    }\\n\\n    /**\\n     * @notice Calculate the amount of underlying token available to withdraw\\n     * when withdrawing via only single token\\n     * @param tokenAmount the amount of LP token to burn\\n     * @param tokenIndex index of which token will be withdrawn\\n     * @return availableTokenAmount calculated amount of underlying token\\n     * available to withdraw\\n     */\\n    function calculateRemoveLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex\\n    ) external view returns (uint256) {\\n        uint8 baseLPTokenIndex = uint8(metaTokens.length - 1);\\n\\n        if (tokenIndex < baseLPTokenIndex) {\\n            return\\n                metaSwap.calculateRemoveLiquidityOneToken(\\n                    tokenAmount,\\n                    tokenIndex\\n                );\\n        } else {\\n            uint256 baseLPTokenAmount = metaSwap\\n                .calculateRemoveLiquidityOneToken(\\n                    tokenAmount,\\n                    baseLPTokenIndex\\n                );\\n            return\\n                baseSwap.calculateRemoveLiquidityOneToken(\\n                    baseLPTokenAmount,\\n                    tokenIndex - baseLPTokenIndex\\n                );\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the address of the pooled token at given index. Reverts if tokenIndex is out of range.\\n     * This is a flattened representation of the pooled tokens.\\n     * @param index the index of the token\\n     * @return address of the token at given index\\n     */\\n    function getToken(uint8 index) external view returns (IERC20) {\\n        require(index < tokens.length, \\\"index out of range\\\");\\n        return tokens[index];\\n    }\\n\\n    /**\\n     * @notice Calculate amount of tokens you receive on swap\\n     * @param tokenIndexFrom the token the user wants to sell\\n     * @param tokenIndexTo the token the user wants to buy\\n     * @param dx the amount of tokens the user wants to sell. If the token charges\\n     * a fee on transfers, use the amount that gets transferred after the fee.\\n     * @return amount of tokens the user will receive\\n     */\\n    function calculateSwap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256) {\\n        return\\n            metaSwap.calculateSwapUnderlying(tokenIndexFrom, tokenIndexTo, dx);\\n    }\\n}\\n\",\"keccak256\":\"0x0e4a1a808cf69d4efc706a098bbc0207447a6e1843350f902f23ef1fa0f9d90e\",\"license\":\"MIT\"},\"contracts/registries/PoolRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"../helper/BaseBoringBatchable.sol\\\";\\nimport \\\"../interfaces/ISwap.sol\\\";\\nimport \\\"../interfaces/ISwapGuarded.sol\\\";\\nimport \\\"../interfaces/IMetaSwap.sol\\\";\\nimport \\\"../interfaces/IPoolRegistry.sol\\\";\\nimport \\\"../meta/MetaSwapDeposit.sol\\\";\\n\\n/**\\n * @title PoolRegistry\\n * @notice This contract holds list of pools deployed.\\n */\\ncontract PoolRegistry is\\n    AccessControl,\\n    ReentrancyGuard,\\n    BaseBoringBatchable,\\n    IPoolRegistry\\n{\\n    using SafeMath for uint256;\\n\\n    /// @notice Role responsible for managing pools.\\n    bytes32 public constant SADDLE_MANAGER_ROLE =\\n        keccak256(\\\"SADDLE_MANAGER_ROLE\\\");\\n    /// @notice Role responsible for managing community pools\\n    bytes32 public constant COMMUNITY_MANAGER_ROLE =\\n        keccak256(\\\"COMMUNITY_MANAGER_ROLE\\\");\\n    /// @notice Role that represents approved owners of pools.\\n    /// owner of each pool must have this role if the pool is to be approved.\\n    bytes32 public constant SADDLE_APPROVED_POOL_OWNER_ROLE =\\n        keccak256(\\\"SADDLE_APPROVED_POOL_OWNER_ROLE\\\");\\n\\n    /// @inheritdoc IPoolRegistry\\n    mapping(address => uint256) public override poolsIndexOfPlusOne;\\n    /// @inheritdoc IPoolRegistry\\n    mapping(bytes32 => uint256) public override poolsIndexOfNamePlusOne;\\n\\n    PoolData[] private pools;\\n    mapping(uint256 => address[]) private eligiblePairsMap;\\n\\n    /**\\n     * @notice Add a new registry entry to the master list.\\n     * @param poolAddress address of the added pool\\n     * @param index index of the added pool in the pools list\\n     * @param poolData added pool data\\n     */\\n    event AddPool(\\n        address indexed poolAddress,\\n        uint256 index,\\n        PoolData poolData\\n    );\\n\\n    /**\\n     * @notice Add a new registry entry to the master list.\\n     * @param poolAddress address of the added pool\\n     * @param index index of the added pool in the pools list\\n     * @param poolData added pool data\\n     */\\n    event AddCommunityPool(\\n        address indexed poolAddress,\\n        uint256 index,\\n        PoolData poolData\\n    );\\n\\n    /**\\n     * @notice Add a new registry entry to the master list.\\n     * @param poolAddress address of the updated pool\\n     * @param index index of the updated pool in the pools list\\n     * @param poolData updated pool data\\n     */\\n    event UpdatePool(\\n        address indexed poolAddress,\\n        uint256 index,\\n        PoolData poolData\\n    );\\n\\n    /**\\n     * @notice Add a new registry entry to the master list.\\n     * @param poolAddress address of the removed pool\\n     * @param index index of the removed pool in the pools list\\n     */\\n    event RemovePool(address indexed poolAddress, uint256 index);\\n\\n    /**\\n     * @notice Deploy this contract and set appropriate roles\\n     * @param admin address who should have the DEFAULT_ADMIN_ROLE\\n     * @dev caller of this function will be set as the owner on deployment\\n     */\\n    constructor(address admin, address poolOwner) public payable {\\n        require(admin != address(0), \\\"admin == 0\\\");\\n        _setupRole(DEFAULT_ADMIN_ROLE, admin);\\n        _setupRole(SADDLE_MANAGER_ROLE, msg.sender);\\n        _setupRole(SADDLE_APPROVED_POOL_OWNER_ROLE, poolOwner);\\n    }\\n\\n    /// @inheritdoc IPoolRegistry\\n    function addCommunityPool(PoolData memory data) external payable override {\\n        require(\\n            hasRole(COMMUNITY_MANAGER_ROLE, msg.sender),\\n            \\\"PR: Only managers can add pools\\\"\\n        );\\n\\n        // Check token addresses\\n        for (uint8 i = 0; i < data.tokens.length; i++) {\\n            for (uint8 j = 0; j < i; j++) {\\n                eligiblePairsMap[\\n                    uint160(address(data.tokens[i])) ^\\n                        uint160(address(data.tokens[j]))\\n                ].push(data.poolAddress);\\n            }\\n        }\\n\\n        // Check meta swap deposit address\\n        if (data.metaSwapDepositAddress != address(0)) {\\n            for (uint8 i = 0; i < data.underlyingTokens.length; i++) {\\n                // add combinations of tokens to eligible pairs map\\n                // i reprents the indexes of the underlying tokens of metaLPToken.\\n                // j represents the indexes of MetaSwap level tokens that are not metaLPToken.\\n                // Example: tokens = [sUSD, baseLPToken]\\n                //         underlyingTokens = [sUSD, DAI, USDC, USDT]\\n                // i represents index of [DAI, USDC, USDT] in underlyingTokens\\n                // j represents index of [sUSD] in underlyingTokens\\n                if (i > data.tokens.length.sub(2))\\n                    for (uint256 j = 0; j < data.tokens.length - 1; j++) {\\n                        eligiblePairsMap[\\n                            uint160(address(data.underlyingTokens[i])) ^\\n                                uint160(address(data.underlyingTokens[j]))\\n                        ].push(data.metaSwapDepositAddress);\\n                    }\\n            }\\n        }\\n\\n        pools.push(data);\\n        poolsIndexOfPlusOne[data.poolAddress] = pools.length;\\n        poolsIndexOfNamePlusOne[data.poolName] = pools.length;\\n\\n        emit AddCommunityPool(data.poolAddress, pools.length - 1, data);\\n    }\\n\\n    /// @inheritdoc IPoolRegistry\\n    function addPool(PoolInputData memory inputData)\\n        external\\n        payable\\n        override\\n        nonReentrant\\n    {\\n        require(\\n            hasRole(SADDLE_MANAGER_ROLE, msg.sender),\\n            \\\"PR: Only managers can add pools\\\"\\n        );\\n        require(inputData.poolAddress != address(0), \\\"PR: poolAddress is 0\\\");\\n        require(\\n            poolsIndexOfPlusOne[inputData.poolAddress] == 0,\\n            \\\"PR: Pool is already added\\\"\\n        );\\n\\n        IERC20[] memory tokens = new IERC20[](8);\\n        IERC20[] memory underlyingTokens = new IERC20[](8);\\n\\n        PoolData memory data = PoolData(\\n            inputData.poolAddress,\\n            address(0),\\n            inputData.typeOfAsset,\\n            inputData.poolName,\\n            inputData.targetAddress,\\n            tokens,\\n            underlyingTokens,\\n            address(0),\\n            inputData.metaSwapDepositAddress,\\n            inputData.isSaddleApproved,\\n            inputData.isRemoved,\\n            inputData.isGuarded\\n        );\\n\\n        // Get lp token address\\n        data.lpToken = inputData.isGuarded\\n            ? _getSwapStorageGuarded(inputData.poolAddress).lpToken\\n            : _getSwapStorage(inputData.poolAddress).lpToken;\\n\\n        // Check token addresses\\n        for (uint8 i = 0; i < 8; i++) {\\n            try ISwap(inputData.poolAddress).getToken(i) returns (\\n                IERC20 token\\n            ) {\\n                require(address(token) != address(0), \\\"PR: token is 0\\\");\\n                tokens[i] = token;\\n                // add combinations of tokens to eligible pairs map\\n                for (uint8 j = 0; j < i; j++) {\\n                    eligiblePairsMap[\\n                        uint160(address(tokens[i])) ^\\n                            uint160(address(tokens[j]))\\n                    ].push(inputData.poolAddress);\\n                }\\n            } catch {\\n                assembly {\\n                    mstore(tokens, sub(mload(tokens), sub(8, i)))\\n                }\\n                break;\\n            }\\n        }\\n\\n        // Check meta swap deposit address\\n        if (inputData.metaSwapDepositAddress != address(0)) {\\n            // Get base pool address\\n            data.basePoolAddress = address(\\n                MetaSwapDeposit(inputData.metaSwapDepositAddress).baseSwap()\\n            );\\n            require(\\n                poolsIndexOfPlusOne[data.basePoolAddress] > 0,\\n                \\\"PR: base pool not found\\\"\\n            );\\n\\n            // Get underlying tokens\\n            for (uint8 i = 0; i < 8; i++) {\\n                try\\n                    MetaSwapDeposit(inputData.metaSwapDepositAddress).getToken(\\n                        i\\n                    )\\n                returns (IERC20 token) {\\n                    require(address(token) != address(0), \\\"PR: token is 0\\\");\\n                    underlyingTokens[i] = token;\\n                    // add combinations of tokens to eligible pairs map\\n                    // i reprents the indexes of the underlying tokens of metaLPToken.\\n                    // j represents the indexes of MetaSwap level tokens that are not metaLPToken.\\n                    // Example: tokens = [sUSD, baseLPToken]\\n                    //         underlyingTokens = [sUSD, DAI, USDC, USDT]\\n                    // i represents index of [DAI, USDC, USDT] in underlyingTokens\\n                    // j represents index of [sUSD] in underlyingTokens\\n                    if (i > tokens.length.sub(2))\\n                        for (uint256 j = 0; j < tokens.length - 1; j++) {\\n                            eligiblePairsMap[\\n                                uint160(address(underlyingTokens[i])) ^\\n                                    uint160(address(underlyingTokens[j]))\\n                            ].push(inputData.metaSwapDepositAddress);\\n                        }\\n                } catch {\\n                    assembly {\\n                        mstore(\\n                            underlyingTokens,\\n                            sub(mload(underlyingTokens), sub(8, i))\\n                        )\\n                    }\\n                    break;\\n                }\\n            }\\n            require(\\n                address(\\n                    MetaSwapDeposit(inputData.metaSwapDepositAddress).metaSwap()\\n                ) == inputData.poolAddress,\\n                \\\"PR: metaSwap address mismatch\\\"\\n            );\\n        } else {\\n            assembly {\\n                mstore(underlyingTokens, sub(mload(underlyingTokens), 8))\\n            }\\n        }\\n\\n        pools.push(data);\\n        poolsIndexOfPlusOne[data.poolAddress] = pools.length;\\n        poolsIndexOfNamePlusOne[data.poolName] = pools.length;\\n\\n        emit AddPool(inputData.poolAddress, pools.length - 1, data);\\n    }\\n\\n    /// @inheritdoc IPoolRegistry\\n    function approvePool(address poolAddress)\\n        external\\n        payable\\n        override\\n        managerOnly\\n    {\\n        uint256 poolIndex = poolsIndexOfPlusOne[poolAddress];\\n        require(poolIndex > 0, \\\"PR: Pool not found\\\");\\n\\n        PoolData storage poolData = pools[poolIndex];\\n\\n        require(\\n            poolData.poolAddress == poolAddress,\\n            \\\"PR: poolAddress mismatch\\\"\\n        );\\n\\n        // Effect\\n        poolData.isSaddleApproved = true;\\n\\n        // Interaction\\n        require(\\n            hasRole(\\n                SADDLE_APPROVED_POOL_OWNER_ROLE,\\n                ISwap(poolAddress).owner()\\n            ),\\n            \\\"Pool is not owned by saddle\\\"\\n        );\\n\\n        emit UpdatePool(poolAddress, poolIndex, poolData);\\n    }\\n\\n    /// @inheritdoc IPoolRegistry\\n    function updatePool(PoolData memory poolData)\\n        external\\n        payable\\n        override\\n        managerOnly\\n    {\\n        uint256 poolIndex = poolsIndexOfPlusOne[poolData.poolAddress];\\n        require(poolIndex > 0, \\\"PR: Pool not found\\\");\\n        poolIndex -= 1;\\n\\n        pools[poolIndex] = poolData;\\n\\n        emit UpdatePool(poolData.poolAddress, poolIndex, poolData);\\n    }\\n\\n    /// @inheritdoc IPoolRegistry\\n    function removePool(address poolAddress)\\n        external\\n        payable\\n        override\\n        managerOnly\\n    {\\n        uint256 poolIndex = poolsIndexOfPlusOne[poolAddress];\\n        require(poolIndex > 0, \\\"PR: Pool not found\\\");\\n        poolIndex -= 1;\\n\\n        pools[poolIndex].isRemoved = true;\\n\\n        emit RemovePool(poolAddress, poolIndex);\\n    }\\n\\n    /// @inheritdoc IPoolRegistry\\n    function getPoolDataAtIndex(uint256 index)\\n        external\\n        view\\n        override\\n        returns (PoolData memory)\\n    {\\n        require(index < pools.length, \\\"PR: Index out of bounds\\\");\\n        return pools[index];\\n    }\\n\\n    /// @inheritdoc IPoolRegistry\\n    function getPoolData(address poolAddress)\\n        external\\n        view\\n        override\\n        hasMatchingPool(poolAddress)\\n        returns (PoolData memory)\\n    {\\n        return pools[poolsIndexOfPlusOne[poolAddress] - 1];\\n    }\\n\\n    /// @inheritdoc IPoolRegistry\\n    function getPoolDataByName(bytes32 poolName)\\n        external\\n        view\\n        override\\n        returns (PoolData memory)\\n    {\\n        uint256 index = poolsIndexOfNamePlusOne[poolName];\\n        require(index > 0, \\\"PR: Pool not found\\\");\\n        return pools[index - 1];\\n    }\\n\\n    modifier hasMatchingPool(address poolAddress) {\\n        require(\\n            poolsIndexOfPlusOne[poolAddress] > 0,\\n            \\\"PR: No matching pool found\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier managerOnly() {\\n        require(\\n            hasRole(SADDLE_MANAGER_ROLE, msg.sender),\\n            \\\"PR: Caller is not saddle manager\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @inheritdoc IPoolRegistry\\n    function getVirtualPrice(address poolAddress)\\n        external\\n        view\\n        override\\n        hasMatchingPool(poolAddress)\\n        returns (uint256)\\n    {\\n        return ISwap(poolAddress).getVirtualPrice();\\n    }\\n\\n    /// @inheritdoc IPoolRegistry\\n    function getA(address poolAddress)\\n        external\\n        view\\n        override\\n        hasMatchingPool(poolAddress)\\n        returns (uint256)\\n    {\\n        return ISwap(poolAddress).getA();\\n    }\\n\\n    /// @inheritdoc IPoolRegistry\\n    function getPaused(address poolAddress)\\n        external\\n        view\\n        override\\n        hasMatchingPool(poolAddress)\\n        returns (bool)\\n    {\\n        return ISwap(poolAddress).paused();\\n    }\\n\\n    /// @inheritdoc IPoolRegistry\\n    function getSwapStorage(address poolAddress)\\n        external\\n        view\\n        override\\n        hasMatchingPool(poolAddress)\\n        returns (SwapStorageData memory swapStorageData)\\n    {\\n        swapStorageData = pools[poolsIndexOfPlusOne[poolAddress] - 1].isGuarded\\n            ? _getSwapStorageGuarded(poolAddress)\\n            : _getSwapStorage(poolAddress);\\n    }\\n\\n    function _getSwapStorage(address poolAddress)\\n        internal\\n        view\\n        returns (SwapStorageData memory swapStorageData)\\n    {\\n        (\\n            swapStorageData.initialA,\\n            swapStorageData.futureA,\\n            swapStorageData.initialATime,\\n            swapStorageData.futureATime,\\n            swapStorageData.swapFee,\\n            swapStorageData.adminFee,\\n            swapStorageData.lpToken\\n        ) = ISwap(poolAddress).swapStorage();\\n    }\\n\\n    function _getSwapStorageGuarded(address poolAddress)\\n        internal\\n        view\\n        returns (SwapStorageData memory swapStorageData)\\n    {\\n        (\\n            swapStorageData.initialA,\\n            swapStorageData.futureA,\\n            swapStorageData.initialATime,\\n            swapStorageData.futureATime,\\n            swapStorageData.swapFee,\\n            swapStorageData.adminFee,\\n            ,\\n            swapStorageData.lpToken\\n        ) = ISwapGuarded(poolAddress).swapStorage();\\n    }\\n\\n    /// @inheritdoc IPoolRegistry\\n    function getTokens(address poolAddress)\\n        external\\n        view\\n        override\\n        hasMatchingPool(poolAddress)\\n        returns (IERC20[] memory tokens)\\n    {\\n        return pools[poolsIndexOfPlusOne[poolAddress] - 1].tokens;\\n    }\\n\\n    /// @inheritdoc IPoolRegistry\\n    function getUnderlyingTokens(address poolAddress)\\n        external\\n        view\\n        override\\n        hasMatchingPool(poolAddress)\\n        returns (IERC20[] memory underlyingTokens)\\n    {\\n        return pools[poolsIndexOfPlusOne[poolAddress] - 1].underlyingTokens;\\n    }\\n\\n    /// @inheritdoc IPoolRegistry\\n    function getPoolsLength() external view override returns (uint256) {\\n        return pools.length;\\n    }\\n\\n    /// @inheritdoc IPoolRegistry\\n    function getEligiblePools(address from, address to)\\n        external\\n        view\\n        override\\n        returns (address[] memory eligiblePools)\\n    {\\n        require(\\n            from != address(0) && from != to,\\n            \\\"PR: from and to cannot be the zero address\\\"\\n        );\\n        return eligiblePairsMap[uint160(from) ^ uint160(to)];\\n    }\\n\\n    /// @inheritdoc IPoolRegistry\\n    function getTokenBalances(address poolAddress)\\n        external\\n        view\\n        override\\n        hasMatchingPool(poolAddress)\\n        returns (uint256[] memory balances)\\n    {\\n        return _getTokenBalances(poolAddress);\\n    }\\n\\n    function _getTokenBalances(address poolAddress)\\n        internal\\n        view\\n        returns (uint256[] memory balances)\\n    {\\n        uint256 tokensLength = pools[poolsIndexOfPlusOne[poolAddress] - 1]\\n            .tokens\\n            .length;\\n        balances = new uint256[](tokensLength);\\n        for (uint8 i = 0; i < tokensLength; i++) {\\n            balances[i] = ISwap(poolAddress).getTokenBalance(i);\\n        }\\n    }\\n\\n    /// @inheritdoc IPoolRegistry\\n    function getUnderlyingTokenBalances(address poolAddress)\\n        external\\n        view\\n        override\\n        hasMatchingPool(poolAddress)\\n        returns (uint256[] memory balances)\\n    {\\n        uint256 poolIndex = poolsIndexOfPlusOne[poolAddress] - 1;\\n        address basePoolAddress = pools[poolIndex].basePoolAddress;\\n        uint256[] memory basePoolBalances = _getTokenBalances(basePoolAddress);\\n        uint256 underlyingTokensLength = pools[poolIndex]\\n            .underlyingTokens\\n            .length;\\n        uint256 metaLPTokenIndex = underlyingTokensLength -\\n            basePoolBalances.length;\\n        uint256 baseLPTokenBalance = ISwap(poolAddress).getTokenBalance(\\n            uint8(metaLPTokenIndex)\\n        );\\n        uint256 baseLPTokenTotalSupply = LPToken(\\n            pools[poolsIndexOfPlusOne[basePoolAddress] - 1].lpToken\\n        ).totalSupply();\\n\\n        balances = new uint256[](underlyingTokensLength);\\n        for (uint8 i = 0; i < metaLPTokenIndex; i++) {\\n            balances[i] = ISwap(poolAddress).getTokenBalance(i);\\n        }\\n        for (uint256 i = metaLPTokenIndex; i < underlyingTokensLength; i++) {\\n            balances[i] = basePoolBalances[i - metaLPTokenIndex]\\n                .mul(baseLPTokenBalance)\\n                .div(baseLPTokenTotalSupply);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x57077212f99572a085635a1cfcba3d1c6dc36d2244ecfecc169d22159f964755\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260405162004657380380620046578339810160408190526200002691620001dd565b600180556001600160a01b0382166200005c5760405162461bcd60e51b815260040162000053906200021b565b60405180910390fd5b62000069600083620000c9565b620000957fe132a6a517694e2454dc663f0d4fa738f94e7c1bd06c8950d14f9db8832494bd33620000c9565b620000c17f3a8f22a562b0a1c1adc8307ab58a0c1a080aee6a8195ccea22d34ff640461c2682620000c9565b505062000258565b620000d58282620000d9565b5050565b600082815260208181526040909120620000fe91839062002baf62000152821b17901c565b15620000d5576200010e62000172565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600062000169836001600160a01b03841662000176565b90505b92915050565b3390565b6000620001848383620001c5565b620001bc575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556200016c565b5060006200016c565b60009081526001919091016020526040902054151590565b60008060408385031215620001f0578182fd5b8251620001fd816200023f565b602084015190925062000210816200023f565b809150509250929050565b6020808252600a9082015269061646d696e203d3d20360b41b604082015260600190565b6001600160a01b03811681146200025557600080fd5b50565b6143ef80620002686000396000f3fe6080604052600436106101e35760003560e01c8063764f3aa811610102578063b55d990411610095578063d2423b5111610064578063d2423b5114610570578063d547741f14610583578063e7dc263b146105a3578063f1be0eba146105b6576101e3565b8063b55d9904146104ee578063c5730e2d1461050e578063ca15c8731461053b578063ce883cdb1461055b576101e3565b8063a217fddf116100d1578063a217fddf14610484578063a7666d4b14610499578063afd5beed146104b9578063b26a5102146104ce576101e3565b8063764f3aa8146103f75780638a754bbe146104175780639010d07c1461042a57806391d1485414610457576101e3565b80633b7d09461161017a5780635b506a00116101495780635b506a001461038d578063656dc2e4146103ad578063676bca21146103cd5780636d2f2246146103e2576101e3565b80633b7d09461461031a578063424c265b1461032d578063450efe21146103405780634ed33ace1461036d576101e3565b8063248a9ca3116101b6578063248a9ca3146102805780632e23cc80146102ad5780632f2ff15d146102da57806336568abe146102fa576101e3565b8063017f2093146101e857806306b6e7771461021e57806313d21cdf146102335780631ed668db14610253575b600080fd5b3480156101f457600080fd5b506102086102033660046134fe565b6105d6565b60405161021591906140ee565b60405180910390f35b61023161022c366004613605565b6107ea565b005b34801561023f57600080fd5b5061020861024e3660046133f2565b610af1565b34801561025f57600080fd5b5061027361026e3660046133f2565b610b5c565b6040516102159190614101565b34801561028c57600080fd5b506102a061029b3660046134fe565b610c08565b6040516102159190613b2f565b3480156102b957600080fd5b506102cd6102c83660046133f2565b610c1d565b6040516102159190613aec565b3480156102e657600080fd5b506102316102f5366004613516565b610fc2565b34801561030657600080fd5b50610231610315366004613516565b61100a565b6102316103283660046133f2565b61104c565b61023161033b3660046133f2565b61113e565b34801561034c57600080fd5b5061036061035b3660046133f2565b611364565b6040516102159190613ad9565b34801561037957600080fd5b506102a06103883660046133f2565b61143c565b34801561039957600080fd5b506102a06103a83660046134fe565b6114e4565b3480156103b957600080fd5b506103606103c83660046133f2565b6114f6565b3480156103d957600080fd5b506102a06115cc565b3480156103ee57600080fd5b506102a06115f0565b34801561040357600080fd5b506102cd6104123660046133f2565b611614565b610231610425366004613605565b611657565b34801561043657600080fd5b5061044a61044536600461353a565b611bc7565b6040516102159190613a78565b34801561046357600080fd5b50610477610472366004613516565b611be8565b6040516102159190613b24565b34801561049057600080fd5b506102a0611c00565b3480156104a557600080fd5b506102086104b43660046134fe565b611c05565b3480156104c557600080fd5b506102a0611e00565b3480156104da57600080fd5b506102a06104e93660046133f2565b611e24565b3480156104fa57600080fd5b506104776105093660046133f2565b611e36565b34801561051a57600080fd5b5061052e61052936600461342a565b611ede565b6040516102159190613a8c565b34801561054757600080fd5b506102a06105563660046134fe565b611f9d565b34801561056757600080fd5b506102a0611fb4565b61023161057e366004613462565b611fba565b34801561058f57600080fd5b5061023161059e366004613516565b61207d565b6102316105b1366004613751565b6120b7565b3480156105c257600080fd5b506102a06105d13660046133f2565b612b3f565b6105de6131e5565b600082815260036020526040902054806106135760405162461bcd60e51b815260040161060a9061405a565b60405180910390fd5b6004600182038154811061062357fe5b60009182526020918290206040805161018081018252600890930290910180546001600160a01b03908116845260018201548082168587015260ff7401000000000000000000000000000000000000000090910416848401526002820154606085015260038201541660808401526004810180548351818702810187019094528084529394919360a0860193928301828280156106e957602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116106cb575b505050505081526020016005820180548060200260200160405190810160405280929190818152602001828054801561074b57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161072d575b505050918352505060068201546001600160a01b039081166020830152600790920154918216604082015260ff74010000000000000000000000000000000000000000830481161515606083015275010000000000000000000000000000000000000000008304811615156080830152760100000000000000000000000000000000000000000000909204909116151560a0909101529150505b919050565b6108147fe132a6a517694e2454dc663f0d4fa738f94e7c1bd06c8950d14f9db8832494bd33611be8565b6108305760405162461bcd60e51b815260040161060a90613ce8565b80516001600160a01b0316600090815260026020526040902054806108675760405162461bcd60e51b815260040161060a9061405a565b600181039050816004828154811061087b57fe5b6000918252602091829020835160089092020180546001600160a01b039283167fffffffffffffffffffffffff000000000000000000000000000000000000000091821617825584840151600183018054604088015160ff1674010000000000000000000000000000000000000000027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff93871691851691909117929092169190911790556060850151600283015560808501516003830180549190941691161790915560a08301518051919261095a92600485019290910190613248565b5060c08201518051610976916005840191602090910190613248565b5060e08201516006820180546001600160a01b039283167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161790915561010084015160079093018054610120860151610140870151610160909701511515760100000000000000000000000000000000000000000000027fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff9715157501000000000000000000000000000000000000000000027fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff92151574010000000000000000000000000000000000000000027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff988816949096169390931796909616939093179290921691909117939093169190911790915582516040519116907f21292cd2979873e2f844b8d081ebe90c5d4095362e2814ea54332ec7b6fd432e90610ae59084908690614158565b60405180910390a25050565b610af96131e5565b6001600160a01b0382166000908152600260205260409020548290610b305760405162461bcd60e51b815260040161060a90613fb5565b6001600160a01b0383166000908152600260205260409020546004805490916000190190811061062357fe5b610b646132c5565b6001600160a01b0382166000908152600260205260409020548290610b9b5760405162461bcd60e51b815260040161060a90613fb5565b6001600160a01b03831660009081526002602052604090205460048054909160001901908110610bc757fe5b906000526020600020906008020160070160169054906101000a900460ff16610bf857610bf383612bc4565b610c01565b610c0183612c6b565b9392505050565b60009081526020819052604090206002015490565b6001600160a01b0381166000908152600260205260409020546060908290610c575760405162461bcd60e51b815260040161060a90613fb5565b6001600160a01b03831660009081526002602052604081205460048054600019909201929183908110610c8657fe5b60009182526020909120600660089092020101546001600160a01b031690506060610cb082612d14565b9050600060048481548110610cc157fe5b6000918252602082206005600890920201015483516040517f91ceb3eb000000000000000000000000000000000000000000000000000000008152919350830391906001600160a01b038a16906391ceb3eb90610d229085906004016142bc565b60206040518083038186803b158015610d3a57600080fd5b505afa158015610d4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7291906137fa565b905060006004600160026000896001600160a01b03166001600160a01b03168152602001908152602001600020540381548110610dab57fe5b600091825260209182902060016008909202010154604080517f18160ddd00000000000000000000000000000000000000000000000000000000815290516001600160a01b03909216926318160ddd92600480840193829003018186803b158015610e1557600080fd5b505afa158015610e29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4d91906137fa565b90508367ffffffffffffffff81118015610e6657600080fd5b50604051908082528060200260200182016040528015610e90578160200160208202803683370190505b50985060005b838160ff161015610f58576040517f91ceb3eb0000000000000000000000000000000000000000000000000000000081526001600160a01b038c16906391ceb3eb90610ee69084906004016142bc565b60206040518083038186803b158015610efe57600080fd5b505afa158015610f12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3691906137fa565b8a8260ff1681518110610f4557fe5b6020908102919091010152600101610e96565b50825b84811015610fb457610f9582610f8f858988860381518110610f7957fe5b6020026020010151612e6990919063ffffffff16565b90612ea3565b8a8281518110610fa157fe5b6020908102919091010152600101610f5b565b505050505050505050919050565b600082815260208190526040902060020154610fe090610472612ed5565b610ffc5760405162461bcd60e51b815260040161060a90613be6565b6110068282612ed9565b5050565b611012612ed5565b6001600160a01b0316816001600160a01b0316146110425760405162461bcd60e51b815260040161060a90614091565b6110068282612f42565b6110767fe132a6a517694e2454dc663f0d4fa738f94e7c1bd06c8950d14f9db8832494bd33611be8565b6110925760405162461bcd60e51b815260040161060a90613ce8565b6001600160a01b038116600090815260026020526040902054806110c85760405162461bcd60e51b815260040161060a9061405a565b6001810390506001600482815481106110dd57fe5b906000526020600020906008020160070160156101000a81548160ff021916908315150217905550816001600160a01b03167ff53dcf4cb920d5a07b1ae3e0756c787bb675805c0176515e9cc6a33226f068b282604051610ae59190613b2f565b6111687fe132a6a517694e2454dc663f0d4fa738f94e7c1bd06c8950d14f9db8832494bd33611be8565b6111845760405162461bcd60e51b815260040161060a90613ce8565b6001600160a01b038116600090815260026020526040902054806111ba5760405162461bcd60e51b815260040161060a9061405a565b6000600482815481106111c957fe5b6000918252602090912060089091020180549091506001600160a01b038481169116146112085760405162461bcd60e51b815260040161060a90613cb1565b6007810180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674010000000000000000000000000000000000000000179055604080517f8da5cb5b0000000000000000000000000000000000000000000000000000000081529051611300917f3a8f22a562b0a1c1adc8307ab58a0c1a080aee6a8195ccea22d34ff640461c26916001600160a01b03871691638da5cb5b916004808301926020929190829003018186803b1580156112c857600080fd5b505afa1580156112dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610472919061340e565b61131c5760405162461bcd60e51b815260040161060a90613c43565b826001600160a01b03167f21292cd2979873e2f844b8d081ebe90c5d4095362e2814ea54332ec7b6fd432e8383604051611357929190614179565b60405180910390a2505050565b6001600160a01b038116600090815260026020526040902054606090829061139e5760405162461bcd60e51b815260040161060a90613fb5565b6001600160a01b038316600090815260026020526040902054600480549091600019019081106113ca57fe5b906000526020600020906008020160040180548060200260200160405190810160405280929190818152602001828054801561142f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611411575b5050505050915050919050565b6001600160a01b03811660009081526002602052604081205482906114735760405162461bcd60e51b815260040161060a90613fb5565b826001600160a01b031663d46300fd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114ac57600080fd5b505afa1580156114c0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0191906137fa565b60036020526000908152604090205481565b6001600160a01b03811660009081526002602052604090205460609082906115305760405162461bcd60e51b815260040161060a90613fb5565b6001600160a01b0383166000908152600260205260409020546004805490916000190190811061155c57fe5b906000526020600020906008020160050180548060200260200160405190810160405280929190818152602001828054801561142f576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311611411575050505050915050919050565b7fa9eb1bd0b8bd5d75005d4e3c25736746c884daef9ecff243b81b4cc73cfb7f9e81565b7fe132a6a517694e2454dc663f0d4fa738f94e7c1bd06c8950d14f9db8832494bd81565b6001600160a01b038116600090815260026020526040902054606090829061164e5760405162461bcd60e51b815260040161060a90613fb5565b610c0183612d14565b6116817fa9eb1bd0b8bd5d75005d4e3c25736746c884daef9ecff243b81b4cc73cfb7f9e33611be8565b61169d5760405162461bcd60e51b815260040161060a90613e45565b60005b8160a00151518160ff16101561176f5760005b8160ff168160ff16101561176657600560008460a001518360ff16815181106116d857fe5b60200260200101518560a001518560ff16815181106116f357fe5b6020908102919091018101516001600160a01b0392188216835282810193909352604090910160009081208651815460018181018455928452949092209093018054919092167fffffffffffffffffffffffff0000000000000000000000000000000000000000909116179055016116b3565b506001016116a0565b506101008101516001600160a01b0316156118775760005b8160c00151518160ff1610156118755760a0820151516117a8906002612fab565b8160ff16111561186d5760005b60018360a00151510381101561186b57600560008460c0015183815181106117d957fe5b60200260200101518560c001518560ff16815181106117f457fe5b6020908102919091018101516001600160a01b039218821683528281019390935260409091016000908120610100870151815460018181018455928452949092209093018054919092167fffffffffffffffffffffffff0000000000000000000000000000000000000000909116179055016117b5565b505b600101611787565b505b6004805460018101825560009190915281517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b600890920291820180547fffffffffffffffffffffffff00000000000000000000000000000000000000009081166001600160a01b039384161782556020808601517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c860180546040890151908516928716929092177fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000060ff9093169290920291909117905560608601517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19d86015560808601517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19e86018054909316941693909317905560a08401518051859492936119fe937f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19f01920190613248565b5060c08201518051611a1a916005840191602090910190613248565b5060e08201516006820180546001600160a01b039283167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161790915561010084015160079093018054610120860151610140870151610160909701511515760100000000000000000000000000000000000000000000027fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff9715157501000000000000000000000000000000000000000000027fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff92151574010000000000000000000000000000000000000000027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff988816949096169390931796909616939093179290921691909117939093169190911790915560045482518216600090815260026020908152604080832084905560608601518352600390915290819020829055835190519216917f662dd796ff757466e483389dd24bcbb94cb0591dfd6b1972962f5a147b69333191611bbc9160001991909101908590614158565b60405180910390a250565b6000828152602081905260408120611bdf9083612fd3565b90505b92915050565b6000828152602081905260408120611bdf9083612fdf565b600081565b611c0d6131e5565b6004548210611c2e5760405162461bcd60e51b815260040161060a90613ed9565b60048281548110611c3b57fe5b60009182526020918290206040805161018081018252600890930290910180546001600160a01b03908116845260018201548082168587015260ff7401000000000000000000000000000000000000000090910416848401526002820154606085015260038201541660808401526004810180548351818702810187019094528084529394919360a086019392830182828015611d0157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611ce3575b5050505050815260200160058201805480602002602001604051908101604052809291908181526020018280548015611d6357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611d45575b505050918352505060068201546001600160a01b039081166020830152600790920154918216604082015260ff74010000000000000000000000000000000000000000830481161515606083015275010000000000000000000000000000000000000000008304811615156080830152760100000000000000000000000000000000000000000000909204909116151560a0909101529050919050565b7f3a8f22a562b0a1c1adc8307ab58a0c1a080aee6a8195ccea22d34ff640461c2681565b60026020526000908152604090205481565b6001600160a01b0381166000908152600260205260408120548290611e6d5760405162461bcd60e51b815260040161060a90613fb5565b826001600160a01b0316635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ea657600080fd5b505afa158015611eba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0191906134e2565b60606001600160a01b03831615801590611f0a5750816001600160a01b0316836001600160a01b031614155b611f265760405162461bcd60e51b815260040161060a90613de8565b6001600160a01b038383181660009081526005602090815260409182902080548351818402810184019094528084529091830182828015611f9057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611f72575b5050505050905092915050565b6000818152602081905260408120611be290612ff4565b60045490565b60005b82811015612077576000606030868685818110611fd657fe5b9050602002810190611fe891906142ca565b604051611ff6929190613a68565b600060405180830381855af49150503d8060008114612031576040519150601f19603f3d011682016040523d82523d6000602084013e612036565b606091505b5091509150811580156120465750835b1561206d5761205481612fff565b60405162461bcd60e51b815260040161060a9190613b38565b5050600101611fbd565b50505050565b60008281526020819052604090206002015461209b90610472612ed5565b6110425760405162461bcd60e51b815260040161060a90613d8b565b600260015414156120da5760405162461bcd60e51b815260040161060a90614023565b60026001556121097fe132a6a517694e2454dc663f0d4fa738f94e7c1bd06c8950d14f9db8832494bd33611be8565b6121255760405162461bcd60e51b815260040161060a90613e45565b80516001600160a01b031661214c5760405162461bcd60e51b815260040161060a90613f10565b80516001600160a01b0316600090815260026020526040902054156121835760405162461bcd60e51b815260040161060a90613fec565b6040805160088082526101208201909252606091602082016101008036833750506040805160088082526101208201909252929350606092915060208201610100803683370190505090506121d66131e5565b60405180610180016040528085600001516001600160a01b0316815260200160006001600160a01b03168152602001856020015160ff1681526020018560400151815260200185606001516001600160a01b0316815260200184815260200183815260200160006001600160a01b0316815260200185608001516001600160a01b031681526020018560a00151151581526020018560c00151151581526020018560e00151151581525090508360e0015161229f57835161229690612bc4565b60c001516122af565b83516122aa90612c6b565b60c001515b6001600160a01b0316602082015260005b60088160ff16101561249a5784516040517f82b866000000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906382b86600906123149084906004016142bc565b60206040518083038186803b15801561232c57600080fd5b505afa92505050801561237a575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526123779181019061340e565b60015b61238c5780600803845103845261249a565b6001600160a01b0381166123b25760405162461bcd60e51b815260040161060a90613f7e565b80858360ff16815181106123c257fe5b60200260200101906001600160a01b031690816001600160a01b03168152505060005b8260ff168160ff1610156124905760056000878360ff168151811061240657fe5b6020026020010151888660ff168151811061241d57fe5b6020908102919091018101516001600160a01b0392188216835282810193909352604090910160009081208a51815460018181018455928452949092209093018054919092167fffffffffffffffffffffffff0000000000000000000000000000000000000000909116179055016123e5565b50506001016122c0565b5060808401516001600160a01b0316156127e05783608001516001600160a01b0316639750a8ee6040518163ffffffff1660e01b815260040160206040518083038186803b1580156124eb57600080fd5b505afa1580156124ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612523919061340e565b6001600160a01b031660e0820181905260009081526002602052604090205461255e5760405162461bcd60e51b815260040161060a90613c7a565b60005b60088160ff1610156127315784608001516001600160a01b03166382b86600826040518263ffffffff1660e01b815260040161259d91906142bc565b60206040518083038186803b1580156125b557600080fd5b505afa925050508015612603575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526126009181019061340e565b60015b61261557806008038351038352612731565b6001600160a01b03811661263b5760405162461bcd60e51b815260040161060a90613f7e565b80848360ff168151811061264b57fe5b6001600160a01b03909216602092830291909101909101528451612670906002612fab565b8260ff1611156127285760005b6001865103811015612726576005600086838151811061269957fe5b6020026020010151878660ff16815181106126b057fe5b6020908102919091018101516001600160a01b03921882168352828101939093526040909101600090812060808b0151815460018181018455928452949092209093018054919092167fffffffffffffffffffffffff00000000000000000000000000000000000000009091161790550161267d565b505b50600101612561565b5083600001516001600160a01b031684608001516001600160a01b031663cb2ef5fe6040518163ffffffff1660e01b815260040160206040518083038186803b15801561277d57600080fd5b505afa158015612791573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127b5919061340e565b6001600160a01b0316146127db5760405162461bcd60e51b815260040161060a90613f47565b6127e8565b600882510382525b6004805460018101825560009190915281517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b600890920291820180547fffffffffffffffffffffffff00000000000000000000000000000000000000009081166001600160a01b039384161782556020808601517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c860180546040890151908516928716929092177fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000060ff9093169290920291909117905560608601517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19d86015560808601517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19e86018054909316941693909317905560a084015180518594929361296f937f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19f01920190613248565b5060c0820151805161298b916005840191602090910190613248565b5060e08201516006820180546001600160a01b039283167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161790915561010084015160079093018054610120860151610140870151610160909701511515760100000000000000000000000000000000000000000000027fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff9715157501000000000000000000000000000000000000000000027fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff92151574010000000000000000000000000000000000000000027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff988816949096169390931796909616939093179290921691909117939093169190911790915560045482518216600090815260026020908152604080832084905560608601518352600390915290819020829055865190519216917f15ec4115f45227a2f5b970962fd2294c7be9ba12b0652daae49ff679c02a1e0291612b2d9160001991909101908590614158565b60405180910390a25050600180555050565b6001600160a01b0381166000908152600260205260408120548290612b765760405162461bcd60e51b815260040161060a90613fb5565b826001600160a01b031663e25aa5fa6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114ac57600080fd5b6000611bdf836001600160a01b03841661305f565b612bcc6132c5565b816001600160a01b0316635fd65f0f6040518163ffffffff1660e01b815260040160e06040518083038186803b158015612c0557600080fd5b505afa158015612c19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c3d9190613812565b6001600160a01b031660c088015260a087015260808601526060850152604084015260208301528152919050565b612c736132c5565b816001600160a01b0316635fd65f0f6040518163ffffffff1660e01b81526004016101006040518083038186803b158015612cad57600080fd5b505afa158015612cc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ce59190613871565b6001600160a01b031660c08901525060a087015260808601526060850152604084015260208301528152919050565b6001600160a01b038116600090815260026020526040812054600480546060939260001901908110612d4257fe5b90600052602060002090600802016004018054905090508067ffffffffffffffff81118015612d7057600080fd5b50604051908082528060200260200182016040528015612d9a578160200160208202803683370190505b50915060005b818160ff161015612e62576040517f91ceb3eb0000000000000000000000000000000000000000000000000000000081526001600160a01b038516906391ceb3eb90612df09084906004016142bc565b60206040518083038186803b158015612e0857600080fd5b505afa158015612e1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e4091906137fa565b838260ff1681518110612e4f57fe5b6020908102919091010152600101612da0565b5050919050565b600082612e7857506000611be2565b82820282848281612e8557fe5b0414611bdf5760405162461bcd60e51b815260040161060a90613e7c565b6000808211612ec45760405162461bcd60e51b815260040161060a90613d54565b818381612ecd57fe5b049392505050565b3390565b6000828152602081905260409020612ef19082612baf565b1561100657612efe612ed5565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081905260409020612f5a90826130a9565b1561100657612f67612ed5565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b600082821115612fcd5760405162461bcd60e51b815260040161060a90613d1d565b50900390565b6000611bdf83836130be565b6000611bdf836001600160a01b038416613103565b6000611be28261311b565b6060604482511015613045575060408051808201909152601d81527f5472616e73616374696f6e2072657665727465642073696c656e746c7900000060208201526107e5565b60048201915081806020019051810190611be2919061355b565b600061306b8383613103565b6130a157508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611be2565b506000611be2565b6000611bdf836001600160a01b03841661311f565b815460009082106130e15760405162461bcd60e51b815260040161060a90613b89565b8260000182815481106130f057fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b600081815260018301602052604081205480156131db578354600019808301919081019060009087908390811061315257fe5b906000526020600020015490508087600001848154811061316f57fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061319f57fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050611be2565b6000915050611be2565b604080516101808101825260008082526020820181905291810182905260608082018390526080820183905260a0820181905260c082015260e0810182905261010081018290526101208101829052610140810182905261016081019190915290565b8280548282559060005260206000209081019282156132b5579160200282015b828111156132b557825182547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03909116178255602090920191600190910190613268565b506132c192915061330b565b5090565b6040518060e0016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681525090565b5b808211156132c15780547fffffffffffffffffffffffff000000000000000000000000000000000000000016815560010161330c565b8035611be281614393565b600082601f83011261335d578081fd5b813567ffffffffffffffff811115613373578182fd5b6020808202613383828201614334565b8381529350818401858301828701840188101561339f57600080fd5b600092505b848310156133cb5780356133b781614393565b8252600192909201919083019083016133a4565b505050505092915050565b8035611be2816143ab565b803560ff81168114611be257600080fd5b600060208284031215613403578081fd5b8135611bdf81614393565b60006020828403121561341f578081fd5b8151611bdf81614393565b6000806040838503121561343c578081fd5b823561344781614393565b9150602083013561345781614393565b809150509250929050565b600080600060408486031215613476578081fd5b833567ffffffffffffffff8082111561348d578283fd5b818601915086601f8301126134a0578283fd5b8135818111156134ae578384fd5b87602080830285010111156134c1578384fd5b602092830195509350508401356134d7816143ab565b809150509250925092565b6000602082840312156134f3578081fd5b8151611bdf816143ab565b60006020828403121561350f578081fd5b5035919050565b60008060408385031215613528578182fd5b82359150602083013561345781614393565b6000806040838503121561354c578182fd5b50508035926020909101359150565b60006020828403121561356c578081fd5b815167ffffffffffffffff80821115613583578283fd5b818401915084601f830112613596578283fd5b8151818111156135a4578384fd5b6135d560207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601614334565b91508082528560208285010111156135eb578384fd5b6135fc816020840160208601614367565b50949350505050565b600060208284031215613616578081fd5b813567ffffffffffffffff8082111561362d578283fd5b8184019150610180808387031215613643578384fd5b61364c81614334565b90506136588684613342565b81526136678660208501613342565b602082015261367986604085016133e1565b6040820152606083013560608201526136958660808501613342565b608082015260a0830135828111156136ab578485fd5b6136b78782860161334d565b60a08301525060c0830135828111156136ce578485fd5b6136da8782860161334d565b60c0830152506136ed8660e08501613342565b60e0820152610100915061370386838501613342565b828201526101209150613718868385016133d6565b82820152610140915061372d868385016133d6565b828201526101609150613742868385016133d6565b91810191909152949350505050565b6000610100808385031215613764578182fd5b61376d81614334565b9050823561377a81614393565b815261378984602085016133e1565b60208201526040830135604082015260608301356137a681614393565b60608201526137b88460808501613342565b60808201526137ca8460a085016133d6565b60a08201526137dc8460c085016133d6565b60c08201526137ee8460e085016133d6565b60e08201529392505050565b60006020828403121561380b578081fd5b5051919050565b600080600080600080600060e0888a03121561382c578485fd5b875196506020880151955060408801519450606088015193506080880151925060a0880151915060c088015161386181614393565b8091505092959891949750929550565b600080600080600080600080610100898b03121561388d578182fd5b885197506020890151965060408901519550606089015194506080890151935060a0890151925060c0890151915060e08901516138c981614393565b809150509295985092959890939650565b6001600160a01b03169052565b6000815180845260208085019450808401835b8381101561391f5781516001600160a01b0316875295820195908201906001016138fa565b509495945050505050565b6000815480845260208085019450838352808320835b8381101561391f5781546001600160a01b031687529582019560019182019101613940565b15159052565b600061018061397b8484516138da565b602083015161398d60208601826138da565b5060408301516139a06040860182613a61565b506060830151606085015260808301516139bd60808601826138da565b5060a08301518160a08601526139d5828601826138e7565b91505060c083015184820360c08601526139ef82826138e7565b91505060e0830151613a0460e08601826138da565b5061010080840151613a18828701826138da565b505061012080840151613a2d82870182613965565b505061014080840151613a4282870182613965565b505061016080840151613a5782870182613965565b5090949350505050565b60ff169052565b6000828483379101908152919050565b6001600160a01b0391909116815260200190565b6020808252825182820181905260009190848201906040850190845b81811015613acd5783516001600160a01b031683529284019291840191600101613aa8565b50909695505050505050565b600060208252611bdf60208301846138e7565b6020808252825182820181905260009190848201906040850190845b81811015613acd57835183529284019291840191600101613b08565b901515815260200190565b90815260200190565b6000602082528251806020840152613b57816040850160208701614367565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e60408201527f6473000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201527f2061646d696e20746f206772616e740000000000000000000000000000000000606082015260800190565b6020808252601b908201527f506f6f6c206973206e6f74206f776e656420627920736164646c650000000000604082015260600190565b60208082526017908201527f50523a206261736520706f6f6c206e6f7420666f756e64000000000000000000604082015260600190565b60208082526018908201527f50523a20706f6f6c41646472657373206d69736d617463680000000000000000604082015260600190565b6020808252818101527f50523a2043616c6c6572206973206e6f7420736164646c65206d616e61676572604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b60208082526030908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201527f2061646d696e20746f207265766f6b6500000000000000000000000000000000606082015260800190565b6020808252602a908201527f50523a2066726f6d20616e6420746f2063616e6e6f7420626520746865207a6560408201527f726f206164647265737300000000000000000000000000000000000000000000606082015260800190565b6020808252601f908201527f50523a204f6e6c79206d616e61676572732063616e2061646420706f6f6c7300604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526017908201527f50523a20496e646578206f7574206f6620626f756e6473000000000000000000604082015260600190565b60208082526014908201527f50523a20706f6f6c416464726573732069732030000000000000000000000000604082015260600190565b6020808252601d908201527f50523a206d657461537761702061646472657373206d69736d61746368000000604082015260600190565b6020808252600e908201527f50523a20746f6b656e2069732030000000000000000000000000000000000000604082015260600190565b6020808252601a908201527f50523a204e6f206d61746368696e6720706f6f6c20666f756e64000000000000604082015260600190565b60208082526019908201527f50523a20506f6f6c20697320616c726561647920616464656400000000000000604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526012908201527f50523a20506f6f6c206e6f7420666f756e640000000000000000000000000000604082015260600190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201527f20726f6c657320666f722073656c660000000000000000000000000000000000606082015260800190565b600060208252611bdf602083018461396b565b600060e082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a08301526001600160a01b0360c08401511660c083015292915050565b600083825260406020830152614171604083018461396b565b949350505050565b60008382526040602083015261419b60408301614196855461435b565b6138da565b60018301546001600160a01b036141b7606085018284166138da565b6141ca6080850160ff8460a01c16613a61565b600285015460a08501526141e1600386015461435b565b91506141f060c08501836138da565b61018091508160e085015261420c6101c085016004870161392a565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc085820301610100860152614244816005880161392a565b9050614253600687015461435b565b6142616101208701826138da565b50600786015461427761014087018483166138da565b61428b610160870160ff8360a01c16613965565b61429d84870160ff8360a81c16613965565b6142b16101a0870160ff8360b01c16613965565b509695505050505050565b60ff91909116815260200190565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126142fe578283fd5b83018035915067ffffffffffffffff821115614318578283fd5b60200191503681900382131561432d57600080fd5b9250929050565b60405181810167ffffffffffffffff8111828210171561435357600080fd5b604052919050565b6001600160a01b031690565b60005b8381101561438257818101518382015260200161436a565b838111156120775750506000910152565b6001600160a01b03811681146143a857600080fd5b50565b80151581146143a857600080fdfea2646970667358221220a6fc023ff37d5be4b8e43227139f8db51b182e42e63581000f6c263629d5471364736f6c634300060c0033",
  "deployedBytecode": "0x6080604052600436106101e35760003560e01c8063764f3aa811610102578063b55d990411610095578063d2423b5111610064578063d2423b5114610570578063d547741f14610583578063e7dc263b146105a3578063f1be0eba146105b6576101e3565b8063b55d9904146104ee578063c5730e2d1461050e578063ca15c8731461053b578063ce883cdb1461055b576101e3565b8063a217fddf116100d1578063a217fddf14610484578063a7666d4b14610499578063afd5beed146104b9578063b26a5102146104ce576101e3565b8063764f3aa8146103f75780638a754bbe146104175780639010d07c1461042a57806391d1485414610457576101e3565b80633b7d09461161017a5780635b506a00116101495780635b506a001461038d578063656dc2e4146103ad578063676bca21146103cd5780636d2f2246146103e2576101e3565b80633b7d09461461031a578063424c265b1461032d578063450efe21146103405780634ed33ace1461036d576101e3565b8063248a9ca3116101b6578063248a9ca3146102805780632e23cc80146102ad5780632f2ff15d146102da57806336568abe146102fa576101e3565b8063017f2093146101e857806306b6e7771461021e57806313d21cdf146102335780631ed668db14610253575b600080fd5b3480156101f457600080fd5b506102086102033660046134fe565b6105d6565b60405161021591906140ee565b60405180910390f35b61023161022c366004613605565b6107ea565b005b34801561023f57600080fd5b5061020861024e3660046133f2565b610af1565b34801561025f57600080fd5b5061027361026e3660046133f2565b610b5c565b6040516102159190614101565b34801561028c57600080fd5b506102a061029b3660046134fe565b610c08565b6040516102159190613b2f565b3480156102b957600080fd5b506102cd6102c83660046133f2565b610c1d565b6040516102159190613aec565b3480156102e657600080fd5b506102316102f5366004613516565b610fc2565b34801561030657600080fd5b50610231610315366004613516565b61100a565b6102316103283660046133f2565b61104c565b61023161033b3660046133f2565b61113e565b34801561034c57600080fd5b5061036061035b3660046133f2565b611364565b6040516102159190613ad9565b34801561037957600080fd5b506102a06103883660046133f2565b61143c565b34801561039957600080fd5b506102a06103a83660046134fe565b6114e4565b3480156103b957600080fd5b506103606103c83660046133f2565b6114f6565b3480156103d957600080fd5b506102a06115cc565b3480156103ee57600080fd5b506102a06115f0565b34801561040357600080fd5b506102cd6104123660046133f2565b611614565b610231610425366004613605565b611657565b34801561043657600080fd5b5061044a61044536600461353a565b611bc7565b6040516102159190613a78565b34801561046357600080fd5b50610477610472366004613516565b611be8565b6040516102159190613b24565b34801561049057600080fd5b506102a0611c00565b3480156104a557600080fd5b506102086104b43660046134fe565b611c05565b3480156104c557600080fd5b506102a0611e00565b3480156104da57600080fd5b506102a06104e93660046133f2565b611e24565b3480156104fa57600080fd5b506104776105093660046133f2565b611e36565b34801561051a57600080fd5b5061052e61052936600461342a565b611ede565b6040516102159190613a8c565b34801561054757600080fd5b506102a06105563660046134fe565b611f9d565b34801561056757600080fd5b506102a0611fb4565b61023161057e366004613462565b611fba565b34801561058f57600080fd5b5061023161059e366004613516565b61207d565b6102316105b1366004613751565b6120b7565b3480156105c257600080fd5b506102a06105d13660046133f2565b612b3f565b6105de6131e5565b600082815260036020526040902054806106135760405162461bcd60e51b815260040161060a9061405a565b60405180910390fd5b6004600182038154811061062357fe5b60009182526020918290206040805161018081018252600890930290910180546001600160a01b03908116845260018201548082168587015260ff7401000000000000000000000000000000000000000090910416848401526002820154606085015260038201541660808401526004810180548351818702810187019094528084529394919360a0860193928301828280156106e957602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116106cb575b505050505081526020016005820180548060200260200160405190810160405280929190818152602001828054801561074b57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161072d575b505050918352505060068201546001600160a01b039081166020830152600790920154918216604082015260ff74010000000000000000000000000000000000000000830481161515606083015275010000000000000000000000000000000000000000008304811615156080830152760100000000000000000000000000000000000000000000909204909116151560a0909101529150505b919050565b6108147fe132a6a517694e2454dc663f0d4fa738f94e7c1bd06c8950d14f9db8832494bd33611be8565b6108305760405162461bcd60e51b815260040161060a90613ce8565b80516001600160a01b0316600090815260026020526040902054806108675760405162461bcd60e51b815260040161060a9061405a565b600181039050816004828154811061087b57fe5b6000918252602091829020835160089092020180546001600160a01b039283167fffffffffffffffffffffffff000000000000000000000000000000000000000091821617825584840151600183018054604088015160ff1674010000000000000000000000000000000000000000027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff93871691851691909117929092169190911790556060850151600283015560808501516003830180549190941691161790915560a08301518051919261095a92600485019290910190613248565b5060c08201518051610976916005840191602090910190613248565b5060e08201516006820180546001600160a01b039283167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161790915561010084015160079093018054610120860151610140870151610160909701511515760100000000000000000000000000000000000000000000027fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff9715157501000000000000000000000000000000000000000000027fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff92151574010000000000000000000000000000000000000000027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff988816949096169390931796909616939093179290921691909117939093169190911790915582516040519116907f21292cd2979873e2f844b8d081ebe90c5d4095362e2814ea54332ec7b6fd432e90610ae59084908690614158565b60405180910390a25050565b610af96131e5565b6001600160a01b0382166000908152600260205260409020548290610b305760405162461bcd60e51b815260040161060a90613fb5565b6001600160a01b0383166000908152600260205260409020546004805490916000190190811061062357fe5b610b646132c5565b6001600160a01b0382166000908152600260205260409020548290610b9b5760405162461bcd60e51b815260040161060a90613fb5565b6001600160a01b03831660009081526002602052604090205460048054909160001901908110610bc757fe5b906000526020600020906008020160070160169054906101000a900460ff16610bf857610bf383612bc4565b610c01565b610c0183612c6b565b9392505050565b60009081526020819052604090206002015490565b6001600160a01b0381166000908152600260205260409020546060908290610c575760405162461bcd60e51b815260040161060a90613fb5565b6001600160a01b03831660009081526002602052604081205460048054600019909201929183908110610c8657fe5b60009182526020909120600660089092020101546001600160a01b031690506060610cb082612d14565b9050600060048481548110610cc157fe5b6000918252602082206005600890920201015483516040517f91ceb3eb000000000000000000000000000000000000000000000000000000008152919350830391906001600160a01b038a16906391ceb3eb90610d229085906004016142bc565b60206040518083038186803b158015610d3a57600080fd5b505afa158015610d4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7291906137fa565b905060006004600160026000896001600160a01b03166001600160a01b03168152602001908152602001600020540381548110610dab57fe5b600091825260209182902060016008909202010154604080517f18160ddd00000000000000000000000000000000000000000000000000000000815290516001600160a01b03909216926318160ddd92600480840193829003018186803b158015610e1557600080fd5b505afa158015610e29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4d91906137fa565b90508367ffffffffffffffff81118015610e6657600080fd5b50604051908082528060200260200182016040528015610e90578160200160208202803683370190505b50985060005b838160ff161015610f58576040517f91ceb3eb0000000000000000000000000000000000000000000000000000000081526001600160a01b038c16906391ceb3eb90610ee69084906004016142bc565b60206040518083038186803b158015610efe57600080fd5b505afa158015610f12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3691906137fa565b8a8260ff1681518110610f4557fe5b6020908102919091010152600101610e96565b50825b84811015610fb457610f9582610f8f858988860381518110610f7957fe5b6020026020010151612e6990919063ffffffff16565b90612ea3565b8a8281518110610fa157fe5b6020908102919091010152600101610f5b565b505050505050505050919050565b600082815260208190526040902060020154610fe090610472612ed5565b610ffc5760405162461bcd60e51b815260040161060a90613be6565b6110068282612ed9565b5050565b611012612ed5565b6001600160a01b0316816001600160a01b0316146110425760405162461bcd60e51b815260040161060a90614091565b6110068282612f42565b6110767fe132a6a517694e2454dc663f0d4fa738f94e7c1bd06c8950d14f9db8832494bd33611be8565b6110925760405162461bcd60e51b815260040161060a90613ce8565b6001600160a01b038116600090815260026020526040902054806110c85760405162461bcd60e51b815260040161060a9061405a565b6001810390506001600482815481106110dd57fe5b906000526020600020906008020160070160156101000a81548160ff021916908315150217905550816001600160a01b03167ff53dcf4cb920d5a07b1ae3e0756c787bb675805c0176515e9cc6a33226f068b282604051610ae59190613b2f565b6111687fe132a6a517694e2454dc663f0d4fa738f94e7c1bd06c8950d14f9db8832494bd33611be8565b6111845760405162461bcd60e51b815260040161060a90613ce8565b6001600160a01b038116600090815260026020526040902054806111ba5760405162461bcd60e51b815260040161060a9061405a565b6000600482815481106111c957fe5b6000918252602090912060089091020180549091506001600160a01b038481169116146112085760405162461bcd60e51b815260040161060a90613cb1565b6007810180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674010000000000000000000000000000000000000000179055604080517f8da5cb5b0000000000000000000000000000000000000000000000000000000081529051611300917f3a8f22a562b0a1c1adc8307ab58a0c1a080aee6a8195ccea22d34ff640461c26916001600160a01b03871691638da5cb5b916004808301926020929190829003018186803b1580156112c857600080fd5b505afa1580156112dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610472919061340e565b61131c5760405162461bcd60e51b815260040161060a90613c43565b826001600160a01b03167f21292cd2979873e2f844b8d081ebe90c5d4095362e2814ea54332ec7b6fd432e8383604051611357929190614179565b60405180910390a2505050565b6001600160a01b038116600090815260026020526040902054606090829061139e5760405162461bcd60e51b815260040161060a90613fb5565b6001600160a01b038316600090815260026020526040902054600480549091600019019081106113ca57fe5b906000526020600020906008020160040180548060200260200160405190810160405280929190818152602001828054801561142f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611411575b5050505050915050919050565b6001600160a01b03811660009081526002602052604081205482906114735760405162461bcd60e51b815260040161060a90613fb5565b826001600160a01b031663d46300fd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114ac57600080fd5b505afa1580156114c0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0191906137fa565b60036020526000908152604090205481565b6001600160a01b03811660009081526002602052604090205460609082906115305760405162461bcd60e51b815260040161060a90613fb5565b6001600160a01b0383166000908152600260205260409020546004805490916000190190811061155c57fe5b906000526020600020906008020160050180548060200260200160405190810160405280929190818152602001828054801561142f576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311611411575050505050915050919050565b7fa9eb1bd0b8bd5d75005d4e3c25736746c884daef9ecff243b81b4cc73cfb7f9e81565b7fe132a6a517694e2454dc663f0d4fa738f94e7c1bd06c8950d14f9db8832494bd81565b6001600160a01b038116600090815260026020526040902054606090829061164e5760405162461bcd60e51b815260040161060a90613fb5565b610c0183612d14565b6116817fa9eb1bd0b8bd5d75005d4e3c25736746c884daef9ecff243b81b4cc73cfb7f9e33611be8565b61169d5760405162461bcd60e51b815260040161060a90613e45565b60005b8160a00151518160ff16101561176f5760005b8160ff168160ff16101561176657600560008460a001518360ff16815181106116d857fe5b60200260200101518560a001518560ff16815181106116f357fe5b6020908102919091018101516001600160a01b0392188216835282810193909352604090910160009081208651815460018181018455928452949092209093018054919092167fffffffffffffffffffffffff0000000000000000000000000000000000000000909116179055016116b3565b506001016116a0565b506101008101516001600160a01b0316156118775760005b8160c00151518160ff1610156118755760a0820151516117a8906002612fab565b8160ff16111561186d5760005b60018360a00151510381101561186b57600560008460c0015183815181106117d957fe5b60200260200101518560c001518560ff16815181106117f457fe5b6020908102919091018101516001600160a01b039218821683528281019390935260409091016000908120610100870151815460018181018455928452949092209093018054919092167fffffffffffffffffffffffff0000000000000000000000000000000000000000909116179055016117b5565b505b600101611787565b505b6004805460018101825560009190915281517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b600890920291820180547fffffffffffffffffffffffff00000000000000000000000000000000000000009081166001600160a01b039384161782556020808601517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c860180546040890151908516928716929092177fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000060ff9093169290920291909117905560608601517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19d86015560808601517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19e86018054909316941693909317905560a08401518051859492936119fe937f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19f01920190613248565b5060c08201518051611a1a916005840191602090910190613248565b5060e08201516006820180546001600160a01b039283167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161790915561010084015160079093018054610120860151610140870151610160909701511515760100000000000000000000000000000000000000000000027fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff9715157501000000000000000000000000000000000000000000027fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff92151574010000000000000000000000000000000000000000027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff988816949096169390931796909616939093179290921691909117939093169190911790915560045482518216600090815260026020908152604080832084905560608601518352600390915290819020829055835190519216917f662dd796ff757466e483389dd24bcbb94cb0591dfd6b1972962f5a147b69333191611bbc9160001991909101908590614158565b60405180910390a250565b6000828152602081905260408120611bdf9083612fd3565b90505b92915050565b6000828152602081905260408120611bdf9083612fdf565b600081565b611c0d6131e5565b6004548210611c2e5760405162461bcd60e51b815260040161060a90613ed9565b60048281548110611c3b57fe5b60009182526020918290206040805161018081018252600890930290910180546001600160a01b03908116845260018201548082168587015260ff7401000000000000000000000000000000000000000090910416848401526002820154606085015260038201541660808401526004810180548351818702810187019094528084529394919360a086019392830182828015611d0157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611ce3575b5050505050815260200160058201805480602002602001604051908101604052809291908181526020018280548015611d6357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611d45575b505050918352505060068201546001600160a01b039081166020830152600790920154918216604082015260ff74010000000000000000000000000000000000000000830481161515606083015275010000000000000000000000000000000000000000008304811615156080830152760100000000000000000000000000000000000000000000909204909116151560a0909101529050919050565b7f3a8f22a562b0a1c1adc8307ab58a0c1a080aee6a8195ccea22d34ff640461c2681565b60026020526000908152604090205481565b6001600160a01b0381166000908152600260205260408120548290611e6d5760405162461bcd60e51b815260040161060a90613fb5565b826001600160a01b0316635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ea657600080fd5b505afa158015611eba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0191906134e2565b60606001600160a01b03831615801590611f0a5750816001600160a01b0316836001600160a01b031614155b611f265760405162461bcd60e51b815260040161060a90613de8565b6001600160a01b038383181660009081526005602090815260409182902080548351818402810184019094528084529091830182828015611f9057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611f72575b5050505050905092915050565b6000818152602081905260408120611be290612ff4565b60045490565b60005b82811015612077576000606030868685818110611fd657fe5b9050602002810190611fe891906142ca565b604051611ff6929190613a68565b600060405180830381855af49150503d8060008114612031576040519150601f19603f3d011682016040523d82523d6000602084013e612036565b606091505b5091509150811580156120465750835b1561206d5761205481612fff565b60405162461bcd60e51b815260040161060a9190613b38565b5050600101611fbd565b50505050565b60008281526020819052604090206002015461209b90610472612ed5565b6110425760405162461bcd60e51b815260040161060a90613d8b565b600260015414156120da5760405162461bcd60e51b815260040161060a90614023565b60026001556121097fe132a6a517694e2454dc663f0d4fa738f94e7c1bd06c8950d14f9db8832494bd33611be8565b6121255760405162461bcd60e51b815260040161060a90613e45565b80516001600160a01b031661214c5760405162461bcd60e51b815260040161060a90613f10565b80516001600160a01b0316600090815260026020526040902054156121835760405162461bcd60e51b815260040161060a90613fec565b6040805160088082526101208201909252606091602082016101008036833750506040805160088082526101208201909252929350606092915060208201610100803683370190505090506121d66131e5565b60405180610180016040528085600001516001600160a01b0316815260200160006001600160a01b03168152602001856020015160ff1681526020018560400151815260200185606001516001600160a01b0316815260200184815260200183815260200160006001600160a01b0316815260200185608001516001600160a01b031681526020018560a00151151581526020018560c00151151581526020018560e00151151581525090508360e0015161229f57835161229690612bc4565b60c001516122af565b83516122aa90612c6b565b60c001515b6001600160a01b0316602082015260005b60088160ff16101561249a5784516040517f82b866000000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906382b86600906123149084906004016142bc565b60206040518083038186803b15801561232c57600080fd5b505afa92505050801561237a575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526123779181019061340e565b60015b61238c5780600803845103845261249a565b6001600160a01b0381166123b25760405162461bcd60e51b815260040161060a90613f7e565b80858360ff16815181106123c257fe5b60200260200101906001600160a01b031690816001600160a01b03168152505060005b8260ff168160ff1610156124905760056000878360ff168151811061240657fe5b6020026020010151888660ff168151811061241d57fe5b6020908102919091018101516001600160a01b0392188216835282810193909352604090910160009081208a51815460018181018455928452949092209093018054919092167fffffffffffffffffffffffff0000000000000000000000000000000000000000909116179055016123e5565b50506001016122c0565b5060808401516001600160a01b0316156127e05783608001516001600160a01b0316639750a8ee6040518163ffffffff1660e01b815260040160206040518083038186803b1580156124eb57600080fd5b505afa1580156124ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612523919061340e565b6001600160a01b031660e0820181905260009081526002602052604090205461255e5760405162461bcd60e51b815260040161060a90613c7a565b60005b60088160ff1610156127315784608001516001600160a01b03166382b86600826040518263ffffffff1660e01b815260040161259d91906142bc565b60206040518083038186803b1580156125b557600080fd5b505afa925050508015612603575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526126009181019061340e565b60015b61261557806008038351038352612731565b6001600160a01b03811661263b5760405162461bcd60e51b815260040161060a90613f7e565b80848360ff168151811061264b57fe5b6001600160a01b03909216602092830291909101909101528451612670906002612fab565b8260ff1611156127285760005b6001865103811015612726576005600086838151811061269957fe5b6020026020010151878660ff16815181106126b057fe5b6020908102919091018101516001600160a01b03921882168352828101939093526040909101600090812060808b0151815460018181018455928452949092209093018054919092167fffffffffffffffffffffffff00000000000000000000000000000000000000009091161790550161267d565b505b50600101612561565b5083600001516001600160a01b031684608001516001600160a01b031663cb2ef5fe6040518163ffffffff1660e01b815260040160206040518083038186803b15801561277d57600080fd5b505afa158015612791573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127b5919061340e565b6001600160a01b0316146127db5760405162461bcd60e51b815260040161060a90613f47565b6127e8565b600882510382525b6004805460018101825560009190915281517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b600890920291820180547fffffffffffffffffffffffff00000000000000000000000000000000000000009081166001600160a01b039384161782556020808601517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c860180546040890151908516928716929092177fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000060ff9093169290920291909117905560608601517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19d86015560808601517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19e86018054909316941693909317905560a084015180518594929361296f937f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19f01920190613248565b5060c0820151805161298b916005840191602090910190613248565b5060e08201516006820180546001600160a01b039283167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161790915561010084015160079093018054610120860151610140870151610160909701511515760100000000000000000000000000000000000000000000027fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff9715157501000000000000000000000000000000000000000000027fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff92151574010000000000000000000000000000000000000000027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff988816949096169390931796909616939093179290921691909117939093169190911790915560045482518216600090815260026020908152604080832084905560608601518352600390915290819020829055865190519216917f15ec4115f45227a2f5b970962fd2294c7be9ba12b0652daae49ff679c02a1e0291612b2d9160001991909101908590614158565b60405180910390a25050600180555050565b6001600160a01b0381166000908152600260205260408120548290612b765760405162461bcd60e51b815260040161060a90613fb5565b826001600160a01b031663e25aa5fa6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114ac57600080fd5b6000611bdf836001600160a01b03841661305f565b612bcc6132c5565b816001600160a01b0316635fd65f0f6040518163ffffffff1660e01b815260040160e06040518083038186803b158015612c0557600080fd5b505afa158015612c19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c3d9190613812565b6001600160a01b031660c088015260a087015260808601526060850152604084015260208301528152919050565b612c736132c5565b816001600160a01b0316635fd65f0f6040518163ffffffff1660e01b81526004016101006040518083038186803b158015612cad57600080fd5b505afa158015612cc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ce59190613871565b6001600160a01b031660c08901525060a087015260808601526060850152604084015260208301528152919050565b6001600160a01b038116600090815260026020526040812054600480546060939260001901908110612d4257fe5b90600052602060002090600802016004018054905090508067ffffffffffffffff81118015612d7057600080fd5b50604051908082528060200260200182016040528015612d9a578160200160208202803683370190505b50915060005b818160ff161015612e62576040517f91ceb3eb0000000000000000000000000000000000000000000000000000000081526001600160a01b038516906391ceb3eb90612df09084906004016142bc565b60206040518083038186803b158015612e0857600080fd5b505afa158015612e1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e4091906137fa565b838260ff1681518110612e4f57fe5b6020908102919091010152600101612da0565b5050919050565b600082612e7857506000611be2565b82820282848281612e8557fe5b0414611bdf5760405162461bcd60e51b815260040161060a90613e7c565b6000808211612ec45760405162461bcd60e51b815260040161060a90613d54565b818381612ecd57fe5b049392505050565b3390565b6000828152602081905260409020612ef19082612baf565b1561100657612efe612ed5565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081905260409020612f5a90826130a9565b1561100657612f67612ed5565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b600082821115612fcd5760405162461bcd60e51b815260040161060a90613d1d565b50900390565b6000611bdf83836130be565b6000611bdf836001600160a01b038416613103565b6000611be28261311b565b6060604482511015613045575060408051808201909152601d81527f5472616e73616374696f6e2072657665727465642073696c656e746c7900000060208201526107e5565b60048201915081806020019051810190611be2919061355b565b600061306b8383613103565b6130a157508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611be2565b506000611be2565b6000611bdf836001600160a01b03841661311f565b815460009082106130e15760405162461bcd60e51b815260040161060a90613b89565b8260000182815481106130f057fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b600081815260018301602052604081205480156131db578354600019808301919081019060009087908390811061315257fe5b906000526020600020015490508087600001848154811061316f57fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061319f57fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050611be2565b6000915050611be2565b604080516101808101825260008082526020820181905291810182905260608082018390526080820183905260a0820181905260c082015260e0810182905261010081018290526101208101829052610140810182905261016081019190915290565b8280548282559060005260206000209081019282156132b5579160200282015b828111156132b557825182547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03909116178255602090920191600190910190613268565b506132c192915061330b565b5090565b6040518060e0016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681525090565b5b808211156132c15780547fffffffffffffffffffffffff000000000000000000000000000000000000000016815560010161330c565b8035611be281614393565b600082601f83011261335d578081fd5b813567ffffffffffffffff811115613373578182fd5b6020808202613383828201614334565b8381529350818401858301828701840188101561339f57600080fd5b600092505b848310156133cb5780356133b781614393565b8252600192909201919083019083016133a4565b505050505092915050565b8035611be2816143ab565b803560ff81168114611be257600080fd5b600060208284031215613403578081fd5b8135611bdf81614393565b60006020828403121561341f578081fd5b8151611bdf81614393565b6000806040838503121561343c578081fd5b823561344781614393565b9150602083013561345781614393565b809150509250929050565b600080600060408486031215613476578081fd5b833567ffffffffffffffff8082111561348d578283fd5b818601915086601f8301126134a0578283fd5b8135818111156134ae578384fd5b87602080830285010111156134c1578384fd5b602092830195509350508401356134d7816143ab565b809150509250925092565b6000602082840312156134f3578081fd5b8151611bdf816143ab565b60006020828403121561350f578081fd5b5035919050565b60008060408385031215613528578182fd5b82359150602083013561345781614393565b6000806040838503121561354c578182fd5b50508035926020909101359150565b60006020828403121561356c578081fd5b815167ffffffffffffffff80821115613583578283fd5b818401915084601f830112613596578283fd5b8151818111156135a4578384fd5b6135d560207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601614334565b91508082528560208285010111156135eb578384fd5b6135fc816020840160208601614367565b50949350505050565b600060208284031215613616578081fd5b813567ffffffffffffffff8082111561362d578283fd5b8184019150610180808387031215613643578384fd5b61364c81614334565b90506136588684613342565b81526136678660208501613342565b602082015261367986604085016133e1565b6040820152606083013560608201526136958660808501613342565b608082015260a0830135828111156136ab578485fd5b6136b78782860161334d565b60a08301525060c0830135828111156136ce578485fd5b6136da8782860161334d565b60c0830152506136ed8660e08501613342565b60e0820152610100915061370386838501613342565b828201526101209150613718868385016133d6565b82820152610140915061372d868385016133d6565b828201526101609150613742868385016133d6565b91810191909152949350505050565b6000610100808385031215613764578182fd5b61376d81614334565b9050823561377a81614393565b815261378984602085016133e1565b60208201526040830135604082015260608301356137a681614393565b60608201526137b88460808501613342565b60808201526137ca8460a085016133d6565b60a08201526137dc8460c085016133d6565b60c08201526137ee8460e085016133d6565b60e08201529392505050565b60006020828403121561380b578081fd5b5051919050565b600080600080600080600060e0888a03121561382c578485fd5b875196506020880151955060408801519450606088015193506080880151925060a0880151915060c088015161386181614393565b8091505092959891949750929550565b600080600080600080600080610100898b03121561388d578182fd5b885197506020890151965060408901519550606089015194506080890151935060a0890151925060c0890151915060e08901516138c981614393565b809150509295985092959890939650565b6001600160a01b03169052565b6000815180845260208085019450808401835b8381101561391f5781516001600160a01b0316875295820195908201906001016138fa565b509495945050505050565b6000815480845260208085019450838352808320835b8381101561391f5781546001600160a01b031687529582019560019182019101613940565b15159052565b600061018061397b8484516138da565b602083015161398d60208601826138da565b5060408301516139a06040860182613a61565b506060830151606085015260808301516139bd60808601826138da565b5060a08301518160a08601526139d5828601826138e7565b91505060c083015184820360c08601526139ef82826138e7565b91505060e0830151613a0460e08601826138da565b5061010080840151613a18828701826138da565b505061012080840151613a2d82870182613965565b505061014080840151613a4282870182613965565b505061016080840151613a5782870182613965565b5090949350505050565b60ff169052565b6000828483379101908152919050565b6001600160a01b0391909116815260200190565b6020808252825182820181905260009190848201906040850190845b81811015613acd5783516001600160a01b031683529284019291840191600101613aa8565b50909695505050505050565b600060208252611bdf60208301846138e7565b6020808252825182820181905260009190848201906040850190845b81811015613acd57835183529284019291840191600101613b08565b901515815260200190565b90815260200190565b6000602082528251806020840152613b57816040850160208701614367565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e60408201527f6473000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201527f2061646d696e20746f206772616e740000000000000000000000000000000000606082015260800190565b6020808252601b908201527f506f6f6c206973206e6f74206f776e656420627920736164646c650000000000604082015260600190565b60208082526017908201527f50523a206261736520706f6f6c206e6f7420666f756e64000000000000000000604082015260600190565b60208082526018908201527f50523a20706f6f6c41646472657373206d69736d617463680000000000000000604082015260600190565b6020808252818101527f50523a2043616c6c6572206973206e6f7420736164646c65206d616e61676572604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b60208082526030908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201527f2061646d696e20746f207265766f6b6500000000000000000000000000000000606082015260800190565b6020808252602a908201527f50523a2066726f6d20616e6420746f2063616e6e6f7420626520746865207a6560408201527f726f206164647265737300000000000000000000000000000000000000000000606082015260800190565b6020808252601f908201527f50523a204f6e6c79206d616e61676572732063616e2061646420706f6f6c7300604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526017908201527f50523a20496e646578206f7574206f6620626f756e6473000000000000000000604082015260600190565b60208082526014908201527f50523a20706f6f6c416464726573732069732030000000000000000000000000604082015260600190565b6020808252601d908201527f50523a206d657461537761702061646472657373206d69736d61746368000000604082015260600190565b6020808252600e908201527f50523a20746f6b656e2069732030000000000000000000000000000000000000604082015260600190565b6020808252601a908201527f50523a204e6f206d61746368696e6720706f6f6c20666f756e64000000000000604082015260600190565b60208082526019908201527f50523a20506f6f6c20697320616c726561647920616464656400000000000000604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526012908201527f50523a20506f6f6c206e6f7420666f756e640000000000000000000000000000604082015260600190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201527f20726f6c657320666f722073656c660000000000000000000000000000000000606082015260800190565b600060208252611bdf602083018461396b565b600060e082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a08301526001600160a01b0360c08401511660c083015292915050565b600083825260406020830152614171604083018461396b565b949350505050565b60008382526040602083015261419b60408301614196855461435b565b6138da565b60018301546001600160a01b036141b7606085018284166138da565b6141ca6080850160ff8460a01c16613a61565b600285015460a08501526141e1600386015461435b565b91506141f060c08501836138da565b61018091508160e085015261420c6101c085016004870161392a565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc085820301610100860152614244816005880161392a565b9050614253600687015461435b565b6142616101208701826138da565b50600786015461427761014087018483166138da565b61428b610160870160ff8360a01c16613965565b61429d84870160ff8360a81c16613965565b6142b16101a0870160ff8360b01c16613965565b509695505050505050565b60ff91909116815260200190565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126142fe578283fd5b83018035915067ffffffffffffffff821115614318578283fd5b60200191503681900382131561432d57600080fd5b9250929050565b60405181810167ffffffffffffffff8111828210171561435357600080fd5b604052919050565b6001600160a01b031690565b60005b8381101561438257818101518382015260200161436a565b838111156120775750506000910152565b6001600160a01b03811681146143a857600080fd5b50565b80151581146143a857600080fdfea2646970667358221220a6fc023ff37d5be4b8e43227139f8db51b182e42e63581000f6c263629d5471364736f6c634300060c0033",
  "devdoc": {
    "events": {
      "AddCommunityPool(address,uint256,(address,address,uint8,bytes32,address,address[],address[],address,address,bool,bool,bool))": {
        "params": {
          "index": "index of the added pool in the pools list",
          "poolAddress": "address of the added pool",
          "poolData": "added pool data"
        }
      },
      "AddPool(address,uint256,(address,address,uint8,bytes32,address,address[],address[],address,address,bool,bool,bool))": {
        "params": {
          "index": "index of the added pool in the pools list",
          "poolAddress": "address of the added pool",
          "poolData": "added pool data"
        }
      },
      "RemovePool(address,uint256)": {
        "params": {
          "index": "index of the removed pool in the pools list",
          "poolAddress": "address of the removed pool"
        }
      },
      "UpdatePool(address,uint256,(address,address,uint8,bytes32,address,address[],address[],address,address,bool,bool,bool))": {
        "params": {
          "index": "index of the updated pool in the pools list",
          "poolAddress": "address of the updated pool",
          "poolData": "updated pool data"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "addCommunityPool((address,address,uint8,bytes32,address,address[],address[],address,address,bool,bool,bool))": {
        "details": "Before adding a meta pool, the user must first add the underlying base pool. Only Swap and MetaSwap contracts need to be added.",
        "params": {
          "data": "PoolInputData struct for the new pool"
        }
      },
      "addPool((address,uint8,bytes32,address,address,bool,bool,bool))": {
        "details": "Before adding a meta pool, the user must first add the underlying base pool. Only Swap and MetaSwap contracts need to be added.",
        "params": {
          "inputData": "PoolInputData struct for the new pool"
        }
      },
      "approvePool(address)": {
        "details": "since array entries are difficult to remove, we modify the entry to mark it as a Saddle owned pool.",
        "params": {
          "poolAddress": "address of the community pool"
        }
      },
      "batch(bytes[],bool)": {
        "params": {
          "calls": "An array of inputs for each call.",
          "revertOnFail": "If True then reverts after a failed call and stops doing further calls."
        }
      },
      "constructor": {
        "details": "caller of this function will be set as the owner on deployment",
        "params": {
          "admin": "address who should have the DEFAULT_ADMIN_ROLE"
        }
      },
      "getA(address)": {
        "params": {
          "poolAddress": "address of the pool to read"
        }
      },
      "getEligiblePools(address,address)": {
        "params": {
          "from": "address of the token to swap from",
          "to": "address of the token to swap to"
        },
        "returns": {
          "eligiblePools": "array of pool addresses that can swap between from and to"
        }
      },
      "getPaused(address)": {
        "params": {
          "poolAddress": "address of the pool to read"
        }
      },
      "getPoolData(address)": {
        "params": {
          "poolAddress": "address of the pool to read"
        }
      },
      "getPoolDataAtIndex(uint256)": {
        "params": {
          "index": "index of the pool to read"
        }
      },
      "getPoolDataByName(bytes32)": {
        "params": {
          "poolName": "name of the pool to read"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "getSwapStorage(address)": {
        "params": {
          "poolAddress": "address of the pool to read"
        }
      },
      "getTokenBalances(address)": {
        "params": {
          "poolAddress": "address of the pool to look up the token balances for"
        },
        "returns": {
          "balances": "array of token balances"
        }
      },
      "getTokens(address)": {
        "params": {
          "poolAddress": "address of the pool to read"
        }
      },
      "getUnderlyingTokenBalances(address)": {
        "params": {
          "poolAddress": "address of the pool to look up the token balances for"
        },
        "returns": {
          "balances": "array of token balances"
        }
      },
      "getUnderlyingTokens(address)": {
        "params": {
          "poolAddress": "address of the pool to read"
        }
      },
      "getVirtualPrice(address)": {
        "params": {
          "poolAddress": "address of the pool to read"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "removePool(address)": {
        "details": "Since arrays are not easily reducable, the entry will be marked as removed.",
        "params": {
          "poolAddress": "address of the pool to remove"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "updatePool((address,address,uint8,bytes32,address,address[],address[],address,address,bool,bool,bool))": {
        "params": {
          "poolData": "new PoolData struct to store"
        }
      }
    },
    "stateVariables": {
      "poolsIndexOfNamePlusOne": {
        "params": {
          "poolName": "pool name in bytes32 format to look for"
        }
      },
      "poolsIndexOfPlusOne": {
        "params": {
          "poolAddress": "address to look for"
        }
      }
    },
    "title": "PoolRegistry",
    "version": 1
  },
  "userdoc": {
    "events": {
      "AddCommunityPool(address,uint256,(address,address,uint8,bytes32,address,address[],address[],address,address,bool,bool,bool))": {
        "notice": "Add a new registry entry to the master list."
      },
      "AddPool(address,uint256,(address,address,uint8,bytes32,address,address[],address[],address,address,bool,bool,bool))": {
        "notice": "Add a new registry entry to the master list."
      },
      "RemovePool(address,uint256)": {
        "notice": "Add a new registry entry to the master list."
      },
      "UpdatePool(address,uint256,(address,address,uint8,bytes32,address,address[],address[],address,address,bool,bool,bool))": {
        "notice": "Add a new registry entry to the master list."
      }
    },
    "kind": "user",
    "methods": {
      "COMMUNITY_MANAGER_ROLE()": {
        "notice": "Role responsible for managing community pools"
      },
      "SADDLE_APPROVED_POOL_OWNER_ROLE()": {
        "notice": "Role that represents approved owners of pools. owner of each pool must have this role if the pool is to be approved."
      },
      "SADDLE_MANAGER_ROLE()": {
        "notice": "Role responsible for managing pools."
      },
      "addCommunityPool((address,address,uint8,bytes32,address,address[],address[],address,address,bool,bool,bool))": {
        "notice": "Add a new pool to the registry"
      },
      "addPool((address,uint8,bytes32,address,address,bool,bool,bool))": {
        "notice": "Add a new pool to the registry"
      },
      "approvePool(address)": {
        "notice": "Approve community deployed pools to be upgraded as Saddle owned"
      },
      "batch(bytes[],bool)": {
        "notice": "Allows batched call to self (this contract)."
      },
      "constructor": "Deploy this contract and set appropriate roles",
      "getA(address)": {
        "notice": "Returns A of the given pool address"
      },
      "getEligiblePools(address,address)": {
        "notice": "Returns an array of pool addresses that can swap between from and to"
      },
      "getPaused(address)": {
        "notice": "Returns the paused status of the given pool address"
      },
      "getPoolData(address)": {
        "notice": "Returns PoolData for given pool address"
      },
      "getPoolDataAtIndex(uint256)": {
        "notice": "Returns PoolData at given index"
      },
      "getPoolDataByName(bytes32)": {
        "notice": "Returns PoolData with given name"
      },
      "getPoolsLength()": {
        "notice": "Returns number of entries in the registry. Includes removed pools in the list as well."
      },
      "getSwapStorage(address)": {
        "notice": "Returns the SwapStorage struct of the given pool address"
      },
      "getTokenBalances(address)": {
        "notice": "Returns an array of balances of the tokens"
      },
      "getTokens(address)": {
        "notice": "Returns the tokens of the given pool address"
      },
      "getUnderlyingTokenBalances(address)": {
        "notice": "Returns an array of balances of the tokens"
      },
      "getUnderlyingTokens(address)": {
        "notice": "Returns the underlying tokens of the given pool address. Base pools will return an empty array."
      },
      "getVirtualPrice(address)": {
        "notice": "Returns virtual price of the given pool address"
      },
      "poolsIndexOfNamePlusOne(bytes32)": {
        "notice": "Returns the index + 1 of the pool name in the registry"
      },
      "poolsIndexOfPlusOne(address)": {
        "notice": "Returns the index + 1 of the pool address in the registry"
      },
      "removePool(address)": {
        "notice": "Remove pool from the registry"
      },
      "updatePool((address,address,uint8,bytes32,address,address[],address[],address,address,bool,bool,bool))": {
        "notice": "Overwrite existing entry with new PoolData"
      }
    },
    "notice": "This contract holds list of pools deployed.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1726,
        "contract": "contracts/registries/PoolRegistry.sol:PoolRegistry",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)1722_storage)"
      },
      {
        "astId": 6134,
        "contract": "contracts/registries/PoolRegistry.sol:PoolRegistry",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 33355,
        "contract": "contracts/registries/PoolRegistry.sol:PoolRegistry",
        "label": "poolsIndexOfPlusOne",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 33361,
        "contract": "contracts/registries/PoolRegistry.sol:PoolRegistry",
        "label": "poolsIndexOfNamePlusOne",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 33364,
        "contract": "contracts/registries/PoolRegistry.sol:PoolRegistry",
        "label": "pools",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(PoolData)24494_storage)dyn_storage"
      },
      {
        "astId": 33369,
        "contract": "contracts/registries/PoolRegistry.sol:PoolRegistry",
        "label": "eligiblePairsMap",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_contract(IERC20)3311)dyn_storage": {
        "base": "t_contract(IERC20)3311",
        "encoding": "dynamic_array",
        "label": "contract IERC20[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(PoolData)24494_storage)dyn_storage": {
        "base": "t_struct(PoolData)24494_storage",
        "encoding": "dynamic_array",
        "label": "struct IPoolRegistry.PoolData[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)3311": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)1722_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)1722_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_struct(AddressSet)5815_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 5814,
            "contract": "contracts/registries/PoolRegistry.sol:PoolRegistry",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)5550_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PoolData)24494_storage": {
        "encoding": "inplace",
        "label": "struct IPoolRegistry.PoolData",
        "members": [
          {
            "astId": 24469,
            "contract": "contracts/registries/PoolRegistry.sol:PoolRegistry",
            "label": "poolAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 24471,
            "contract": "contracts/registries/PoolRegistry.sol:PoolRegistry",
            "label": "lpToken",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 24473,
            "contract": "contracts/registries/PoolRegistry.sol:PoolRegistry",
            "label": "typeOfAsset",
            "offset": 20,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 24475,
            "contract": "contracts/registries/PoolRegistry.sol:PoolRegistry",
            "label": "poolName",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 24477,
            "contract": "contracts/registries/PoolRegistry.sol:PoolRegistry",
            "label": "targetAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 24480,
            "contract": "contracts/registries/PoolRegistry.sol:PoolRegistry",
            "label": "tokens",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_contract(IERC20)3311)dyn_storage"
          },
          {
            "astId": 24483,
            "contract": "contracts/registries/PoolRegistry.sol:PoolRegistry",
            "label": "underlyingTokens",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_contract(IERC20)3311)dyn_storage"
          },
          {
            "astId": 24485,
            "contract": "contracts/registries/PoolRegistry.sol:PoolRegistry",
            "label": "basePoolAddress",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 24487,
            "contract": "contracts/registries/PoolRegistry.sol:PoolRegistry",
            "label": "metaSwapDepositAddress",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 24489,
            "contract": "contracts/registries/PoolRegistry.sol:PoolRegistry",
            "label": "isSaddleApproved",
            "offset": 20,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 24491,
            "contract": "contracts/registries/PoolRegistry.sol:PoolRegistry",
            "label": "isRemoved",
            "offset": 21,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 24493,
            "contract": "contracts/registries/PoolRegistry.sol:PoolRegistry",
            "label": "isGuarded",
            "offset": 22,
            "slot": "7",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(RoleData)1722_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 1719,
            "contract": "contracts/registries/PoolRegistry.sol:PoolRegistry",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AddressSet)5815_storage"
          },
          {
            "astId": 1721,
            "contract": "contracts/registries/PoolRegistry.sol:PoolRegistry",
            "label": "adminRole",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)5550_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 5545,
            "contract": "contracts/registries/PoolRegistry.sol:PoolRegistry",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 5549,
            "contract": "contracts/registries/PoolRegistry.sol:PoolRegistry",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
