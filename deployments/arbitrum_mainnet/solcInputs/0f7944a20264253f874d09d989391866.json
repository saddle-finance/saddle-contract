{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/IMasterChef.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\nimport \"@boringcrypto/boring-solidity-e06e943/contracts/libraries/BoringERC20.sol\";\r\n\r\ninterface IMasterChef {\r\n    using BoringERC20 for IERC20;\r\n    struct UserInfo {\r\n        uint256 amount; // How many LP tokens the user has provided.\r\n        uint256 rewardDebt; // Reward debt. See explanation below.\r\n    }\r\n\r\n    struct PoolInfo {\r\n        IERC20 lpToken; // Address of LP token contract.\r\n        uint256 allocPoint; // How many allocation points assigned to this pool. SADDLE to distribute per block.\r\n        uint256 lastRewardBlock; // Last block number that SADDLE distribution occurs.\r\n        uint256 accSaddlePerShare; // Accumulated SADDLE per share, times 1e12. See below.\r\n    }\r\n\r\n    function poolInfo(uint256 pid)\r\n        external\r\n        view\r\n        returns (IMasterChef.PoolInfo memory);\r\n\r\n    function totalAllocPoint() external view returns (uint256);\r\n\r\n    function deposit(uint256 _pid, uint256 _amount) external;\r\n}\r\n"
    },
    "@boringcrypto/boring-solidity-e06e943/contracts/libraries/BoringERC20.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.6.12;\r\n\r\nimport \"../interfaces/IERC20.sol\";\r\n\r\nlibrary BoringERC20 {\r\n    function safeSymbol(IERC20 token) internal view returns(string memory) {\r\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x95d89b41));\r\n        return success && data.length > 0 ? abi.decode(data, (string)) : \"???\";\r\n    }\r\n\r\n    function safeName(IERC20 token) internal view returns(string memory) {\r\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x06fdde03));\r\n        return success && data.length > 0 ? abi.decode(data, (string)) : \"???\";\r\n    }\r\n\r\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\r\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x313ce567));\r\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\r\n    }\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 amount) internal {\r\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(0xa9059cbb, to, amount));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"BoringERC20: Transfer failed\");\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 amount) internal {\r\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(0x23b872dd, from, to, amount));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"BoringERC20: TransferFrom failed\");\r\n    }\r\n}"
    },
    "@boringcrypto/boring-solidity-e06e943/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    // EIP 2612\r\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n}"
    },
    "contracts/rewards/MiniChefV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"@boringcrypto/boring-solidity-e06e943/contracts/libraries/BoringMath.sol\";\r\nimport \"@boringcrypto/boring-solidity-e06e943/contracts/BoringBatchable.sol\";\r\nimport \"@boringcrypto/boring-solidity-e06e943/contracts/BoringOwnable.sol\";\r\nimport \"../libraries/SignedSafeMath.sol\";\r\nimport \"../interfaces/IRewarder.sol\";\r\nimport \"../interfaces/IMasterChef.sol\";\r\n\r\n/// @notice The (older) MasterChef contract gives out a constant number of SADDLE tokens per block.\r\n/// It is the only address with minting rights for SADDLE.\r\n/// The idea for this MasterChef V2 (MCV2) contract is therefore to be the owner of a dummy token\r\n/// that is deposited into the MasterChef V1 (MCV1) contract.\r\n/// The allocation point for this pool on MCV1 is the total allocation point for all pools that receive double incentives.\r\ncontract MiniChefV2 is BoringOwnable, BoringBatchable {\r\n    using BoringMath for uint256;\r\n    using BoringMath128 for uint128;\r\n    using BoringERC20 for IERC20;\r\n    using SignedSafeMath for int256;\r\n\r\n    /// @notice Info of each MCV2 user.\r\n    /// `amount` LP token amount the user has provided.\r\n    /// `rewardDebt` The amount of SADDLE entitled to the user.\r\n    struct UserInfo {\r\n        uint256 amount;\r\n        int256 rewardDebt;\r\n    }\r\n\r\n    /// @notice Info of each MCV2 pool.\r\n    /// `allocPoint` The amount of allocation points assigned to the pool.\r\n    /// Also known as the amount of SADDLE to distribute per block.\r\n    struct PoolInfo {\r\n        uint128 accSaddlePerShare;\r\n        uint64 lastRewardTime;\r\n        uint64 allocPoint;\r\n    }\r\n\r\n    /// @notice Address of SADDLE contract.\r\n    IERC20 public immutable SADDLE;\r\n\r\n    /// @notice Info of each MCV2 pool.\r\n    PoolInfo[] public poolInfo;\r\n    /// @notice Address of the LP token for each MCV2 pool.\r\n    IERC20[] public lpToken;\r\n    /// @notice Address of each `IRewarder` contract in MCV2.\r\n    IRewarder[] public rewarder;\r\n\r\n    /// @notice Info of each user that stakes LP tokens.\r\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\r\n    /// @dev Total allocation points. Must be the sum of all allocation points in all pools.\r\n    uint256 public totalAllocPoint;\r\n\r\n    uint256 public saddlePerSecond;\r\n    uint256 private constant ACC_SADDLE_PRECISION = 1e12;\r\n\r\n    event Deposit(\r\n        address indexed user,\r\n        uint256 indexed pid,\r\n        uint256 amount,\r\n        address indexed to\r\n    );\r\n    event Withdraw(\r\n        address indexed user,\r\n        uint256 indexed pid,\r\n        uint256 amount,\r\n        address indexed to\r\n    );\r\n    event EmergencyWithdraw(\r\n        address indexed user,\r\n        uint256 indexed pid,\r\n        uint256 amount,\r\n        address indexed to\r\n    );\r\n    event Harvest(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event LogPoolAddition(\r\n        uint256 indexed pid,\r\n        uint256 allocPoint,\r\n        IERC20 indexed lpToken,\r\n        IRewarder indexed rewarder\r\n    );\r\n    event LogSetPool(\r\n        uint256 indexed pid,\r\n        uint256 allocPoint,\r\n        IRewarder indexed rewarder,\r\n        bool overwrite\r\n    );\r\n    event LogUpdatePool(\r\n        uint256 indexed pid,\r\n        uint64 lastRewardTime,\r\n        uint256 lpSupply,\r\n        uint256 accSaddlePerShare\r\n    );\r\n    event LogSaddlePerSecond(uint256 saddlePerSecond);\r\n\r\n    /// @param _saddle The SADDLE token contract address.\r\n    constructor(IERC20 _saddle) public {\r\n        SADDLE = _saddle;\r\n    }\r\n\r\n    /// @notice Returns the number of MCV2 pools.\r\n    function poolLength() public view returns (uint256 pools) {\r\n        pools = poolInfo.length;\r\n    }\r\n\r\n    /// @notice Add a new LP to the pool. Can only be called by the owner.\r\n    /// DO NOT add the same LP token more than once. Rewards will be messed up if you do.\r\n    /// @param allocPoint AP of the new pool.\r\n    /// @param _lpToken Address of the LP ERC-20 token.\r\n    /// @param _rewarder Address of the rewarder delegate.\r\n    function add(\r\n        uint256 allocPoint,\r\n        IERC20 _lpToken,\r\n        IRewarder _rewarder\r\n    ) public onlyOwner {\r\n        totalAllocPoint = totalAllocPoint.add(allocPoint);\r\n        lpToken.push(_lpToken);\r\n        rewarder.push(_rewarder);\r\n\r\n        poolInfo.push(\r\n            PoolInfo({\r\n                allocPoint: allocPoint.to64(),\r\n                lastRewardTime: block.timestamp.to64(),\r\n                accSaddlePerShare: 0\r\n            })\r\n        );\r\n        emit LogPoolAddition(\r\n            lpToken.length.sub(1),\r\n            allocPoint,\r\n            _lpToken,\r\n            _rewarder\r\n        );\r\n    }\r\n\r\n    /// @notice Update the given pool's SADDLE allocation point and `IRewarder` contract. Can only be called by the owner.\r\n    /// @param _pid The index of the pool. See `poolInfo`.\r\n    /// @param _allocPoint New AP of the pool.\r\n    /// @param _rewarder Address of the rewarder delegate.\r\n    /// @param overwrite True if _rewarder should be `set`. Otherwise `_rewarder` is ignored.\r\n    function set(\r\n        uint256 _pid,\r\n        uint256 _allocPoint,\r\n        IRewarder _rewarder,\r\n        bool overwrite\r\n    ) public onlyOwner {\r\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(\r\n            _allocPoint\r\n        );\r\n        poolInfo[_pid].allocPoint = _allocPoint.to64();\r\n        if (overwrite) {\r\n            rewarder[_pid] = _rewarder;\r\n        }\r\n        emit LogSetPool(\r\n            _pid,\r\n            _allocPoint,\r\n            overwrite ? _rewarder : rewarder[_pid],\r\n            overwrite\r\n        );\r\n    }\r\n\r\n    /// @notice Sets the saddle per second to be distributed. Can only be called by the owner.\r\n    /// @param _saddlePerSecond The amount of Saddle to be distributed per second.\r\n    function setSaddlePerSecond(uint256 _saddlePerSecond) public onlyOwner {\r\n        saddlePerSecond = _saddlePerSecond;\r\n        emit LogSaddlePerSecond(_saddlePerSecond);\r\n    }\r\n\r\n    /// @notice View function to see pending SADDLE on frontend.\r\n    /// @param _pid The index of the pool. See `poolInfo`.\r\n    /// @param _user Address of user.\r\n    /// @return pending SADDLE reward for a given user.\r\n    function pendingSaddle(uint256 _pid, address _user)\r\n        external\r\n        view\r\n        returns (uint256 pending)\r\n    {\r\n        PoolInfo memory pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 accSaddlePerShare = pool.accSaddlePerShare;\r\n        uint256 lpSupply = lpToken[_pid].balanceOf(address(this));\r\n        if (block.timestamp > pool.lastRewardTime && lpSupply != 0) {\r\n            uint256 time = block.timestamp.sub(pool.lastRewardTime);\r\n            uint256 saddleReward = time.mul(saddlePerSecond).mul(\r\n                pool.allocPoint\r\n            ) / totalAllocPoint;\r\n            accSaddlePerShare = accSaddlePerShare.add(\r\n                saddleReward.mul(ACC_SADDLE_PRECISION) / lpSupply\r\n            );\r\n        }\r\n        pending = int256(\r\n            user.amount.mul(accSaddlePerShare) / ACC_SADDLE_PRECISION\r\n        ).sub(user.rewardDebt).toUInt256();\r\n    }\r\n\r\n    /// @notice Update reward variables for all pools. Be careful of gas spending!\r\n    /// @param pids Pool IDs of all to be updated. Make sure to update all active pools.\r\n    function massUpdatePools(uint256[] calldata pids) external {\r\n        uint256 len = pids.length;\r\n        for (uint256 i = 0; i < len; ++i) {\r\n            updatePool(pids[i]);\r\n        }\r\n    }\r\n\r\n    /// @notice Update reward variables of the given pool.\r\n    /// @param pid The index of the pool. See `poolInfo`.\r\n    /// @return pool Returns the pool that was updated.\r\n    function updatePool(uint256 pid) public returns (PoolInfo memory pool) {\r\n        pool = poolInfo[pid];\r\n        if (block.timestamp > pool.lastRewardTime) {\r\n            uint256 lpSupply = lpToken[pid].balanceOf(address(this));\r\n            if (lpSupply > 0) {\r\n                uint256 time = block.timestamp.sub(pool.lastRewardTime);\r\n                uint256 saddleReward = time.mul(saddlePerSecond).mul(\r\n                    pool.allocPoint\r\n                ) / totalAllocPoint;\r\n                pool.accSaddlePerShare = pool.accSaddlePerShare.add(\r\n                    (saddleReward.mul(ACC_SADDLE_PRECISION) / lpSupply).to128()\r\n                );\r\n            }\r\n            pool.lastRewardTime = block.timestamp.to64();\r\n            poolInfo[pid] = pool;\r\n            emit LogUpdatePool(\r\n                pid,\r\n                pool.lastRewardTime,\r\n                lpSupply,\r\n                pool.accSaddlePerShare\r\n            );\r\n        }\r\n    }\r\n\r\n    /// @notice Deposit LP tokens to MCV2 for SADDLE allocation.\r\n    /// @param pid The index of the pool. See `poolInfo`.\r\n    /// @param amount LP token amount to deposit.\r\n    /// @param to The receiver of `amount` deposit benefit.\r\n    function deposit(\r\n        uint256 pid,\r\n        uint256 amount,\r\n        address to\r\n    ) public {\r\n        PoolInfo memory pool = updatePool(pid);\r\n        UserInfo storage user = userInfo[pid][to];\r\n\r\n        // Effects\r\n        user.amount = user.amount.add(amount);\r\n        user.rewardDebt = user.rewardDebt.add(\r\n            int256(amount.mul(pool.accSaddlePerShare) / ACC_SADDLE_PRECISION)\r\n        );\r\n\r\n        // Interactions\r\n        IRewarder _rewarder = rewarder[pid];\r\n        if (address(_rewarder) != address(0)) {\r\n            _rewarder.onSaddleReward(pid, to, to, 0, user.amount);\r\n        }\r\n\r\n        lpToken[pid].safeTransferFrom(msg.sender, address(this), amount);\r\n\r\n        emit Deposit(msg.sender, pid, amount, to);\r\n    }\r\n\r\n    /// @notice Withdraw LP tokens from MCV2.\r\n    /// @param pid The index of the pool. See `poolInfo`.\r\n    /// @param amount LP token amount to withdraw.\r\n    /// @param to Receiver of the LP tokens.\r\n    function withdraw(\r\n        uint256 pid,\r\n        uint256 amount,\r\n        address to\r\n    ) public {\r\n        PoolInfo memory pool = updatePool(pid);\r\n        UserInfo storage user = userInfo[pid][msg.sender];\r\n\r\n        // Effects\r\n        user.rewardDebt = user.rewardDebt.sub(\r\n            int256(amount.mul(pool.accSaddlePerShare) / ACC_SADDLE_PRECISION)\r\n        );\r\n        user.amount = user.amount.sub(amount);\r\n\r\n        // Interactions\r\n        IRewarder _rewarder = rewarder[pid];\r\n        if (address(_rewarder) != address(0)) {\r\n            _rewarder.onSaddleReward(pid, msg.sender, to, 0, user.amount);\r\n        }\r\n\r\n        lpToken[pid].safeTransfer(to, amount);\r\n\r\n        emit Withdraw(msg.sender, pid, amount, to);\r\n    }\r\n\r\n    /// @notice Harvest proceeds for transaction sender to `to`.\r\n    /// @param pid The index of the pool. See `poolInfo`.\r\n    /// @param to Receiver of SADDLE rewards.\r\n    function harvest(uint256 pid, address to) public {\r\n        PoolInfo memory pool = updatePool(pid);\r\n        UserInfo storage user = userInfo[pid][msg.sender];\r\n        int256 accumulatedSaddle = int256(\r\n            user.amount.mul(pool.accSaddlePerShare) / ACC_SADDLE_PRECISION\r\n        );\r\n        uint256 _pendingSaddle = accumulatedSaddle\r\n            .sub(user.rewardDebt)\r\n            .toUInt256();\r\n\r\n        // Effects\r\n        user.rewardDebt = accumulatedSaddle;\r\n\r\n        // Interactions\r\n        if (_pendingSaddle != 0) {\r\n            SADDLE.safeTransfer(to, _pendingSaddle);\r\n        }\r\n\r\n        IRewarder _rewarder = rewarder[pid];\r\n        if (address(_rewarder) != address(0)) {\r\n            _rewarder.onSaddleReward(\r\n                pid,\r\n                msg.sender,\r\n                to,\r\n                _pendingSaddle,\r\n                user.amount\r\n            );\r\n        }\r\n\r\n        emit Harvest(msg.sender, pid, _pendingSaddle);\r\n    }\r\n\r\n    /// @notice Withdraw LP tokens from MCV2 and harvest proceeds for transaction sender to `to`.\r\n    /// @param pid The index of the pool. See `poolInfo`.\r\n    /// @param amount LP token amount to withdraw.\r\n    /// @param to Receiver of the LP tokens and SADDLE rewards.\r\n    function withdrawAndHarvest(\r\n        uint256 pid,\r\n        uint256 amount,\r\n        address to\r\n    ) public {\r\n        PoolInfo memory pool = updatePool(pid);\r\n        UserInfo storage user = userInfo[pid][msg.sender];\r\n        int256 accumulatedSaddle = int256(\r\n            user.amount.mul(pool.accSaddlePerShare) / ACC_SADDLE_PRECISION\r\n        );\r\n        uint256 _pendingSaddle = accumulatedSaddle\r\n            .sub(user.rewardDebt)\r\n            .toUInt256();\r\n\r\n        // Effects\r\n        user.rewardDebt = accumulatedSaddle.sub(\r\n            int256(amount.mul(pool.accSaddlePerShare) / ACC_SADDLE_PRECISION)\r\n        );\r\n        user.amount = user.amount.sub(amount);\r\n\r\n        // Interactions\r\n        SADDLE.safeTransfer(to, _pendingSaddle);\r\n\r\n        IRewarder _rewarder = rewarder[pid];\r\n        if (address(_rewarder) != address(0)) {\r\n            _rewarder.onSaddleReward(\r\n                pid,\r\n                msg.sender,\r\n                to,\r\n                _pendingSaddle,\r\n                user.amount\r\n            );\r\n        }\r\n\r\n        lpToken[pid].safeTransfer(to, amount);\r\n\r\n        emit Withdraw(msg.sender, pid, amount, to);\r\n        emit Harvest(msg.sender, pid, _pendingSaddle);\r\n    }\r\n\r\n    /// @notice Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    /// @param pid The index of the pool. See `poolInfo`.\r\n    /// @param to Receiver of the LP tokens.\r\n    function emergencyWithdraw(uint256 pid, address to) public {\r\n        UserInfo storage user = userInfo[pid][msg.sender];\r\n        uint256 amount = user.amount;\r\n        user.amount = 0;\r\n        user.rewardDebt = 0;\r\n\r\n        IRewarder _rewarder = rewarder[pid];\r\n        if (address(_rewarder) != address(0)) {\r\n            _rewarder.onSaddleReward(pid, msg.sender, to, 0, 0);\r\n        }\r\n\r\n        // Note: transfer can fail or succeed if `amount` is zero.\r\n        lpToken[pid].safeTransfer(to, amount);\r\n        emit EmergencyWithdraw(msg.sender, pid, amount, to);\r\n    }\r\n}\r\n"
    },
    "@boringcrypto/boring-solidity-e06e943/contracts/libraries/BoringMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n// a library for performing overflow-safe math, updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math)\r\nlibrary BoringMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {require((c = a + b) >= b, \"BoringMath: Add Overflow\");}\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {require((c = a - b) <= a, \"BoringMath: Underflow\");}\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {require(b == 0 || (c = a * b)/b == a, \"BoringMath: Mul Overflow\");}\r\n    function to128(uint256 a) internal pure returns (uint128 c) {\r\n        require(a <= uint128(-1), \"BoringMath: uint128 Overflow\");\r\n        c = uint128(a);\r\n    }\r\n    function to64(uint256 a) internal pure returns (uint64 c) {\r\n        require(a <= uint64(-1), \"BoringMath: uint64 Overflow\");\r\n        c = uint64(a);\r\n    }\r\n    function to32(uint256 a) internal pure returns (uint32 c) {\r\n        require(a <= uint32(-1), \"BoringMath: uint32 Overflow\");\r\n        c = uint32(a);\r\n    }\r\n}\r\n\r\nlibrary BoringMath128 {\r\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {require((c = a + b) >= b, \"BoringMath: Add Overflow\");}\r\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {require((c = a - b) <= a, \"BoringMath: Underflow\");}\r\n}\r\n\r\nlibrary BoringMath64 {\r\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {require((c = a + b) >= b, \"BoringMath: Add Overflow\");}\r\n    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {require((c = a - b) <= a, \"BoringMath: Underflow\");}\r\n}\r\n\r\nlibrary BoringMath32 {\r\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {require((c = a + b) >= b, \"BoringMath: Add Overflow\");}\r\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {require((c = a - b) <= a, \"BoringMath: Underflow\");}\r\n}"
    },
    "@boringcrypto/boring-solidity-e06e943/contracts/BoringBatchable.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\n// Audit on 5-Jan-2021 by Keno and BoringCrypto\r\n\r\n// P1 - P3: OK\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n// solhint-disable avoid-low-level-calls\r\n\r\nimport \"./libraries/BoringERC20.sol\";\r\n\r\n// T1 - T4: OK\r\ncontract BaseBoringBatchable {\r\n    function _getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\r\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\r\n        if (_returnData.length < 68) return \"Transaction reverted silently\";\r\n\r\n        assembly {\r\n            // Slice the sighash.\r\n            _returnData := add(_returnData, 0x04)\r\n        }\r\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\r\n    }    \r\n    \r\n    // F3 - F9: OK\r\n    // F1: External is ok here because this is the batch function, adding it to a batch makes no sense\r\n    // F2: Calls in the batch may be payable, delegatecall operates in the same context, so each call in the batch has access to msg.value\r\n    // C1 - C21: OK\r\n    // C3: The length of the loop is fully under user control, so can't be exploited\r\n    // C7: Delegatecall is only used on the same contract, so it's safe\r\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable returns(bool[] memory successes, bytes[] memory results) {\r\n        // Interactions\r\n        successes = new bool[](calls.length);\r\n        results = new bytes[](calls.length);\r\n        for (uint256 i = 0; i < calls.length; i++) {\r\n            (bool success, bytes memory result) = address(this).delegatecall(calls[i]);\r\n            require(success || !revertOnFail, _getRevertMsg(result));\r\n            successes[i] = success;\r\n            results[i] = result;\r\n        }\r\n    }\r\n}\r\n\r\n// T1 - T4: OK\r\ncontract BoringBatchable is BaseBoringBatchable {\r\n    // F1 - F9: OK\r\n    // F6: Parameters can be used front-run the permit and the user's permit will fail (due to nonce or other revert)\r\n    //     if part of a batch this could be used to grief once as the second call would not need the permit\r\n    // C1 - C21: OK\r\n    function permitToken(IERC20 token, address from, address to, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\r\n        // Interactions\r\n        // X1 - X5\r\n        token.permit(from, to, amount, deadline, v, r, s);\r\n    }\r\n}"
    },
    "@boringcrypto/boring-solidity-e06e943/contracts/BoringOwnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// Audit on 5-Jan-2021 by Keno and BoringCrypto\r\n\r\n// P1 - P3: OK\r\npragma solidity 0.6.12;\r\n\r\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\r\n// Edited by BoringCrypto\r\n\r\n// T1 - T4: OK\r\ncontract BoringOwnableData {\r\n    // V1 - V5: OK\r\n    address public owner;\r\n    // V1 - V5: OK\r\n    address public pendingOwner;\r\n}\r\n\r\n// T1 - T4: OK\r\ncontract BoringOwnable is BoringOwnableData {\r\n    // E1: OK\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () public {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    // F1 - F9: OK\r\n    // C1 - C21: OK\r\n    function transferOwnership(address newOwner, bool direct, bool renounce) public onlyOwner {\r\n        if (direct) {\r\n            // Checks\r\n            require(newOwner != address(0) || renounce, \"Ownable: zero address\");\r\n\r\n            // Effects\r\n            emit OwnershipTransferred(owner, newOwner);\r\n            owner = newOwner;\r\n            pendingOwner = address(0);\r\n        } else {\r\n            // Effects\r\n            pendingOwner = newOwner;\r\n        }\r\n    }\r\n\r\n    // F1 - F9: OK\r\n    // C1 - C21: OK\r\n    function claimOwnership() public {\r\n        address _pendingOwner = pendingOwner;\r\n        \r\n        // Checks\r\n        require(msg.sender == _pendingOwner, \"Ownable: caller != pending owner\");\r\n\r\n        // Effects\r\n        emit OwnershipTransferred(owner, _pendingOwner);\r\n        owner = _pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n\r\n    // M1 - M5: OK\r\n    // C1 - C21: OK\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n}"
    },
    "contracts/libraries/SignedSafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\nlibrary SignedSafeMath {\r\n    int256 private constant _INT256_MIN = -2**255;\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two signed integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        require(\r\n            !(a == -1 && b == _INT256_MIN),\r\n            \"SignedSafeMath: multiplication overflow\"\r\n        );\r\n\r\n        int256 c = a * b;\r\n        require(c / a == b, \"SignedSafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two signed integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        require(b != 0, \"SignedSafeMath: division by zero\");\r\n        require(\r\n            !(b == -1 && a == _INT256_MIN),\r\n            \"SignedSafeMath: division overflow\"\r\n        );\r\n\r\n        int256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two signed integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require(\r\n            (b >= 0 && c <= a) || (b < 0 && c > a),\r\n            \"SignedSafeMath: subtraction overflow\"\r\n        );\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two signed integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require(\r\n            (b >= 0 && c >= a) || (b < 0 && c < a),\r\n            \"SignedSafeMath: addition overflow\"\r\n        );\r\n\r\n        return c;\r\n    }\r\n\r\n    function toUInt256(int256 a) internal pure returns (uint256) {\r\n        require(a >= 0, \"Integer < 0\");\r\n        return uint256(a);\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IRewarder.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\nimport \"@boringcrypto/boring-solidity-e06e943/contracts/libraries/BoringERC20.sol\";\r\n\r\ninterface IRewarder {\r\n    using BoringERC20 for IERC20;\r\n\r\n    function onSaddleReward(\r\n        uint256 pid,\r\n        address user,\r\n        address recipient,\r\n        uint256 saddleAmount,\r\n        uint256 newLpAmount\r\n    ) external;\r\n\r\n    function pendingTokens(\r\n        uint256 pid,\r\n        address user,\r\n        uint256 saddleAmount\r\n    ) external view returns (IERC20[] memory, uint256[] memory);\r\n}\r\n"
    },
    "contracts/rewards/SimpleRewarder.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"@boringcrypto/boring-solidity-e06e943/contracts/libraries/BoringERC20.sol\";\r\nimport \"@boringcrypto/boring-solidity-e06e943/contracts/libraries/BoringMath.sol\";\r\nimport \"@boringcrypto/boring-solidity-e06e943/contracts/BoringOwnable.sol\";\r\nimport \"../interfaces/IRewarder.sol\";\r\n\r\ninterface IMiniChef {\r\n    function lpToken(uint256 pid) external view returns (IERC20 _lpToken);\r\n}\r\n\r\n/**\r\n * @title SimpleRewarder\r\n * @notice Rewarder contract that can add one additional reward token to a specific PID in MiniChef.\r\n * Emission rate is controlled by the owner of this contract, independently from MiniChef's owner.\r\n * @author @0xKeno @weeb_mcgee\r\n */\r\ncontract SimpleRewarder is IRewarder, BoringOwnable {\r\n    using BoringMath for uint256;\r\n    using BoringMath128 for uint128;\r\n    using BoringERC20 for IERC20;\r\n\r\n    uint256 private constant ACC_TOKEN_PRECISION = 1e12;\r\n\r\n    /// @notice Info of each Rewarder user.\r\n    /// `amount` LP token amount the user has provided.\r\n    /// `rewardDebt` The amount of Reward Token entitled to the user.\r\n    struct UserInfo {\r\n        uint256 amount;\r\n        uint256 rewardDebt;\r\n    }\r\n\r\n    /// @notice Info of the rewarder pool\r\n    struct PoolInfo {\r\n        uint128 accToken1PerShare;\r\n        uint64 lastRewardTime;\r\n    }\r\n\r\n    /// @notice Address of the token that should be given out as rewards.\r\n    IERC20 public rewardToken;\r\n\r\n    /// @notice Var to track the rewarder pool.\r\n    PoolInfo public poolInfo;\r\n\r\n    /// @notice Info of each user that stakes LP tokens.\r\n    mapping(address => UserInfo) public userInfo;\r\n\r\n    /// @notice Total emission rate of the reward token per second\r\n    uint256 public rewardPerSecond;\r\n    /// @notice Address of the lp token that should be incentivized\r\n    IERC20 public masterLpToken;\r\n    /// @notice PID in MiniChef that corresponds to masterLpToken\r\n    uint256 public pid;\r\n\r\n    /// @notice MiniChef contract that will call this contract's callback function\r\n    address public immutable MINICHEF;\r\n\r\n    event LogOnReward(\r\n        address indexed user,\r\n        uint256 indexed pid,\r\n        uint256 amount,\r\n        address indexed to\r\n    );\r\n    event LogUpdatePool(\r\n        uint256 indexed pid,\r\n        uint64 lastRewardTime,\r\n        uint256 lpSupply,\r\n        uint256 accToken1PerShare\r\n    );\r\n    event LogRewardPerSecond(uint256 rewardPerSecond);\r\n    event LogInit(\r\n        IERC20 indexed rewardToken,\r\n        address owner,\r\n        uint256 rewardPerSecond,\r\n        IERC20 indexed masterLpToken\r\n    );\r\n\r\n    /**\r\n     * @notice Deploys this contract and sets immutable MiniChef address.\r\n     */\r\n    constructor(address _MINICHEF) public {\r\n        MINICHEF = _MINICHEF;\r\n    }\r\n\r\n    /**\r\n     * @notice Modifier to restrict caller to be only MiniChef\r\n     */\r\n    modifier onlyMiniChef() {\r\n        require(msg.sender == MINICHEF, \"Rewarder: caller is not MiniChef\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Serves as the constructor for clones, as clones can't have a regular constructor.\r\n     * Initializes state variables with the given parameter.\r\n     * @param data abi encoded data in format of (IERC20 rewardToken, address owner, uint256 rewardPerSecond, IERC20 masterLpToken, uint256 pid).\r\n     */\r\n    function init(bytes calldata data) public payable {\r\n        require(rewardToken == IERC20(0), \"Rewarder: already initialized\");\r\n        address _owner;\r\n        (rewardToken, _owner, rewardPerSecond, masterLpToken, pid) = abi.decode(\r\n            data,\r\n            (IERC20, address, uint256, IERC20, uint256)\r\n        );\r\n        require(rewardToken != IERC20(0), \"Rewarder: bad rewardToken\");\r\n        require(\r\n            IMiniChef(MINICHEF).lpToken(pid) == masterLpToken,\r\n            \"Rewarder: bad pid or masterLpToken\"\r\n        );\r\n        transferOwnership(_owner, true, false);\r\n        emit LogInit(rewardToken, _owner, rewardPerSecond, masterLpToken);\r\n    }\r\n\r\n    /**\r\n     * @notice Callback function for when the user claims via the MiniChef contract.\r\n     * @param _pid PID of the pool it was called for\r\n     * @param _user address of the user who is claiming rewards\r\n     * @param to address to send the reward token to\r\n     * @param lpTokenAmount amount of total lp tokens that the user has it staked\r\n     */\r\n    function onSaddleReward(\r\n        uint256 _pid,\r\n        address _user,\r\n        address to,\r\n        uint256,\r\n        uint256 lpTokenAmount\r\n    ) external override onlyMiniChef {\r\n        require(pid == _pid, \"Rewarder: bad pid init\");\r\n\r\n        PoolInfo memory pool = updatePool();\r\n        UserInfo storage user = userInfo[_user];\r\n        uint256 pending;\r\n        if (user.amount > 0) {\r\n            pending = (user.amount.mul(pool.accToken1PerShare) /\r\n                ACC_TOKEN_PRECISION).sub(user.rewardDebt);\r\n            rewardToken.safeTransfer(to, pending);\r\n        }\r\n        user.amount = lpTokenAmount;\r\n        user.rewardDebt =\r\n            lpTokenAmount.mul(pool.accToken1PerShare) /\r\n            ACC_TOKEN_PRECISION;\r\n        emit LogOnReward(_user, pid, pending, to);\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the reward token per second to be distributed. Can only be called by the owner.\r\n     * @param _rewardPerSecond The amount of reward token to be distributed per second.\r\n     */\r\n    function setRewardPerSecond(uint256 _rewardPerSecond) public onlyOwner {\r\n        rewardPerSecond = _rewardPerSecond;\r\n        emit LogRewardPerSecond(_rewardPerSecond);\r\n    }\r\n\r\n    /**\r\n     * @notice View function to see pending rewards for given address\r\n     * @param _user Address of user.\r\n     * @return pending reward for a given user.\r\n     */\r\n    function pendingToken(address _user) public view returns (uint256 pending) {\r\n        PoolInfo memory pool = poolInfo;\r\n        UserInfo storage user = userInfo[_user];\r\n        uint256 accToken1PerShare = pool.accToken1PerShare;\r\n        uint256 lpSupply = IMiniChef(MINICHEF).lpToken(pid).balanceOf(MINICHEF);\r\n        if (block.timestamp > pool.lastRewardTime && lpSupply != 0) {\r\n            uint256 time = block.timestamp.sub(pool.lastRewardTime);\r\n            uint256 reward = time.mul(rewardPerSecond);\r\n            accToken1PerShare = accToken1PerShare.add(\r\n                reward.mul(ACC_TOKEN_PRECISION) / lpSupply\r\n            );\r\n        }\r\n        pending = (user.amount.mul(accToken1PerShare) / ACC_TOKEN_PRECISION)\r\n            .sub(user.rewardDebt);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns pending reward tokens addresses and reward amounts for given address.\r\n     * @dev Since SimpleRewarder supports only one additional reward, the returning arrays will only have one element.\r\n     * @param user address of the user\r\n     * @return rewardTokens array of reward tokens' addresses\r\n     * @return rewardAmounts array of reward tokens' amounts\r\n     */\r\n    function pendingTokens(\r\n        uint256,\r\n        address user,\r\n        uint256\r\n    )\r\n        external\r\n        view\r\n        override\r\n        returns (IERC20[] memory rewardTokens, uint256[] memory rewardAmounts)\r\n    {\r\n        IERC20[] memory _rewardTokens = new IERC20[](1);\r\n        _rewardTokens[0] = (rewardToken);\r\n        uint256[] memory _rewardAmounts = new uint256[](1);\r\n        _rewardAmounts[0] = pendingToken(user);\r\n        return (_rewardTokens, _rewardAmounts);\r\n    }\r\n\r\n    /**\r\n     * @notice Updates the stored rate of emission per share since the last time this function was called.\r\n     * @dev This is called whenever `onSaddleReward` is called to ensure the rewards are given out with the\r\n     * correct emission rate.\r\n     */\r\n    function updatePool() public returns (PoolInfo memory pool) {\r\n        pool = poolInfo;\r\n        if (block.timestamp > pool.lastRewardTime) {\r\n            uint256 lpSupply = IMiniChef(MINICHEF).lpToken(pid).balanceOf(\r\n                MINICHEF\r\n            );\r\n\r\n            if (lpSupply > 0) {\r\n                uint256 time = block.timestamp.sub(pool.lastRewardTime);\r\n                uint256 reward = time.mul(rewardPerSecond);\r\n                pool.accToken1PerShare = pool.accToken1PerShare.add(\r\n                    (reward.mul(ACC_TOKEN_PRECISION) / lpSupply).to128()\r\n                );\r\n            }\r\n            pool.lastRewardTime = block.timestamp.to64();\r\n            poolInfo = pool;\r\n            emit LogUpdatePool(\r\n                pid,\r\n                pool.lastRewardTime,\r\n                lpSupply,\r\n                pool.accToken1PerShare\r\n            );\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 10000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}