{
  "address": "0x5dD186f8809147F96D3ffC4508F3C82694E58c9c",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "minToMint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseSwap",
      "outputs": [
        {
          "internalType": "contract ISwapV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "baseTokens",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "calculateRemoveLiquidity",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndex",
          "type": "uint8"
        }
      ],
      "name": "calculateRemoveLiquidityOneToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "tokenIndexFrom",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexTo",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        }
      ],
      "name": "calculateSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "deposit",
          "type": "bool"
        }
      ],
      "name": "calculateTokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "index",
          "type": "uint8"
        }
      ],
      "name": "getToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISwapV2",
          "name": "_baseSwap",
          "type": "address"
        },
        {
          "internalType": "contract IMetaSwapV1",
          "name": "_metaSwap",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_metaLPToken",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metaLPToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metaSwap",
      "outputs": [
        {
          "internalType": "contract IMetaSwapV1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "metaTokens",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "minAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "maxBurnAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityImbalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndex",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "minAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityOneToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "tokenIndexFrom",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexTo",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minDy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa1edfbfb69aee5519a1a3c892441c46f776a4e936585602bc6f0c28d5ad184c1",
  "receipt": {
    "to": null,
    "from": "0x5BDb37d0Ddea3A90F233c7B7F6b9394B6b2eef34",
    "contractAddress": "0x5dD186f8809147F96D3ffC4508F3C82694E58c9c",
    "transactionIndex": 1,
    "gasUsed": "3134667",
    "logsBloom": "0x
    "blockHash": "0x433032d767a043c2c86d0efb91a67d4714490c41c45373d6534efaf54426c74c",
    "transactionHash": "0xa1edfbfb69aee5519a1a3c892441c46f776a4e936585602bc6f0c28d5ad184c1",
    "logs": [],
    "blockNumber": 2717068,
    "cumulativeGasUsed": "3134667",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "faeaaf1f06e012c3200d7f368f424bd7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minToMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseSwap\",\"outputs\":[{\"internalType\":\"contract ISwapV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"baseTokens\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateRemoveLiquidity\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndex\",\"type\":\"uint8\"}],\"name\":\"calculateRemoveLiquidityOneToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"}],\"name\":\"calculateSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"deposit\",\"type\":\"bool\"}],\"name\":\"calculateTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISwapV2\",\"name\":\"_baseSwap\",\"type\":\"address\"},{\"internalType\":\"contract IMetaSwapV1\",\"name\":\"_metaSwap\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_metaLPToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metaLPToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metaSwap\",\"outputs\":[{\"internalType\":\"contract IMetaSwapV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"metaTokens\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"maxBurnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityImbalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityOneToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addLiquidity(uint256[],uint256,uint256)\":{\"params\":{\"amounts\":\"the amounts of each token to add, in their native precision\",\"deadline\":\"latest timestamp to accept this transaction\",\"minToMint\":\"the minimum LP tokens adding this amount of liquidity should mint, otherwise revert. Handy for front-running mitigation\"},\"returns\":{\"_0\":\"amount of LP token user minted and received\"}},\"calculateRemoveLiquidity(uint256)\":{\"params\":{\"amount\":\"the amount of LP tokens that would be burned on withdrawal\"},\"returns\":{\"_0\":\"array of token balances that the user will receive\"}},\"calculateRemoveLiquidityOneToken(uint256,uint8)\":{\"params\":{\"tokenAmount\":\"the amount of LP token to burn\",\"tokenIndex\":\"index of which token will be withdrawn\"},\"returns\":{\"_0\":\"availableTokenAmount calculated amount of underlying token available to withdraw\"}},\"calculateSwap(uint8,uint8,uint256)\":{\"params\":{\"dx\":\"the amount of tokens the user wants to sell. If the token charges a fee on transfers, use the amount that gets transferred after the fee.\",\"tokenIndexFrom\":\"the token the user wants to sell\",\"tokenIndexTo\":\"the token the user wants to buy\"},\"returns\":{\"_0\":\"amount of tokens the user will receive\"}},\"calculateTokenAmount(uint256[],bool)\":{\"details\":\"This shouldn't be used outside frontends for user estimates.\",\"params\":{\"amounts\":\"an array of token amounts to deposit or withdrawal, corresponding to pooledTokens. The amount should be in each pooled token's native precision. If a token charges a fee on transfers, use the amount that gets transferred after the fee.\",\"deposit\":\"whether this is a deposit or a withdrawal\"},\"returns\":{\"_0\":\"token amount the user will receive\"}},\"getToken(uint8)\":{\"params\":{\"index\":\"the index of the token\"},\"returns\":{\"_0\":\"address of the token at given index\"}},\"initialize(address,address,address)\":{\"params\":{\"_baseSwap\":\"the address of the base Swap contract\",\"_metaLPToken\":\"the address of the MetaSwap LP token contract\",\"_metaSwap\":\"the address of the MetaSwap contract\"}},\"removeLiquidity(uint256,uint256[],uint256)\":{\"details\":\"Liquidity can always be removed, even when the pool is paused.\",\"params\":{\"amount\":\"the amount of LP tokens to burn\",\"deadline\":\"latest timestamp to accept this transaction\",\"minAmounts\":\"the minimum amounts of each token in the pool        acceptable for this burn. Useful as a front-running mitigation\"},\"returns\":{\"_0\":\"amounts of tokens user received\"}},\"removeLiquidityImbalance(uint256[],uint256,uint256)\":{\"params\":{\"amounts\":\"how much of each token to withdraw\",\"deadline\":\"latest timestamp to accept this transaction\",\"maxBurnAmount\":\"the max LP token provider is willing to pay to remove liquidity. Useful as a front-running mitigation.\"},\"returns\":{\"_0\":\"amount of LP tokens burned\"}},\"removeLiquidityOneToken(uint256,uint8,uint256,uint256)\":{\"params\":{\"deadline\":\"latest timestamp to accept this transaction\",\"minAmount\":\"the minimum amount to withdraw, otherwise revert\",\"tokenAmount\":\"the amount of the token you want to receive\",\"tokenIndex\":\"the index of the token you want to receive\"},\"returns\":{\"_0\":\"amount of chosen token user received\"}},\"swap(uint8,uint8,uint256,uint256,uint256)\":{\"params\":{\"deadline\":\"latest timestamp to accept this transaction\",\"dx\":\"the amount of tokens the user wants to swap from\",\"minDy\":\"the min amount the user would like to receive, or revert.\",\"tokenIndexFrom\":\"the token the user wants to swap from\",\"tokenIndexTo\":\"the token the user wants to swap to\"}}},\"title\":\"MetaSwapDeposit\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLiquidity(uint256[],uint256,uint256)\":{\"notice\":\"Add liquidity to the pool with the given amounts of tokens\"},\"calculateRemoveLiquidity(uint256)\":{\"notice\":\"A simple method to calculate amount of each underlying tokens that is returned upon burning given amount of LP tokens\"},\"calculateRemoveLiquidityOneToken(uint256,uint8)\":{\"notice\":\"Calculate the amount of underlying token available to withdraw when withdrawing via only single token\"},\"calculateSwap(uint8,uint8,uint256)\":{\"notice\":\"Calculate amount of tokens you receive on swap\"},\"calculateTokenAmount(uint256[],bool)\":{\"notice\":\"A simple method to calculate prices from deposits or withdrawals, excluding fees but including slippage. This is helpful as an input into the various \\\"min\\\" parameters on calls to fight front-running. When withdrawing from the base pool in imbalanced fashion, the recommended slippage setting is 0.2% or higher.\"},\"getToken(uint8)\":{\"notice\":\"Returns the address of the pooled token at given index. Reverts if tokenIndex is out of range. This is a flattened representation of the pooled tokens.\"},\"initialize(address,address,address)\":{\"notice\":\"Sets the address for the base Swap contract, MetaSwap contract, and the MetaSwap LP token contract.\"},\"removeLiquidity(uint256,uint256[],uint256)\":{\"notice\":\"Burn LP tokens to remove liquidity from the pool. Withdraw fee that decays linearly over period of 4 weeks since last deposit will apply.\"},\"removeLiquidityImbalance(uint256[],uint256,uint256)\":{\"notice\":\"Remove liquidity from the pool, weighted differently than the pool's current balances. Withdraw fee that decays linearly over period of 4 weeks since last deposit will apply.\"},\"removeLiquidityOneToken(uint256,uint8,uint256,uint256)\":{\"notice\":\"Remove liquidity from the pool all in one token. Withdraw fee that decays linearly over period of 4 weeks since last deposit will apply.\"},\"swap(uint8,uint8,uint256,uint256,uint256)\":{\"notice\":\"Swap two underlying tokens using the meta pool and the base pool\"}},\"notice\":\"This contract flattens the LP token in a MetaSwap pool for easier user access. MetaSwap must be deployed before this contract can be initialized successfully. For example, suppose there exists a base Swap pool consisting of [DAI, USDC, USDT]. Then a MetaSwap pool can be created with [sUSD, BaseSwapLPToken] to allow trades between either the LP token or the underlying tokens and sUSD. MetaSwapDeposit flattens the LP token and remaps them to a single array, allowing users to ignore the dependency on BaseSwapLPToken. Using the above example, MetaSwapDeposit can act as a Swap containing [sUSD, DAI, USDC, USDT] tokens.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/meta/MetaSwapDepositV1.sol\":\"MetaSwapDepositV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-4.7.3/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.7.3/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.7.3/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.7.3/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.7.3/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.7.3/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.7.3/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-4.7.3/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-4.7.3/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-4.7.3/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-4.7.3/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x7c7ac0bc6c340a7f320524b9a4b4b079ee9da3c51258080d4bab237f329a427c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-4.7.3/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-4.7.3/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\\n    function __ERC20Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC20Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xea2c6f9d434127bf36b1e3e5ebaaf6d28a64dbaeea560508e570014e905a5ad2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-4.7.3/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-4.7.3/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-4.7.3/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/LPTokenV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable-4.7.3/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable-4.7.3/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./interfaces/ISwapV2.sol\\\";\\n\\n/**\\n * @title Liquidity Provider Token\\n * @notice This token is an ERC20 detailed token with added capability to be minted by the owner.\\n * It is used to represent user's shares when providing liquidity to swap contracts.\\n * @dev Only Swap contracts should initialize and own LPToken contracts.\\n */\\ncontract LPTokenV2 is ERC20BurnableUpgradeable, OwnableUpgradeable {\\n    /**\\n     * @notice Initializes this LPToken contract with the given name and symbol\\n     * @dev The caller of this function will become the owner. A Swap contract should call this\\n     * in its initializer function.\\n     * @param name name of this token\\n     * @param symbol symbol of this token\\n     */\\n    function initialize(string memory name, string memory symbol)\\n        external\\n        initializer\\n        returns (bool)\\n    {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name, symbol);\\n        __Ownable_init_unchained();\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Mints the given amount of LPToken to the recipient.\\n     * @dev only owner can call this mint function\\n     * @param recipient address of account to receive the tokens\\n     * @param amount amount of tokens to mint\\n     */\\n    function mint(address recipient, uint256 amount) external onlyOwner {\\n        require(amount != 0, \\\"LPToken: cannot mint 0\\\");\\n        _mint(recipient, amount);\\n    }\\n\\n    /**\\n     * @dev Overrides ERC20._beforeTokenTransfer() which get called on every transfers including\\n     * minting and burning. This ensures that Swap.updateUserWithdrawFees are called everytime.\\n     * This assumes the owner is set to a Swap contract's address.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override(ERC20Upgradeable) {\\n        super._beforeTokenTransfer(from, to, amount);\\n        require(to != address(this), \\\"LPToken: cannot send to itself\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x131705fde9652556cbc06ca58ff86a3f65ce02365e210b9820a8a93195ac35ec\",\"license\":\"MIT\"},\"contracts/interfaces/IAllowlistV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IAllowlistV1 {\\n    function getPoolAccountLimit(address poolAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getPoolCap(address poolAddress) external view returns (uint256);\\n\\n    function verifyAddress(address account, bytes32[] calldata merkleProof)\\n        external\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0xe789ec166e4b0827a94894104dc0a9ac99b2f6412a29841c851a5f794db9de57\",\"license\":\"MIT\"},\"contracts/interfaces/IMetaSwapV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-4.7.3/token/ERC20/ERC20.sol\\\";\\nimport \\\"./ISwapV2.sol\\\";\\n\\ninterface IMetaSwapV1 {\\n    // pool data view functions\\n    function getA() external view returns (uint256);\\n\\n    function getToken(uint8 index) external view returns (IERC20);\\n\\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\\n\\n    function getTokenBalance(uint8 index) external view returns (uint256);\\n\\n    function getVirtualPrice() external view returns (uint256);\\n\\n    function isGuarded() external view returns (bool);\\n\\n    function metaSwapStorage()\\n        external\\n        view\\n        returns (\\n            address baseSwap,\\n            uint256 baseVirtualPrice,\\n            uint256 baseCacheLastUpdated\\n        );\\n\\n    // min return calculation functions\\n    function calculateSwap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calculateSwapUnderlying(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calculateRemoveLiquidity(uint256 amount)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function calculateRemoveLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex\\n    ) external view returns (uint256 availableTokenAmount);\\n\\n    // state modifying functions\\n    function initialize(\\n        IERC20[] memory _pooledTokens,\\n        uint8[] memory decimals,\\n        string memory lpTokenName,\\n        string memory lpTokenSymbol,\\n        uint256 _a,\\n        uint256 _fee,\\n        uint256 _adminFee,\\n        address lpTokenTargetAddress\\n    ) external;\\n\\n    function initializeMetaSwap(\\n        IERC20[] memory _pooledTokens,\\n        uint8[] memory decimals,\\n        string memory lpTokenName,\\n        string memory lpTokenSymbol,\\n        uint256 _a,\\n        uint256 _fee,\\n        uint256 _adminFee,\\n        address lpTokenTargetAddress,\\n        ISwapV2 baseSwap\\n    ) external;\\n\\n    function swap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function swapUnderlying(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function addLiquidity(\\n        uint256[] calldata amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256[] calldata minAmounts,\\n        uint256 deadline\\n    ) external returns (uint256[] memory);\\n\\n    function removeLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidityImbalance(\\n        uint256[] calldata amounts,\\n        uint256 maxBurnAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xff2475aa3a8950d48535ac9af8f4d6ffe49ebfea1928852424149e711e158e0c\",\"license\":\"MIT\"},\"contracts/interfaces/ISwapV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-4.7.3/token/ERC20/ERC20.sol\\\";\\nimport \\\"./IAllowlistV1.sol\\\";\\n\\ninterface ISwapV2 {\\n    // pool data view functions\\n    function getA() external view returns (uint256);\\n\\n    function getAPrecise() external view returns (uint256);\\n\\n    function getAllowlist() external view returns (IAllowlistV1);\\n\\n    function getToken(uint8 index) external view returns (IERC20);\\n\\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\\n\\n    function getTokenBalance(uint8 index) external view returns (uint256);\\n\\n    function getVirtualPrice() external view returns (uint256);\\n\\n    function owner() external view returns (address);\\n\\n    function isGuarded() external view returns (bool);\\n\\n    function paused() external view returns (bool);\\n\\n    function swapStorage()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            address\\n        );\\n\\n    // min return calculation functions\\n    function calculateSwap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calculateRemoveLiquidity(uint256 amount)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function calculateRemoveLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex\\n    ) external view returns (uint256 availableTokenAmount);\\n\\n    // state modifying functions\\n    function initialize(\\n        IERC20[] memory pooledTokens,\\n        uint8[] memory decimals,\\n        string memory lpTokenName,\\n        string memory lpTokenSymbol,\\n        uint256 a,\\n        uint256 fee,\\n        uint256 adminFee,\\n        address lpTokenTargetAddress\\n    ) external;\\n\\n    function swap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function addLiquidity(\\n        uint256[] calldata amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256[] calldata minAmounts,\\n        uint256 deadline\\n    ) external returns (uint256[] memory);\\n\\n    function removeLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidityImbalance(\\n        uint256[] calldata amounts,\\n        uint256 maxBurnAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xfa36e88ed32dff2507fe11112ee47d4bf05784a28286ffff4f55b1b9f19f16f8\",\"license\":\"MIT\"},\"contracts/meta/MetaSwapDepositV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-4.7.3/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable-4.7.3/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable-4.7.3/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"../LPTokenV2.sol\\\";\\nimport \\\"../interfaces/ISwapV2.sol\\\";\\nimport \\\"../interfaces/IMetaSwapV1.sol\\\";\\n\\n/**\\n * @title MetaSwapDeposit\\n * @notice This contract flattens the LP token in a MetaSwap pool for easier user access. MetaSwap must be\\n * deployed before this contract can be initialized successfully.\\n *\\n * For example, suppose there exists a base Swap pool consisting of [DAI, USDC, USDT].\\n * Then a MetaSwap pool can be created with [sUSD, BaseSwapLPToken] to allow trades between either\\n * the LP token or the underlying tokens and sUSD.\\n *\\n * MetaSwapDeposit flattens the LP token and remaps them to a single array, allowing users\\n * to ignore the dependency on BaseSwapLPToken. Using the above example, MetaSwapDeposit can act\\n * as a Swap containing [sUSD, DAI, USDC, USDT] tokens.\\n */\\ncontract MetaSwapDepositV1 is Initializable, ReentrancyGuardUpgradeable {\\n    using SafeERC20 for IERC20;\\n\\n    ISwapV2 public baseSwap;\\n    IMetaSwapV1 public metaSwap;\\n    IERC20[] public baseTokens;\\n    IERC20[] public metaTokens;\\n    IERC20[] public tokens;\\n    IERC20 public metaLPToken;\\n\\n    uint256 constant MAX_UINT256 = 2**256 - 1;\\n\\n    struct RemoveLiquidityImbalanceInfo {\\n        ISwapV2 baseSwap;\\n        IMetaSwapV1 metaSwap;\\n        IERC20 metaLPToken;\\n        uint8 baseLPTokenIndex;\\n        bool withdrawFromBase;\\n        uint256 leftoverMetaLPTokenAmount;\\n    }\\n\\n    /**\\n     * @notice Sets the address for the base Swap contract, MetaSwap contract, and the\\n     * MetaSwap LP token contract.\\n     * @param _baseSwap the address of the base Swap contract\\n     * @param _metaSwap the address of the MetaSwap contract\\n     * @param _metaLPToken the address of the MetaSwap LP token contract\\n     */\\n    function initialize(\\n        ISwapV2 _baseSwap,\\n        IMetaSwapV1 _metaSwap,\\n        IERC20 _metaLPToken\\n    ) external initializer {\\n        __ReentrancyGuard_init();\\n        // Check and approve base level tokens to be deposited to the base Swap contract\\n        {\\n            uint8 i;\\n            for (; i < 32; i++) {\\n                try _baseSwap.getToken(i) returns (IERC20 token) {\\n                    baseTokens.push(token);\\n                    token.safeApprove(address(_baseSwap), MAX_UINT256);\\n                    token.safeApprove(address(_metaSwap), MAX_UINT256);\\n                } catch {\\n                    break;\\n                }\\n            }\\n            require(i > 1, \\\"baseSwap must have at least 2 tokens\\\");\\n        }\\n\\n        // Check and approve meta level tokens to be deposited to the MetaSwap contract\\n        IERC20 baseLPToken;\\n        {\\n            uint8 i;\\n            for (; i < 32; i++) {\\n                try _metaSwap.getToken(i) returns (IERC20 token) {\\n                    baseLPToken = token;\\n                    metaTokens.push(token);\\n                    tokens.push(token);\\n                    token.safeApprove(address(_metaSwap), MAX_UINT256);\\n                } catch {\\n                    break;\\n                }\\n            }\\n            require(i > 1, \\\"metaSwap must have at least 2 tokens\\\");\\n        }\\n\\n        // Flatten baseTokens and append it to tokens array\\n        tokens[tokens.length - 1] = baseTokens[0];\\n        for (uint8 i = 1; i < baseTokens.length; i++) {\\n            tokens.push(baseTokens[i]);\\n        }\\n\\n        // Approve base Swap LP token to be burned by the base Swap contract for withdrawing\\n        baseLPToken.safeApprove(address(_baseSwap), MAX_UINT256);\\n        // Approve MetaSwap LP token to be burned by the MetaSwap contract for withdrawing\\n        _metaLPToken.safeApprove(address(_metaSwap), MAX_UINT256);\\n\\n        // Initialize storage variables\\n        baseSwap = _baseSwap;\\n        metaSwap = _metaSwap;\\n        metaLPToken = _metaLPToken;\\n    }\\n\\n    // Mutative functions\\n\\n    /**\\n     * @notice Swap two underlying tokens using the meta pool and the base pool\\n     * @param tokenIndexFrom the token the user wants to swap from\\n     * @param tokenIndexTo the token the user wants to swap to\\n     * @param dx the amount of tokens the user wants to swap from\\n     * @param minDy the min amount the user would like to receive, or revert.\\n     * @param deadline latest timestamp to accept this transaction\\n     */\\n    function swap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external nonReentrant returns (uint256) {\\n        tokens[tokenIndexFrom].safeTransferFrom(msg.sender, address(this), dx);\\n        uint256 tokenToAmount = metaSwap.swapUnderlying(\\n            tokenIndexFrom,\\n            tokenIndexTo,\\n            dx,\\n            minDy,\\n            deadline\\n        );\\n        tokens[tokenIndexTo].safeTransfer(msg.sender, tokenToAmount);\\n        return tokenToAmount;\\n    }\\n\\n    /**\\n     * @notice Add liquidity to the pool with the given amounts of tokens\\n     * @param amounts the amounts of each token to add, in their native precision\\n     * @param minToMint the minimum LP tokens adding this amount of liquidity\\n     * should mint, otherwise revert. Handy for front-running mitigation\\n     * @param deadline latest timestamp to accept this transaction\\n     * @return amount of LP token user minted and received\\n     */\\n    function addLiquidity(\\n        uint256[] calldata amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external nonReentrant returns (uint256) {\\n        // Read to memory to save on gas\\n        IERC20[] memory memBaseTokens = baseTokens;\\n        IERC20[] memory memMetaTokens = metaTokens;\\n        uint256 baseLPTokenIndex = memMetaTokens.length - 1;\\n\\n        require(amounts.length == memBaseTokens.length + baseLPTokenIndex);\\n\\n        uint256 baseLPTokenAmount;\\n        {\\n            // Transfer base tokens from the caller and deposit to the base Swap pool\\n            uint256[] memory baseAmounts = new uint256[](memBaseTokens.length);\\n            bool shouldDepositBaseTokens;\\n            for (uint8 i = 0; i < memBaseTokens.length; i++) {\\n                IERC20 token = memBaseTokens[i];\\n                uint256 depositAmount = amounts[baseLPTokenIndex + i];\\n                if (depositAmount > 0) {\\n                    token.safeTransferFrom(\\n                        msg.sender,\\n                        address(this),\\n                        depositAmount\\n                    );\\n                    baseAmounts[i] = token.balanceOf(address(this)); // account for any fees on transfer\\n                    // if there are any base Swap level tokens, flag it for deposits\\n                    shouldDepositBaseTokens = true;\\n                }\\n            }\\n            if (shouldDepositBaseTokens) {\\n                // Deposit any base Swap level tokens and receive baseLPToken\\n                baseLPTokenAmount = baseSwap.addLiquidity(\\n                    baseAmounts,\\n                    0,\\n                    deadline\\n                );\\n            }\\n        }\\n\\n        uint256 metaLPTokenAmount;\\n        {\\n            // Transfer remaining meta level tokens from the caller\\n            uint256[] memory metaAmounts = new uint256[](metaTokens.length);\\n            for (uint8 i = 0; i < baseLPTokenIndex; i++) {\\n                IERC20 token = memMetaTokens[i];\\n                uint256 depositAmount = amounts[i];\\n                if (depositAmount > 0) {\\n                    token.safeTransferFrom(\\n                        msg.sender,\\n                        address(this),\\n                        depositAmount\\n                    );\\n                    metaAmounts[i] = token.balanceOf(address(this)); // account for any fees on transfer\\n                }\\n            }\\n            // Update the baseLPToken amount that will be deposited\\n            metaAmounts[baseLPTokenIndex] = baseLPTokenAmount;\\n\\n            // Deposit the meta level tokens and the baseLPToken\\n            metaLPTokenAmount = metaSwap.addLiquidity(\\n                metaAmounts,\\n                minToMint,\\n                deadline\\n            );\\n        }\\n\\n        // Transfer the meta lp token to the caller\\n        metaLPToken.safeTransfer(msg.sender, metaLPTokenAmount);\\n\\n        return metaLPTokenAmount;\\n    }\\n\\n    /**\\n     * @notice Burn LP tokens to remove liquidity from the pool. Withdraw fee that decays linearly\\n     * over period of 4 weeks since last deposit will apply.\\n     * @dev Liquidity can always be removed, even when the pool is paused.\\n     * @param amount the amount of LP tokens to burn\\n     * @param minAmounts the minimum amounts of each token in the pool\\n     *        acceptable for this burn. Useful as a front-running mitigation\\n     * @param deadline latest timestamp to accept this transaction\\n     * @return amounts of tokens user received\\n     */\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256[] calldata minAmounts,\\n        uint256 deadline\\n    ) external nonReentrant returns (uint256[] memory) {\\n        IERC20[] memory memBaseTokens = baseTokens;\\n        IERC20[] memory memMetaTokens = metaTokens;\\n        uint256[] memory totalRemovedAmounts;\\n\\n        {\\n            uint256 numOfAllTokens = memBaseTokens.length +\\n                memMetaTokens.length -\\n                1;\\n            require(minAmounts.length == numOfAllTokens, \\\"out of range\\\");\\n            totalRemovedAmounts = new uint256[](numOfAllTokens);\\n        }\\n\\n        // Transfer meta lp token from the caller to this\\n        metaLPToken.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        uint256 baseLPTokenAmount;\\n        {\\n            // Remove liquidity from the MetaSwap pool\\n            uint256[] memory removedAmounts;\\n            uint256 baseLPTokenIndex = memMetaTokens.length - 1;\\n            {\\n                uint256[] memory metaMinAmounts = new uint256[](\\n                    memMetaTokens.length\\n                );\\n                for (uint8 i = 0; i < baseLPTokenIndex; i++) {\\n                    metaMinAmounts[i] = minAmounts[i];\\n                }\\n                removedAmounts = metaSwap.removeLiquidity(\\n                    amount,\\n                    metaMinAmounts,\\n                    deadline\\n                );\\n            }\\n\\n            // Send the meta level tokens to the caller\\n            for (uint8 i = 0; i < baseLPTokenIndex; i++) {\\n                totalRemovedAmounts[i] = removedAmounts[i];\\n                memMetaTokens[i].safeTransfer(msg.sender, removedAmounts[i]);\\n            }\\n            baseLPTokenAmount = removedAmounts[baseLPTokenIndex];\\n\\n            // Remove liquidity from the base Swap pool\\n            {\\n                uint256[] memory baseMinAmounts = new uint256[](\\n                    memBaseTokens.length\\n                );\\n                for (uint8 i = 0; i < baseLPTokenIndex; i++) {\\n                    baseMinAmounts[i] = minAmounts[baseLPTokenIndex + i];\\n                }\\n                removedAmounts = baseSwap.removeLiquidity(\\n                    baseLPTokenAmount,\\n                    baseMinAmounts,\\n                    deadline\\n                );\\n            }\\n\\n            // Send the base level tokens to the caller\\n            for (uint8 i = 0; i < memBaseTokens.length; i++) {\\n                totalRemovedAmounts[baseLPTokenIndex + i] = removedAmounts[i];\\n                memBaseTokens[i].safeTransfer(msg.sender, removedAmounts[i]);\\n            }\\n        }\\n\\n        return totalRemovedAmounts;\\n    }\\n\\n    /**\\n     * @notice Remove liquidity from the pool all in one token. Withdraw fee that decays linearly\\n     * over period of 4 weeks since last deposit will apply.\\n     * @param tokenAmount the amount of the token you want to receive\\n     * @param tokenIndex the index of the token you want to receive\\n     * @param minAmount the minimum amount to withdraw, otherwise revert\\n     * @param deadline latest timestamp to accept this transaction\\n     * @return amount of chosen token user received\\n     */\\n    function removeLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount,\\n        uint256 deadline\\n    ) external nonReentrant returns (uint256) {\\n        uint8 baseLPTokenIndex = uint8(metaTokens.length - 1);\\n        uint8 baseTokensLength = uint8(baseTokens.length);\\n\\n        // Transfer metaLPToken from the caller\\n        metaLPToken.safeTransferFrom(msg.sender, address(this), tokenAmount);\\n\\n        IERC20 token;\\n        if (tokenIndex < baseLPTokenIndex) {\\n            // When the desired token is meta level token, we can just call `removeLiquidityOneToken` directly\\n            metaSwap.removeLiquidityOneToken(\\n                tokenAmount,\\n                tokenIndex,\\n                minAmount,\\n                deadline\\n            );\\n            token = metaTokens[tokenIndex];\\n        } else if (tokenIndex < baseLPTokenIndex + baseTokensLength) {\\n            // When the desired token is a base level token, we need to first withdraw via baseLPToken, then withdraw\\n            // the desired token from the base Swap contract.\\n            uint256 removedBaseLPTokenAmount = metaSwap.removeLiquidityOneToken(\\n                tokenAmount,\\n                baseLPTokenIndex,\\n                0,\\n                deadline\\n            );\\n\\n            baseSwap.removeLiquidityOneToken(\\n                removedBaseLPTokenAmount,\\n                tokenIndex - baseLPTokenIndex,\\n                minAmount,\\n                deadline\\n            );\\n            token = baseTokens[tokenIndex - baseLPTokenIndex];\\n        } else {\\n            revert(\\\"out of range\\\");\\n        }\\n\\n        uint256 amountWithdrawn = token.balanceOf(address(this));\\n        token.safeTransfer(msg.sender, amountWithdrawn);\\n        return amountWithdrawn;\\n    }\\n\\n    /**\\n     * @notice Remove liquidity from the pool, weighted differently than the\\n     * pool's current balances. Withdraw fee that decays linearly\\n     * over period of 4 weeks since last deposit will apply.\\n     * @param amounts how much of each token to withdraw\\n     * @param maxBurnAmount the max LP token provider is willing to pay to\\n     * remove liquidity. Useful as a front-running mitigation.\\n     * @param deadline latest timestamp to accept this transaction\\n     * @return amount of LP tokens burned\\n     */\\n    function removeLiquidityImbalance(\\n        uint256[] calldata amounts,\\n        uint256 maxBurnAmount,\\n        uint256 deadline\\n    ) external nonReentrant returns (uint256) {\\n        IERC20[] memory memBaseTokens = baseTokens;\\n        IERC20[] memory memMetaTokens = metaTokens;\\n        uint256[] memory metaAmounts = new uint256[](memMetaTokens.length);\\n        uint256[] memory baseAmounts = new uint256[](memBaseTokens.length);\\n\\n        require(\\n            amounts.length == memBaseTokens.length + memMetaTokens.length - 1,\\n            \\\"out of range\\\"\\n        );\\n\\n        RemoveLiquidityImbalanceInfo memory v = RemoveLiquidityImbalanceInfo(\\n            baseSwap,\\n            metaSwap,\\n            metaLPToken,\\n            uint8(metaAmounts.length - 1),\\n            false,\\n            0\\n        );\\n\\n        for (uint8 i = 0; i < v.baseLPTokenIndex; i++) {\\n            metaAmounts[i] = amounts[i];\\n        }\\n\\n        for (uint8 i = 0; i < baseAmounts.length; i++) {\\n            baseAmounts[i] = amounts[v.baseLPTokenIndex + i];\\n            if (baseAmounts[i] > 0) {\\n                v.withdrawFromBase = true;\\n            }\\n        }\\n\\n        // Calculate how much base LP token we need to get the desired amount of underlying tokens\\n        if (v.withdrawFromBase) {\\n            metaAmounts[v.baseLPTokenIndex] =\\n                (v.baseSwap.calculateTokenAmount(baseAmounts, false) * 10005) /\\n                10000;\\n        }\\n\\n        // Transfer MetaSwap LP token from the caller to this contract\\n        v.metaLPToken.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            maxBurnAmount\\n        );\\n\\n        // Withdraw the paired meta level tokens and the base LP token from the MetaSwap pool\\n        uint256 burnedMetaLPTokenAmount = v.metaSwap.removeLiquidityImbalance(\\n            metaAmounts,\\n            maxBurnAmount,\\n            deadline\\n        );\\n        v.leftoverMetaLPTokenAmount = maxBurnAmount - burnedMetaLPTokenAmount;\\n\\n        // If underlying tokens are desired, withdraw them from the base Swap pool\\n        if (v.withdrawFromBase) {\\n            v.baseSwap.removeLiquidityImbalance(\\n                baseAmounts,\\n                metaAmounts[v.baseLPTokenIndex],\\n                deadline\\n            );\\n\\n            // Base Swap may require LESS base LP token than the amount we have\\n            // In that case, deposit it to the MetaSwap pool.\\n            uint256[] memory leftovers = new uint256[](metaAmounts.length);\\n            IERC20 baseLPToken = memMetaTokens[v.baseLPTokenIndex];\\n            uint256 leftoverBaseLPTokenAmount = baseLPToken.balanceOf(\\n                address(this)\\n            );\\n            if (leftoverBaseLPTokenAmount > 0) {\\n                leftovers[v.baseLPTokenIndex] = leftoverBaseLPTokenAmount;\\n                v.leftoverMetaLPTokenAmount =\\n                    v.leftoverMetaLPTokenAmount +\\n                    v.metaSwap.addLiquidity(leftovers, 0, deadline);\\n            }\\n        }\\n\\n        // Transfer all withdrawn tokens to the caller\\n        for (uint8 i = 0; i < amounts.length; i++) {\\n            IERC20 token;\\n            if (i < v.baseLPTokenIndex) {\\n                token = memMetaTokens[i];\\n            } else {\\n                token = memBaseTokens[i - v.baseLPTokenIndex];\\n            }\\n            if (amounts[i] > 0) {\\n                token.safeTransfer(msg.sender, amounts[i]);\\n            }\\n        }\\n\\n        // If there were any extra meta lp token, transfer them back to the caller as well\\n        if (v.leftoverMetaLPTokenAmount > 0) {\\n            v.metaLPToken.safeTransfer(msg.sender, v.leftoverMetaLPTokenAmount);\\n        }\\n\\n        return maxBurnAmount - v.leftoverMetaLPTokenAmount;\\n    }\\n\\n    // VIEW FUNCTIONS\\n\\n    /**\\n     * @notice A simple method to calculate prices from deposits or\\n     * withdrawals, excluding fees but including slippage. This is\\n     * helpful as an input into the various \\\"min\\\" parameters on calls\\n     * to fight front-running. When withdrawing from the base pool in imbalanced\\n     * fashion, the recommended slippage setting is 0.2% or higher.\\n     *\\n     * @dev This shouldn't be used outside frontends for user estimates.\\n     *\\n     * @param amounts an array of token amounts to deposit or withdrawal,\\n     * corresponding to pooledTokens. The amount should be in each\\n     * pooled token's native precision. If a token charges a fee on transfers,\\n     * use the amount that gets transferred after the fee.\\n     * @param deposit whether this is a deposit or a withdrawal\\n     * @return token amount the user will receive\\n     */\\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        uint256[] memory metaAmounts = new uint256[](metaTokens.length);\\n        uint256[] memory baseAmounts = new uint256[](baseTokens.length);\\n        uint256 baseLPTokenIndex = metaAmounts.length - 1;\\n\\n        for (uint8 i = 0; i < baseLPTokenIndex; i++) {\\n            metaAmounts[i] = amounts[i];\\n        }\\n\\n        for (uint8 i = 0; i < baseAmounts.length; i++) {\\n            baseAmounts[i] = amounts[baseLPTokenIndex + i];\\n        }\\n\\n        uint256 baseLPTokenAmount = baseSwap.calculateTokenAmount(\\n            baseAmounts,\\n            deposit\\n        );\\n        metaAmounts[baseLPTokenIndex] = baseLPTokenAmount;\\n\\n        return metaSwap.calculateTokenAmount(metaAmounts, deposit);\\n    }\\n\\n    /**\\n     * @notice A simple method to calculate amount of each underlying\\n     * tokens that is returned upon burning given amount of LP tokens\\n     * @param amount the amount of LP tokens that would be burned on withdrawal\\n     * @return array of token balances that the user will receive\\n     */\\n    function calculateRemoveLiquidity(uint256 amount)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory metaAmounts = metaSwap.calculateRemoveLiquidity(\\n            amount\\n        );\\n        uint8 baseLPTokenIndex = uint8(metaAmounts.length - 1);\\n        uint256[] memory baseAmounts = baseSwap.calculateRemoveLiquidity(\\n            metaAmounts[baseLPTokenIndex]\\n        );\\n\\n        uint256[] memory totalAmounts = new uint256[](\\n            baseLPTokenIndex + baseAmounts.length\\n        );\\n        for (uint8 i = 0; i < baseLPTokenIndex; i++) {\\n            totalAmounts[i] = metaAmounts[i];\\n        }\\n        for (uint8 i = 0; i < baseAmounts.length; i++) {\\n            totalAmounts[baseLPTokenIndex + i] = baseAmounts[i];\\n        }\\n\\n        return totalAmounts;\\n    }\\n\\n    /**\\n     * @notice Calculate the amount of underlying token available to withdraw\\n     * when withdrawing via only single token\\n     * @param tokenAmount the amount of LP token to burn\\n     * @param tokenIndex index of which token will be withdrawn\\n     * @return availableTokenAmount calculated amount of underlying token\\n     * available to withdraw\\n     */\\n    function calculateRemoveLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex\\n    ) external view returns (uint256) {\\n        uint8 baseLPTokenIndex = uint8(metaTokens.length - 1);\\n\\n        if (tokenIndex < baseLPTokenIndex) {\\n            return\\n                metaSwap.calculateRemoveLiquidityOneToken(\\n                    tokenAmount,\\n                    tokenIndex\\n                );\\n        } else {\\n            uint256 baseLPTokenAmount = metaSwap\\n                .calculateRemoveLiquidityOneToken(\\n                    tokenAmount,\\n                    baseLPTokenIndex\\n                );\\n            return\\n                baseSwap.calculateRemoveLiquidityOneToken(\\n                    baseLPTokenAmount,\\n                    tokenIndex - baseLPTokenIndex\\n                );\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the address of the pooled token at given index. Reverts if tokenIndex is out of range.\\n     * This is a flattened representation of the pooled tokens.\\n     * @param index the index of the token\\n     * @return address of the token at given index\\n     */\\n    function getToken(uint8 index) external view returns (IERC20) {\\n        require(index < tokens.length, \\\"index out of range\\\");\\n        return tokens[index];\\n    }\\n\\n    /**\\n     * @notice Calculate amount of tokens you receive on swap\\n     * @param tokenIndexFrom the token the user wants to sell\\n     * @param tokenIndexTo the token the user wants to buy\\n     * @param dx the amount of tokens the user wants to sell. If the token charges\\n     * a fee on transfers, use the amount that gets transferred after the fee.\\n     * @return amount of tokens the user will receive\\n     */\\n    function calculateSwap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256) {\\n        return\\n            metaSwap.calculateSwapUnderlying(tokenIndexFrom, tokenIndexTo, dx);\\n    }\\n}\\n\",\"keccak256\":\"0x9b0d9ddd45892ef1af392b0ea1a8e0112422df19e52459f495216d864bb193af\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506137fe806100206000396000f3fe608060405234801561001057600080fd5b506004361061011b5760003560e01c806391695586116100b2578063cb2ef5fe11610081578063e6ab280611610066578063e6ab280614610268578063f2fad2b61461027b578063fd0bd0991461028e57600080fd5b8063cb2ef5fe14610242578063d26504721461025557600080fd5b806391695586146101f45780639750a8ee14610207578063a95b089f1461021a578063c0c53b8b1461022d57600080fd5b80634d49e87d116100ee5780634d49e87d146101a85780634f64b2be146101bb57806382b86600146101ce57806384cdd9bc146101e157600080fd5b806331cd52b014610120578063328123a214610149578063342a87a1146101745780633e3a156014610195575b600080fd5b61013361012e36600461319f565b6102a1565b604051610140919061322d565b60405180910390f35b61015c610157366004613240565b6108a6565b6040516001600160a01b039091168152602001610140565b61018761018236600461326f565b6108d0565b604051908152602001610140565b6101876101a336600461329b565b610ac5565b6101876101b63660046132d6565b610ec6565b61015c6101c9366004613240565b61146e565b61015c6101dc366004613327565b61147e565b6101876101ef3660046132d6565b611506565b610187610202366004613342565b611d91565b60335461015c906001600160a01b031681565b61018761022836600461338f565b611f15565b61024061023b3660046133e3565b611fb7565b005b60345461015c906001600160a01b031681565b60385461015c906001600160a01b031681565b61018761027636600461343c565b6126d6565b610133610289366004613240565b612988565b61015c61029c366004613240565b612bf3565b60606002600154036102fa5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b600260015560358054604080516020808402820181019092528281526000939092909183018282801561035657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610338575b50505050509050600060368054806020026020016040519081016040528092919081815260200182805480156103b557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610397575b50505050509050606060006001835185516103d091906134b7565b6103da91906134ca565b905086811461042b5760405162461bcd60e51b815260206004820152600c60248201527f6f7574206f662072616e6765000000000000000000000000000000000000000060448201526064016102f1565b8067ffffffffffffffff811115610444576104446134dd565b60405190808252806020026020018201604052801561046d578160200160208202803683370190505b5060385490925061048a91506001600160a01b031633308b612c03565b6000606060006001855161049e91906134ca565b90506000855167ffffffffffffffff8111156104bc576104bc6134dd565b6040519080825280602002602001820160405280156104e5578160200160208202803683370190505b50905060005b828160ff161015610544578b8b8260ff1681811061050b5761050b61350c565b90506020020135828260ff16815181106105275761052761350c565b60209081029190910101528061053c8161353b565b9150506104eb565b506034546040517f31cd52b00000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906331cd52b090610592908f9085908e9060040161355a565b6000604051808303816000875af11580156105b1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105d99190810190613583565b92505060005b818160ff16101561069057828160ff16815181106105ff576105ff61350c565b6020026020010151858260ff168151811061061c5761061c61350c565b60200260200101818152505061067e33848360ff16815181106106415761064161350c565b6020026020010151888460ff168151811061065e5761065e61350c565b60200260200101516001600160a01b0316612cb49092919063ffffffff16565b806106888161353b565b9150506105df565b508181815181106106a3576106a361350c565b602002602001015192506000865167ffffffffffffffff8111156106c9576106c96134dd565b6040519080825280602002602001820160405280156106f2578160200160208202803683370190505b50905060005b828160ff16101561075a578b8b61071260ff8416866134b7565b8181106107215761072161350c565b90506020020135828260ff168151811061073d5761073d61350c565b6020908102919091010152806107528161353b565b9150506106f8565b506033546040517f31cd52b00000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906331cd52b0906107a890879085908e9060040161355a565b6000604051808303816000875af11580156107c7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107ef9190810190613583565b92505060005b86518160ff16101561089257828160ff16815181106108165761081661350c565b6020026020010151858260ff168461082e91906134b7565b8151811061083e5761083e61350c565b60200260200101818152505061088033848360ff16815181106108635761086361350c565b6020026020010151898460ff168151811061065e5761065e61350c565b8061088a8161353b565b9150506107f5565b505060018055509098975050505050505050565b603581815481106108b657600080fd5b6000918252602090912001546001600160a01b0316905081565b60365460009081906108e4906001906134ca565b90508060ff168360ff16101561098b576034546040517f342a87a10000000000000000000000000000000000000000000000000000000081526004810186905260ff851660248201526001600160a01b039091169063342a87a190604401602060405180830381865afa15801561095f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109839190613635565b915050610abf565b6034546040517f342a87a10000000000000000000000000000000000000000000000000000000081526004810186905260ff831660248201526000916001600160a01b03169063342a87a190604401602060405180830381865afa1580156109f7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1b9190613635565b6033549091506001600160a01b031663342a87a182610a3a858861364e565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b168152600481019290925260ff166024820152604401602060405180830381865afa158015610a96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aba9190613635565b925050505b92915050565b6000600260015403610b195760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016102f1565b60026001908155603654600091610b2f916134ca565b60355460385491925090610b4e906001600160a01b031633308a612c03565b60008260ff168760ff161015610c30576034546040517f3e3a1560000000000000000000000000000000000000000000000000000000008152600481018a905260ff8916602482015260448101889052606481018790526001600160a01b0390911690633e3a1560906084016020604051808303816000875af1158015610bd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bfd9190613635565b5060368760ff1681548110610c1457610c1461350c565b6000918252602090912001546001600160a01b03169050610e1c565b610c3a8284613667565b60ff168760ff161015610dd4576034546040517f3e3a1560000000000000000000000000000000000000000000000000000000008152600481018a905260ff8516602482015260006044820181905260648201889052916001600160a01b031690633e3a1560906084016020604051808303816000875af1158015610cc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce79190613635565b6033549091506001600160a01b0316633e3a156082610d06878c61364e565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b168152600481019290925260ff166024820152604481018a9052606481018990526084016020604051808303816000875af1158015610d72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d969190613635565b506035610da3858a61364e565b60ff1681548110610db657610db661350c565b6000918252602090912001546001600160a01b03169150610e1c9050565b60405162461bcd60e51b815260206004820152600c60248201527f6f7574206f662072616e6765000000000000000000000000000000000000000060448201526064016102f1565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610e7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea09190613635565b9050610eb66001600160a01b0383163383612cb4565b6001805598975050505050505050565b6000600260015403610f1a5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016102f1565b6002600155603580546040805160208084028201810190925282815260009390929091830182828015610f7657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610f58575b5050505050905060006036805480602002602001604051908101604052809291908181526020018280548015610fd557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610fb7575b50505050509050600060018251610fec91906134ca565b9050808351610ffb91906134b7565b871461100657600080fd5b600080845167ffffffffffffffff811115611023576110236134dd565b60405190808252806020026020018201604052801561104c578160200160208202803683370190505b5090506000805b86518160ff161015611185576000878260ff16815181106110765761107661350c565b6020026020010151905060008d8d8460ff168961109391906134b7565b8181106110a2576110a261350c565b9050602002013590506000811115611170576110c96001600160a01b038316333084612c03565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015611126573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114a9190613635565b858460ff168151811061115f5761115f61350c565b602002602001018181525050600193505b5050808061117d9061353b565b915050611053565b508015611220576033546040517f4d49e87d0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690634d49e87d906111da9085906000908d90600401613680565b6020604051808303816000875af11580156111f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121d9190613635565b92505b5050603654600090819067ffffffffffffffff811115611242576112426134dd565b60405190808252806020026020018201604052801561126b578160200160208202803683370190505b50905060005b848160ff161015611393576000868260ff16815181106112935761129361350c565b6020026020010151905060008d8d8460ff168181106112b4576112b461350c565b905060200201359050600081111561137e576112db6001600160a01b038316333084612c03565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015611338573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135c9190613635565b848460ff16815181106113715761137161350c565b6020026020010181815250505b5050808061138b9061353b565b915050611271565b50828185815181106113a7576113a761350c565b60209081029190910101526034546040517f4d49e87d0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690634d49e87d906113ff9084908d908d90600401613680565b6020604051808303816000875af115801561141e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114429190613635565b60385490925061145d91506001600160a01b03163383612cb4565b600180559998505050505050505050565b603781815481106108b657600080fd5b60375460009060ff8316106114d55760405162461bcd60e51b815260206004820152601260248201527f696e646578206f7574206f662072616e6765000000000000000000000000000060448201526064016102f1565b60378260ff16815481106114eb576114eb61350c565b6000918252602090912001546001600160a01b031692915050565b600060026001540361155a5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016102f1565b60026001556035805460408051602080840282018101909252828152600093909290918301828280156115b657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611598575b505050505090506000603680548060200260200160405190810160405280929190818152602001828054801561161557602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116115f7575b505050505090506000815167ffffffffffffffff811115611638576116386134dd565b604051908082528060200260200182016040528015611661578160200160208202803683370190505b5090506000835167ffffffffffffffff811115611680576116806134dd565b6040519080825280602002602001820160405280156116a9578160200160208202803683370190505b5090506001835185516116bc91906134b7565b6116c691906134ca565b88146117145760405162461bcd60e51b815260206004820152600c60248201527f6f7574206f662072616e6765000000000000000000000000000000000000000060448201526064016102f1565b6040805160c0810182526033546001600160a01b039081168252603454811660208301526038541691810191909152825160009190606082019061175a906001906134ca565b60ff1681526020016000151581526020016000815250905060005b816060015160ff168160ff1610156117d5578a8a8260ff1681811061179c5761179c61350c565b90506020020135848260ff16815181106117b8576117b861350c565b6020908102919091010152806117cd8161353b565b915050611775565b5060005b82518160ff161015611870578a8a8284606001516117f79190613667565b60ff168181106118095761180961350c565b90506020020135838260ff16815181106118255761182561350c565b6020026020010181815250506000838260ff16815181106118485761184861350c565b6020026020010151111561185e57600160808301525b806118688161353b565b9150506117d9565b508060800151156119455780516040517fe6ab2806000000000000000000000000000000000000000000000000000000008152612710916001600160a01b03169063e6ab2806906118c89086906000906004016136a5565b602060405180830381865afa1580156118e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119099190613635565b611915906127156136c9565b61191f91906136e0565b83826060015160ff16815181106119385761193861350c565b6020026020010181815250505b604081015161195f906001600160a01b031633308b612c03565b60208101516040517f84cdd9bc0000000000000000000000000000000000000000000000000000000081526000916001600160a01b0316906384cdd9bc906119af9087908d908d90600401613680565b6020604051808303816000875af11580156119ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f29190613635565b90506119fe818a6134ca565b60a0830152608082015115611c595781600001516001600160a01b03166384cdd9bc8486856060015160ff1681518110611a3a57611a3a61350c565b60200260200101518b6040518463ffffffff1660e01b8152600401611a6193929190613680565b6020604051808303816000875af1158015611a80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa49190613635565b506000845167ffffffffffffffff811115611ac157611ac16134dd565b604051908082528060200260200182016040528015611aea578160200160208202803683370190505b509050600086846060015160ff1681518110611b0857611b0861350c565b60209081029190910101516040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015611b76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9a9190613635565b90508015611c55578083866060015160ff1681518110611bbc57611bbc61350c565b60200260200101818152505084602001516001600160a01b0316634d49e87d8460008e6040518463ffffffff1660e01b8152600401611bfd93929190613680565b6020604051808303816000875af1158015611c1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c409190613635565b8560a00151611c4f91906134b7565b60a08601525b5050505b60005b60ff81168b1115611d3e576000836060015160ff168260ff161015611c9f57868260ff1681518110611c9057611c9061350c565b60200260200101519050611cce565b87846060015183611cb0919061364e565b60ff1681518110611cc357611cc361350c565b602002602001015190505b60008d8d8460ff16818110611ce557611ce561350c565b905060200201351115611d2b57611d2b338e8e8560ff16818110611d0b57611d0b61350c565b90506020020135836001600160a01b0316612cb49092919063ffffffff16565b5080611d368161353b565b915050611c5c565b5060a082015115611d6f57611d6f338360a0015184604001516001600160a01b0316612cb49092919063ffffffff16565b60a0820151611d7e908a6134ca565b600180559b9a5050505050505050505050565b6000600260015403611de55760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016102f1565b6002600181905550611e2633308660378a60ff1681548110611e0957611e0961350c565b6000918252602090912001546001600160a01b0316929190612c03565b6034546040517f78e0fae800000000000000000000000000000000000000000000000000000000815260ff8089166004830152871660248201526044810186905260648101859052608481018490526000916001600160a01b0316906378e0fae89060a4016020604051808303816000875af1158015611eaa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ece9190613635565b9050611f07338260378960ff1681548110611eeb57611eeb61350c565b6000918252602090912001546001600160a01b03169190612cb4565b600180559695505050505050565b6034546040517f75d8e3e400000000000000000000000000000000000000000000000000000000815260ff808616600483015284166024820152604481018390526000916001600160a01b0316906375d8e3e490606401602060405180830381865afa158015611f89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fad9190613635565b90505b9392505050565b600054610100900460ff1615808015611fd75750600054600160ff909116105b80611ff15750303b158015611ff1575060005460ff166001145b6120635760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016102f1565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905580156120c157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b6120c9612d02565b60005b60208160ff161015612231576040517f82b8660000000000000000000000000000000000000000000000000000000000815260ff821660048201526001600160a01b038616906382b8660090602401602060405180830381865afa925050508015612154575060408051601f3d908101601f191682019092526121519181019061371b565b60015b1561223157603580546001810182556000919091527fcfa4bec1d3298408bb5afcfcd9c430549c5b31f8aa5c5848151c0a55f473c34d0180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556121ea90877fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff612d89565b61221e6001600160a01b038216867fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff612d89565b50806122298161353b565b9150506120cc565b60018160ff16116122a95760405162461bcd60e51b8152602060048201526024808201527f6261736553776170206d7573742068617665206174206c65617374203220746f60448201527f6b656e730000000000000000000000000000000000000000000000000000000060648201526084016102f1565b506000805b60208160ff16101561241b576040517f82b8660000000000000000000000000000000000000000000000000000000000815260ff821660048201526001600160a01b038616906382b8660090602401602060405180830381865afa925050508015612336575060408051601f3d908101601f191682019092526123339181019061371b565b60015b1561241b576036805460018181019092557f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b80180546001600160a01b0384167fffffffffffffffffffffffff000000000000000000000000000000000000000091821681179092556037805493840181556000527f42a7b7dd785cd69714a189dffb3fd7d7174edc9ece837694ce50f7078f7c31ae90920180549092168117909155909250829061240890877fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff612d89565b50806124138161353b565b9150506122ae565b60018160ff16116124935760405162461bcd60e51b8152602060048201526024808201527f6d65746153776170206d7573742068617665206174206c65617374203220746f60448201527f6b656e730000000000000000000000000000000000000000000000000000000060648201526084016102f1565b5060356000815481106124a8576124a861350c565b600091825260209091200154603780546001600160a01b03909216916124d0906001906134ca565b815481106124e0576124e061350c565b600091825260209091200180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039290921691909117905560015b60355460ff821610156125ae57603760358260ff16815481106125495761254961350c565b60009182526020808320909101548354600181018555938352912090910180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03909216919091179055806125a68161353b565b915050612524565b506125e36001600160a01b038216867fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff612d89565b6126176001600160a01b038416857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff612d89565b50603380546001600160a01b038087167fffffffffffffffffffffffff00000000000000000000000000000000000000009283161790925560348054868416908316179055603880549285169290911691909117905580156126d057600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b603654600090819067ffffffffffffffff8111156126f6576126f66134dd565b60405190808252806020026020018201604052801561271f578160200160208202803683370190505b5060355490915060009067ffffffffffffffff811115612741576127416134dd565b60405190808252806020026020018201604052801561276a578160200160208202803683370190505b50905060006001835161277d91906134ca565b905060005b818160ff1610156127db5787878260ff168181106127a2576127a261350c565b90506020020135848260ff16815181106127be576127be61350c565b6020908102919091010152806127d38161353b565b915050612782565b5060005b82518160ff1610156128425787876127fa60ff8416856134b7565b8181106128095761280961350c565b90506020020135838260ff16815181106128255761282561350c565b60209081029190910101528061283a8161353b565b9150506127df565b506033546040517fe6ab28060000000000000000000000000000000000000000000000000000000081526000916001600160a01b03169063e6ab28069061288f9086908a906004016136a5565b602060405180830381865afa1580156128ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128d09190613635565b9050808483815181106128e5576128e561350c565b60209081029190910101526034546040517fe6ab28060000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063e6ab28069061293b9087908a906004016136a5565b602060405180830381865afa158015612958573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061297c9190613635565b98975050505050505050565b6034546040517ff2fad2b6000000000000000000000000000000000000000000000000000000008152600481018390526060916000916001600160a01b039091169063f2fad2b690602401600060405180830381865afa1580156129f0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612a189190810190613583565b9050600060018251612a2a91906134ca565b60335483519192506000916001600160a01b039091169063f2fad2b690859060ff8616908110612a5c57612a5c61350c565b60200260200101516040518263ffffffff1660e01b8152600401612a8291815260200190565b600060405180830381865afa158015612a9f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612ac79190810190613583565b9050600081518360ff16612adb91906134b7565b67ffffffffffffffff811115612af357612af36134dd565b604051908082528060200260200182016040528015612b1c578160200160208202803683370190505b50905060005b8360ff168160ff161015612b7f57848160ff1681518110612b4557612b4561350c565b6020026020010151828260ff1681518110612b6257612b6261350c565b602090810291909101015280612b778161353b565b915050612b22565b5060005b82518160ff161015612be957828160ff1681518110612ba457612ba461350c565b6020026020010151828286612bb99190613667565b60ff1681518110612bcc57612bcc61350c565b602090810291909101015280612be18161353b565b915050612b83565b5095945050505050565b603681815481106108b657600080fd5b6040516001600160a01b03808516602483015283166044820152606481018290526126d09085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612ed7565b6040516001600160a01b038316602482015260448101829052612cfd9084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401612c50565b505050565b600054610100900460ff16612d7f5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016102f1565b612d87612fbc565b565b801580612e1c57506040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015612df6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e1a9190613635565b155b612e8e5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084016102f1565b6040516001600160a01b038316602482015260448101829052612cfd9084907f095ea7b30000000000000000000000000000000000000000000000000000000090606401612c50565b6000612f2c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661303f9092919063ffffffff16565b805190915015612cfd5780806020019051810190612f4a9190613738565b612cfd5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016102f1565b600054610100900460ff166130395760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016102f1565b60018055565b6060611fad8484600085856001600160a01b0385163b6130a15760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102f1565b600080866001600160a01b031685876040516130bd9190613779565b60006040518083038185875af1925050503d80600081146130fa576040519150601f19603f3d011682016040523d82523d6000602084013e6130ff565b606091505b509150915061310f82828661311a565b979650505050505050565b60608315613129575081611fb0565b8251156131395782518084602001fd5b8160405162461bcd60e51b81526004016102f19190613795565b60008083601f84011261316557600080fd5b50813567ffffffffffffffff81111561317d57600080fd5b6020830191508360208260051b850101111561319857600080fd5b9250929050565b600080600080606085870312156131b557600080fd5b84359350602085013567ffffffffffffffff8111156131d357600080fd5b6131df87828801613153565b9598909750949560400135949350505050565b600081518084526020808501945080840160005b8381101561322257815187529582019590820190600101613206565b509495945050505050565b602081526000611fb060208301846131f2565b60006020828403121561325257600080fd5b5035919050565b803560ff8116811461326a57600080fd5b919050565b6000806040838503121561328257600080fd5b8235915061329260208401613259565b90509250929050565b600080600080608085870312156132b157600080fd5b843593506132c160208601613259565b93969395505050506040820135916060013590565b600080600080606085870312156132ec57600080fd5b843567ffffffffffffffff81111561330357600080fd5b61330f87828801613153565b90989097506020870135966040013595509350505050565b60006020828403121561333957600080fd5b611fb082613259565b600080600080600060a0868803121561335a57600080fd5b61336386613259565b945061337160208701613259565b94979496505050506040830135926060810135926080909101359150565b6000806000606084860312156133a457600080fd5b6133ad84613259565b92506133bb60208501613259565b9150604084013590509250925092565b6001600160a01b03811681146133e057600080fd5b50565b6000806000606084860312156133f857600080fd5b8335613403816133cb565b92506020840135613413816133cb565b91506040840135613423816133cb565b809150509250925092565b80151581146133e057600080fd5b60008060006040848603121561345157600080fd5b833567ffffffffffffffff81111561346857600080fd5b61347486828701613153565b90945092505060208401356134238161342e565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820180821115610abf57610abf613488565b81810381811115610abf57610abf613488565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060ff821660ff810361355157613551613488565b60010192915050565b83815260606020820152600061357360608301856131f2565b9050826040830152949350505050565b6000602080838503121561359657600080fd5b825167ffffffffffffffff808211156135ae57600080fd5b818501915085601f8301126135c257600080fd5b8151818111156135d4576135d46134dd565b8060051b604051601f19603f830116810181811085821117156135f9576135f96134dd565b60405291825284820192508381018501918883111561361757600080fd5b938501935b8285101561297c5784518452938501939285019261361c565b60006020828403121561364757600080fd5b5051919050565b60ff8281168282160390811115610abf57610abf613488565b60ff8181168382160190811115610abf57610abf613488565b60608152600061369360608301866131f2565b60208301949094525060400152919050565b6040815260006136b860408301856131f2565b905082151560208301529392505050565b8082028115828204841417610abf57610abf613488565b600082613716577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60006020828403121561372d57600080fd5b8151611fb0816133cb565b60006020828403121561374a57600080fd5b8151611fb08161342e565b60005b83811015613770578181015183820152602001613758565b50506000910152565b6000825161378b818460208701613755565b9190910192915050565b60208152600082518060208401526137b4816040850160208701613755565b601f01601f1916919091016040019291505056fea2646970667358221220c3ae2178735d9262c9364d64b9eafa791c70cceff0647e8e35c0f5dbcc40adba64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061011b5760003560e01c806391695586116100b2578063cb2ef5fe11610081578063e6ab280611610066578063e6ab280614610268578063f2fad2b61461027b578063fd0bd0991461028e57600080fd5b8063cb2ef5fe14610242578063d26504721461025557600080fd5b806391695586146101f45780639750a8ee14610207578063a95b089f1461021a578063c0c53b8b1461022d57600080fd5b80634d49e87d116100ee5780634d49e87d146101a85780634f64b2be146101bb57806382b86600146101ce57806384cdd9bc146101e157600080fd5b806331cd52b014610120578063328123a214610149578063342a87a1146101745780633e3a156014610195575b600080fd5b61013361012e36600461319f565b6102a1565b604051610140919061322d565b60405180910390f35b61015c610157366004613240565b6108a6565b6040516001600160a01b039091168152602001610140565b61018761018236600461326f565b6108d0565b604051908152602001610140565b6101876101a336600461329b565b610ac5565b6101876101b63660046132d6565b610ec6565b61015c6101c9366004613240565b61146e565b61015c6101dc366004613327565b61147e565b6101876101ef3660046132d6565b611506565b610187610202366004613342565b611d91565b60335461015c906001600160a01b031681565b61018761022836600461338f565b611f15565b61024061023b3660046133e3565b611fb7565b005b60345461015c906001600160a01b031681565b60385461015c906001600160a01b031681565b61018761027636600461343c565b6126d6565b610133610289366004613240565b612988565b61015c61029c366004613240565b612bf3565b60606002600154036102fa5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b600260015560358054604080516020808402820181019092528281526000939092909183018282801561035657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610338575b50505050509050600060368054806020026020016040519081016040528092919081815260200182805480156103b557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610397575b50505050509050606060006001835185516103d091906134b7565b6103da91906134ca565b905086811461042b5760405162461bcd60e51b815260206004820152600c60248201527f6f7574206f662072616e6765000000000000000000000000000000000000000060448201526064016102f1565b8067ffffffffffffffff811115610444576104446134dd565b60405190808252806020026020018201604052801561046d578160200160208202803683370190505b5060385490925061048a91506001600160a01b031633308b612c03565b6000606060006001855161049e91906134ca565b90506000855167ffffffffffffffff8111156104bc576104bc6134dd565b6040519080825280602002602001820160405280156104e5578160200160208202803683370190505b50905060005b828160ff161015610544578b8b8260ff1681811061050b5761050b61350c565b90506020020135828260ff16815181106105275761052761350c565b60209081029190910101528061053c8161353b565b9150506104eb565b506034546040517f31cd52b00000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906331cd52b090610592908f9085908e9060040161355a565b6000604051808303816000875af11580156105b1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105d99190810190613583565b92505060005b818160ff16101561069057828160ff16815181106105ff576105ff61350c565b6020026020010151858260ff168151811061061c5761061c61350c565b60200260200101818152505061067e33848360ff16815181106106415761064161350c565b6020026020010151888460ff168151811061065e5761065e61350c565b60200260200101516001600160a01b0316612cb49092919063ffffffff16565b806106888161353b565b9150506105df565b508181815181106106a3576106a361350c565b602002602001015192506000865167ffffffffffffffff8111156106c9576106c96134dd565b6040519080825280602002602001820160405280156106f2578160200160208202803683370190505b50905060005b828160ff16101561075a578b8b61071260ff8416866134b7565b8181106107215761072161350c565b90506020020135828260ff168151811061073d5761073d61350c565b6020908102919091010152806107528161353b565b9150506106f8565b506033546040517f31cd52b00000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906331cd52b0906107a890879085908e9060040161355a565b6000604051808303816000875af11580156107c7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107ef9190810190613583565b92505060005b86518160ff16101561089257828160ff16815181106108165761081661350c565b6020026020010151858260ff168461082e91906134b7565b8151811061083e5761083e61350c565b60200260200101818152505061088033848360ff16815181106108635761086361350c565b6020026020010151898460ff168151811061065e5761065e61350c565b8061088a8161353b565b9150506107f5565b505060018055509098975050505050505050565b603581815481106108b657600080fd5b6000918252602090912001546001600160a01b0316905081565b60365460009081906108e4906001906134ca565b90508060ff168360ff16101561098b576034546040517f342a87a10000000000000000000000000000000000000000000000000000000081526004810186905260ff851660248201526001600160a01b039091169063342a87a190604401602060405180830381865afa15801561095f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109839190613635565b915050610abf565b6034546040517f342a87a10000000000000000000000000000000000000000000000000000000081526004810186905260ff831660248201526000916001600160a01b03169063342a87a190604401602060405180830381865afa1580156109f7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1b9190613635565b6033549091506001600160a01b031663342a87a182610a3a858861364e565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b168152600481019290925260ff166024820152604401602060405180830381865afa158015610a96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aba9190613635565b925050505b92915050565b6000600260015403610b195760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016102f1565b60026001908155603654600091610b2f916134ca565b60355460385491925090610b4e906001600160a01b031633308a612c03565b60008260ff168760ff161015610c30576034546040517f3e3a1560000000000000000000000000000000000000000000000000000000008152600481018a905260ff8916602482015260448101889052606481018790526001600160a01b0390911690633e3a1560906084016020604051808303816000875af1158015610bd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bfd9190613635565b5060368760ff1681548110610c1457610c1461350c565b6000918252602090912001546001600160a01b03169050610e1c565b610c3a8284613667565b60ff168760ff161015610dd4576034546040517f3e3a1560000000000000000000000000000000000000000000000000000000008152600481018a905260ff8516602482015260006044820181905260648201889052916001600160a01b031690633e3a1560906084016020604051808303816000875af1158015610cc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce79190613635565b6033549091506001600160a01b0316633e3a156082610d06878c61364e565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b168152600481019290925260ff166024820152604481018a9052606481018990526084016020604051808303816000875af1158015610d72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d969190613635565b506035610da3858a61364e565b60ff1681548110610db657610db661350c565b6000918252602090912001546001600160a01b03169150610e1c9050565b60405162461bcd60e51b815260206004820152600c60248201527f6f7574206f662072616e6765000000000000000000000000000000000000000060448201526064016102f1565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610e7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea09190613635565b9050610eb66001600160a01b0383163383612cb4565b6001805598975050505050505050565b6000600260015403610f1a5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016102f1565b6002600155603580546040805160208084028201810190925282815260009390929091830182828015610f7657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610f58575b5050505050905060006036805480602002602001604051908101604052809291908181526020018280548015610fd557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610fb7575b50505050509050600060018251610fec91906134ca565b9050808351610ffb91906134b7565b871461100657600080fd5b600080845167ffffffffffffffff811115611023576110236134dd565b60405190808252806020026020018201604052801561104c578160200160208202803683370190505b5090506000805b86518160ff161015611185576000878260ff16815181106110765761107661350c565b6020026020010151905060008d8d8460ff168961109391906134b7565b8181106110a2576110a261350c565b9050602002013590506000811115611170576110c96001600160a01b038316333084612c03565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015611126573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114a9190613635565b858460ff168151811061115f5761115f61350c565b602002602001018181525050600193505b5050808061117d9061353b565b915050611053565b508015611220576033546040517f4d49e87d0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690634d49e87d906111da9085906000908d90600401613680565b6020604051808303816000875af11580156111f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121d9190613635565b92505b5050603654600090819067ffffffffffffffff811115611242576112426134dd565b60405190808252806020026020018201604052801561126b578160200160208202803683370190505b50905060005b848160ff161015611393576000868260ff16815181106112935761129361350c565b6020026020010151905060008d8d8460ff168181106112b4576112b461350c565b905060200201359050600081111561137e576112db6001600160a01b038316333084612c03565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015611338573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135c9190613635565b848460ff16815181106113715761137161350c565b6020026020010181815250505b5050808061138b9061353b565b915050611271565b50828185815181106113a7576113a761350c565b60209081029190910101526034546040517f4d49e87d0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690634d49e87d906113ff9084908d908d90600401613680565b6020604051808303816000875af115801561141e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114429190613635565b60385490925061145d91506001600160a01b03163383612cb4565b600180559998505050505050505050565b603781815481106108b657600080fd5b60375460009060ff8316106114d55760405162461bcd60e51b815260206004820152601260248201527f696e646578206f7574206f662072616e6765000000000000000000000000000060448201526064016102f1565b60378260ff16815481106114eb576114eb61350c565b6000918252602090912001546001600160a01b031692915050565b600060026001540361155a5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016102f1565b60026001556035805460408051602080840282018101909252828152600093909290918301828280156115b657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611598575b505050505090506000603680548060200260200160405190810160405280929190818152602001828054801561161557602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116115f7575b505050505090506000815167ffffffffffffffff811115611638576116386134dd565b604051908082528060200260200182016040528015611661578160200160208202803683370190505b5090506000835167ffffffffffffffff811115611680576116806134dd565b6040519080825280602002602001820160405280156116a9578160200160208202803683370190505b5090506001835185516116bc91906134b7565b6116c691906134ca565b88146117145760405162461bcd60e51b815260206004820152600c60248201527f6f7574206f662072616e6765000000000000000000000000000000000000000060448201526064016102f1565b6040805160c0810182526033546001600160a01b039081168252603454811660208301526038541691810191909152825160009190606082019061175a906001906134ca565b60ff1681526020016000151581526020016000815250905060005b816060015160ff168160ff1610156117d5578a8a8260ff1681811061179c5761179c61350c565b90506020020135848260ff16815181106117b8576117b861350c565b6020908102919091010152806117cd8161353b565b915050611775565b5060005b82518160ff161015611870578a8a8284606001516117f79190613667565b60ff168181106118095761180961350c565b90506020020135838260ff16815181106118255761182561350c565b6020026020010181815250506000838260ff16815181106118485761184861350c565b6020026020010151111561185e57600160808301525b806118688161353b565b9150506117d9565b508060800151156119455780516040517fe6ab2806000000000000000000000000000000000000000000000000000000008152612710916001600160a01b03169063e6ab2806906118c89086906000906004016136a5565b602060405180830381865afa1580156118e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119099190613635565b611915906127156136c9565b61191f91906136e0565b83826060015160ff16815181106119385761193861350c565b6020026020010181815250505b604081015161195f906001600160a01b031633308b612c03565b60208101516040517f84cdd9bc0000000000000000000000000000000000000000000000000000000081526000916001600160a01b0316906384cdd9bc906119af9087908d908d90600401613680565b6020604051808303816000875af11580156119ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f29190613635565b90506119fe818a6134ca565b60a0830152608082015115611c595781600001516001600160a01b03166384cdd9bc8486856060015160ff1681518110611a3a57611a3a61350c565b60200260200101518b6040518463ffffffff1660e01b8152600401611a6193929190613680565b6020604051808303816000875af1158015611a80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa49190613635565b506000845167ffffffffffffffff811115611ac157611ac16134dd565b604051908082528060200260200182016040528015611aea578160200160208202803683370190505b509050600086846060015160ff1681518110611b0857611b0861350c565b60209081029190910101516040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015611b76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9a9190613635565b90508015611c55578083866060015160ff1681518110611bbc57611bbc61350c565b60200260200101818152505084602001516001600160a01b0316634d49e87d8460008e6040518463ffffffff1660e01b8152600401611bfd93929190613680565b6020604051808303816000875af1158015611c1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c409190613635565b8560a00151611c4f91906134b7565b60a08601525b5050505b60005b60ff81168b1115611d3e576000836060015160ff168260ff161015611c9f57868260ff1681518110611c9057611c9061350c565b60200260200101519050611cce565b87846060015183611cb0919061364e565b60ff1681518110611cc357611cc361350c565b602002602001015190505b60008d8d8460ff16818110611ce557611ce561350c565b905060200201351115611d2b57611d2b338e8e8560ff16818110611d0b57611d0b61350c565b90506020020135836001600160a01b0316612cb49092919063ffffffff16565b5080611d368161353b565b915050611c5c565b5060a082015115611d6f57611d6f338360a0015184604001516001600160a01b0316612cb49092919063ffffffff16565b60a0820151611d7e908a6134ca565b600180559b9a5050505050505050505050565b6000600260015403611de55760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016102f1565b6002600181905550611e2633308660378a60ff1681548110611e0957611e0961350c565b6000918252602090912001546001600160a01b0316929190612c03565b6034546040517f78e0fae800000000000000000000000000000000000000000000000000000000815260ff8089166004830152871660248201526044810186905260648101859052608481018490526000916001600160a01b0316906378e0fae89060a4016020604051808303816000875af1158015611eaa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ece9190613635565b9050611f07338260378960ff1681548110611eeb57611eeb61350c565b6000918252602090912001546001600160a01b03169190612cb4565b600180559695505050505050565b6034546040517f75d8e3e400000000000000000000000000000000000000000000000000000000815260ff808616600483015284166024820152604481018390526000916001600160a01b0316906375d8e3e490606401602060405180830381865afa158015611f89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fad9190613635565b90505b9392505050565b600054610100900460ff1615808015611fd75750600054600160ff909116105b80611ff15750303b158015611ff1575060005460ff166001145b6120635760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016102f1565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905580156120c157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b6120c9612d02565b60005b60208160ff161015612231576040517f82b8660000000000000000000000000000000000000000000000000000000000815260ff821660048201526001600160a01b038616906382b8660090602401602060405180830381865afa925050508015612154575060408051601f3d908101601f191682019092526121519181019061371b565b60015b1561223157603580546001810182556000919091527fcfa4bec1d3298408bb5afcfcd9c430549c5b31f8aa5c5848151c0a55f473c34d0180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556121ea90877fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff612d89565b61221e6001600160a01b038216867fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff612d89565b50806122298161353b565b9150506120cc565b60018160ff16116122a95760405162461bcd60e51b8152602060048201526024808201527f6261736553776170206d7573742068617665206174206c65617374203220746f60448201527f6b656e730000000000000000000000000000000000000000000000000000000060648201526084016102f1565b506000805b60208160ff16101561241b576040517f82b8660000000000000000000000000000000000000000000000000000000000815260ff821660048201526001600160a01b038616906382b8660090602401602060405180830381865afa925050508015612336575060408051601f3d908101601f191682019092526123339181019061371b565b60015b1561241b576036805460018181019092557f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b80180546001600160a01b0384167fffffffffffffffffffffffff000000000000000000000000000000000000000091821681179092556037805493840181556000527f42a7b7dd785cd69714a189dffb3fd7d7174edc9ece837694ce50f7078f7c31ae90920180549092168117909155909250829061240890877fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff612d89565b50806124138161353b565b9150506122ae565b60018160ff16116124935760405162461bcd60e51b8152602060048201526024808201527f6d65746153776170206d7573742068617665206174206c65617374203220746f60448201527f6b656e730000000000000000000000000000000000000000000000000000000060648201526084016102f1565b5060356000815481106124a8576124a861350c565b600091825260209091200154603780546001600160a01b03909216916124d0906001906134ca565b815481106124e0576124e061350c565b600091825260209091200180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039290921691909117905560015b60355460ff821610156125ae57603760358260ff16815481106125495761254961350c565b60009182526020808320909101548354600181018555938352912090910180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03909216919091179055806125a68161353b565b915050612524565b506125e36001600160a01b038216867fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff612d89565b6126176001600160a01b038416857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff612d89565b50603380546001600160a01b038087167fffffffffffffffffffffffff00000000000000000000000000000000000000009283161790925560348054868416908316179055603880549285169290911691909117905580156126d057600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b603654600090819067ffffffffffffffff8111156126f6576126f66134dd565b60405190808252806020026020018201604052801561271f578160200160208202803683370190505b5060355490915060009067ffffffffffffffff811115612741576127416134dd565b60405190808252806020026020018201604052801561276a578160200160208202803683370190505b50905060006001835161277d91906134ca565b905060005b818160ff1610156127db5787878260ff168181106127a2576127a261350c565b90506020020135848260ff16815181106127be576127be61350c565b6020908102919091010152806127d38161353b565b915050612782565b5060005b82518160ff1610156128425787876127fa60ff8416856134b7565b8181106128095761280961350c565b90506020020135838260ff16815181106128255761282561350c565b60209081029190910101528061283a8161353b565b9150506127df565b506033546040517fe6ab28060000000000000000000000000000000000000000000000000000000081526000916001600160a01b03169063e6ab28069061288f9086908a906004016136a5565b602060405180830381865afa1580156128ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128d09190613635565b9050808483815181106128e5576128e561350c565b60209081029190910101526034546040517fe6ab28060000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063e6ab28069061293b9087908a906004016136a5565b602060405180830381865afa158015612958573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061297c9190613635565b98975050505050505050565b6034546040517ff2fad2b6000000000000000000000000000000000000000000000000000000008152600481018390526060916000916001600160a01b039091169063f2fad2b690602401600060405180830381865afa1580156129f0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612a189190810190613583565b9050600060018251612a2a91906134ca565b60335483519192506000916001600160a01b039091169063f2fad2b690859060ff8616908110612a5c57612a5c61350c565b60200260200101516040518263ffffffff1660e01b8152600401612a8291815260200190565b600060405180830381865afa158015612a9f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612ac79190810190613583565b9050600081518360ff16612adb91906134b7565b67ffffffffffffffff811115612af357612af36134dd565b604051908082528060200260200182016040528015612b1c578160200160208202803683370190505b50905060005b8360ff168160ff161015612b7f57848160ff1681518110612b4557612b4561350c565b6020026020010151828260ff1681518110612b6257612b6261350c565b602090810291909101015280612b778161353b565b915050612b22565b5060005b82518160ff161015612be957828160ff1681518110612ba457612ba461350c565b6020026020010151828286612bb99190613667565b60ff1681518110612bcc57612bcc61350c565b602090810291909101015280612be18161353b565b915050612b83565b5095945050505050565b603681815481106108b657600080fd5b6040516001600160a01b03808516602483015283166044820152606481018290526126d09085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612ed7565b6040516001600160a01b038316602482015260448101829052612cfd9084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401612c50565b505050565b600054610100900460ff16612d7f5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016102f1565b612d87612fbc565b565b801580612e1c57506040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015612df6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e1a9190613635565b155b612e8e5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084016102f1565b6040516001600160a01b038316602482015260448101829052612cfd9084907f095ea7b30000000000000000000000000000000000000000000000000000000090606401612c50565b6000612f2c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661303f9092919063ffffffff16565b805190915015612cfd5780806020019051810190612f4a9190613738565b612cfd5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016102f1565b600054610100900460ff166130395760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016102f1565b60018055565b6060611fad8484600085856001600160a01b0385163b6130a15760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102f1565b600080866001600160a01b031685876040516130bd9190613779565b60006040518083038185875af1925050503d80600081146130fa576040519150601f19603f3d011682016040523d82523d6000602084013e6130ff565b606091505b509150915061310f82828661311a565b979650505050505050565b60608315613129575081611fb0565b8251156131395782518084602001fd5b8160405162461bcd60e51b81526004016102f19190613795565b60008083601f84011261316557600080fd5b50813567ffffffffffffffff81111561317d57600080fd5b6020830191508360208260051b850101111561319857600080fd5b9250929050565b600080600080606085870312156131b557600080fd5b84359350602085013567ffffffffffffffff8111156131d357600080fd5b6131df87828801613153565b9598909750949560400135949350505050565b600081518084526020808501945080840160005b8381101561322257815187529582019590820190600101613206565b509495945050505050565b602081526000611fb060208301846131f2565b60006020828403121561325257600080fd5b5035919050565b803560ff8116811461326a57600080fd5b919050565b6000806040838503121561328257600080fd5b8235915061329260208401613259565b90509250929050565b600080600080608085870312156132b157600080fd5b843593506132c160208601613259565b93969395505050506040820135916060013590565b600080600080606085870312156132ec57600080fd5b843567ffffffffffffffff81111561330357600080fd5b61330f87828801613153565b90989097506020870135966040013595509350505050565b60006020828403121561333957600080fd5b611fb082613259565b600080600080600060a0868803121561335a57600080fd5b61336386613259565b945061337160208701613259565b94979496505050506040830135926060810135926080909101359150565b6000806000606084860312156133a457600080fd5b6133ad84613259565b92506133bb60208501613259565b9150604084013590509250925092565b6001600160a01b03811681146133e057600080fd5b50565b6000806000606084860312156133f857600080fd5b8335613403816133cb565b92506020840135613413816133cb565b91506040840135613423816133cb565b809150509250925092565b80151581146133e057600080fd5b60008060006040848603121561345157600080fd5b833567ffffffffffffffff81111561346857600080fd5b61347486828701613153565b90945092505060208401356134238161342e565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820180821115610abf57610abf613488565b81810381811115610abf57610abf613488565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060ff821660ff810361355157613551613488565b60010192915050565b83815260606020820152600061357360608301856131f2565b9050826040830152949350505050565b6000602080838503121561359657600080fd5b825167ffffffffffffffff808211156135ae57600080fd5b818501915085601f8301126135c257600080fd5b8151818111156135d4576135d46134dd565b8060051b604051601f19603f830116810181811085821117156135f9576135f96134dd565b60405291825284820192508381018501918883111561361757600080fd5b938501935b8285101561297c5784518452938501939285019261361c565b60006020828403121561364757600080fd5b5051919050565b60ff8281168282160390811115610abf57610abf613488565b60ff8181168382160190811115610abf57610abf613488565b60608152600061369360608301866131f2565b60208301949094525060400152919050565b6040815260006136b860408301856131f2565b905082151560208301529392505050565b8082028115828204841417610abf57610abf613488565b600082613716577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60006020828403121561372d57600080fd5b8151611fb0816133cb565b60006020828403121561374a57600080fd5b8151611fb08161342e565b60005b83811015613770578181015183820152602001613758565b50506000910152565b6000825161378b818460208701613755565b9190910192915050565b60208152600082518060208401526137b4816040850160208701613755565b601f01601f1916919091016040019291505056fea2646970667358221220c3ae2178735d9262c9364d64b9eafa791c70cceff0647e8e35c0f5dbcc40adba64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addLiquidity(uint256[],uint256,uint256)": {
        "params": {
          "amounts": "the amounts of each token to add, in their native precision",
          "deadline": "latest timestamp to accept this transaction",
          "minToMint": "the minimum LP tokens adding this amount of liquidity should mint, otherwise revert. Handy for front-running mitigation"
        },
        "returns": {
          "_0": "amount of LP token user minted and received"
        }
      },
      "calculateRemoveLiquidity(uint256)": {
        "params": {
          "amount": "the amount of LP tokens that would be burned on withdrawal"
        },
        "returns": {
          "_0": "array of token balances that the user will receive"
        }
      },
      "calculateRemoveLiquidityOneToken(uint256,uint8)": {
        "params": {
          "tokenAmount": "the amount of LP token to burn",
          "tokenIndex": "index of which token will be withdrawn"
        },
        "returns": {
          "_0": "availableTokenAmount calculated amount of underlying token available to withdraw"
        }
      },
      "calculateSwap(uint8,uint8,uint256)": {
        "params": {
          "dx": "the amount of tokens the user wants to sell. If the token charges a fee on transfers, use the amount that gets transferred after the fee.",
          "tokenIndexFrom": "the token the user wants to sell",
          "tokenIndexTo": "the token the user wants to buy"
        },
        "returns": {
          "_0": "amount of tokens the user will receive"
        }
      },
      "calculateTokenAmount(uint256[],bool)": {
        "details": "This shouldn't be used outside frontends for user estimates.",
        "params": {
          "amounts": "an array of token amounts to deposit or withdrawal, corresponding to pooledTokens. The amount should be in each pooled token's native precision. If a token charges a fee on transfers, use the amount that gets transferred after the fee.",
          "deposit": "whether this is a deposit or a withdrawal"
        },
        "returns": {
          "_0": "token amount the user will receive"
        }
      },
      "getToken(uint8)": {
        "params": {
          "index": "the index of the token"
        },
        "returns": {
          "_0": "address of the token at given index"
        }
      },
      "initialize(address,address,address)": {
        "params": {
          "_baseSwap": "the address of the base Swap contract",
          "_metaLPToken": "the address of the MetaSwap LP token contract",
          "_metaSwap": "the address of the MetaSwap contract"
        }
      },
      "removeLiquidity(uint256,uint256[],uint256)": {
        "details": "Liquidity can always be removed, even when the pool is paused.",
        "params": {
          "amount": "the amount of LP tokens to burn",
          "deadline": "latest timestamp to accept this transaction",
          "minAmounts": "the minimum amounts of each token in the pool        acceptable for this burn. Useful as a front-running mitigation"
        },
        "returns": {
          "_0": "amounts of tokens user received"
        }
      },
      "removeLiquidityImbalance(uint256[],uint256,uint256)": {
        "params": {
          "amounts": "how much of each token to withdraw",
          "deadline": "latest timestamp to accept this transaction",
          "maxBurnAmount": "the max LP token provider is willing to pay to remove liquidity. Useful as a front-running mitigation."
        },
        "returns": {
          "_0": "amount of LP tokens burned"
        }
      },
      "removeLiquidityOneToken(uint256,uint8,uint256,uint256)": {
        "params": {
          "deadline": "latest timestamp to accept this transaction",
          "minAmount": "the minimum amount to withdraw, otherwise revert",
          "tokenAmount": "the amount of the token you want to receive",
          "tokenIndex": "the index of the token you want to receive"
        },
        "returns": {
          "_0": "amount of chosen token user received"
        }
      },
      "swap(uint8,uint8,uint256,uint256,uint256)": {
        "params": {
          "deadline": "latest timestamp to accept this transaction",
          "dx": "the amount of tokens the user wants to swap from",
          "minDy": "the min amount the user would like to receive, or revert.",
          "tokenIndexFrom": "the token the user wants to swap from",
          "tokenIndexTo": "the token the user wants to swap to"
        }
      }
    },
    "title": "MetaSwapDeposit",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addLiquidity(uint256[],uint256,uint256)": {
        "notice": "Add liquidity to the pool with the given amounts of tokens"
      },
      "calculateRemoveLiquidity(uint256)": {
        "notice": "A simple method to calculate amount of each underlying tokens that is returned upon burning given amount of LP tokens"
      },
      "calculateRemoveLiquidityOneToken(uint256,uint8)": {
        "notice": "Calculate the amount of underlying token available to withdraw when withdrawing via only single token"
      },
      "calculateSwap(uint8,uint8,uint256)": {
        "notice": "Calculate amount of tokens you receive on swap"
      },
      "calculateTokenAmount(uint256[],bool)": {
        "notice": "A simple method to calculate prices from deposits or withdrawals, excluding fees but including slippage. This is helpful as an input into the various \"min\" parameters on calls to fight front-running. When withdrawing from the base pool in imbalanced fashion, the recommended slippage setting is 0.2% or higher."
      },
      "getToken(uint8)": {
        "notice": "Returns the address of the pooled token at given index. Reverts if tokenIndex is out of range. This is a flattened representation of the pooled tokens."
      },
      "initialize(address,address,address)": {
        "notice": "Sets the address for the base Swap contract, MetaSwap contract, and the MetaSwap LP token contract."
      },
      "removeLiquidity(uint256,uint256[],uint256)": {
        "notice": "Burn LP tokens to remove liquidity from the pool. Withdraw fee that decays linearly over period of 4 weeks since last deposit will apply."
      },
      "removeLiquidityImbalance(uint256[],uint256,uint256)": {
        "notice": "Remove liquidity from the pool, weighted differently than the pool's current balances. Withdraw fee that decays linearly over period of 4 weeks since last deposit will apply."
      },
      "removeLiquidityOneToken(uint256,uint8,uint256,uint256)": {
        "notice": "Remove liquidity from the pool all in one token. Withdraw fee that decays linearly over period of 4 weeks since last deposit will apply."
      },
      "swap(uint8,uint8,uint256,uint256,uint256)": {
        "notice": "Swap two underlying tokens using the meta pool and the base pool"
      }
    },
    "notice": "This contract flattens the LP token in a MetaSwap pool for easier user access. MetaSwap must be deployed before this contract can be initialized successfully. For example, suppose there exists a base Swap pool consisting of [DAI, USDC, USDT]. Then a MetaSwap pool can be created with [sUSD, BaseSwapLPToken] to allow trades between either the LP token or the underlying tokens and sUSD. MetaSwapDeposit flattens the LP token and remaps them to a single array, allowing users to ignore the dependency on BaseSwapLPToken. Using the above example, MetaSwapDeposit can act as a Swap containing [sUSD, DAI, USDC, USDT] tokens.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1654,
        "contract": "contracts/meta/MetaSwapDepositV1.sol:MetaSwapDepositV1",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1657,
        "contract": "contracts/meta/MetaSwapDepositV1.sol:MetaSwapDepositV1",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1939,
        "contract": "contracts/meta/MetaSwapDepositV1.sol:MetaSwapDepositV1",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1983,
        "contract": "contracts/meta/MetaSwapDepositV1.sol:MetaSwapDepositV1",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7988,
        "contract": "contracts/meta/MetaSwapDepositV1.sol:MetaSwapDepositV1",
        "label": "baseSwap",
        "offset": 0,
        "slot": "51",
        "type": "t_contract(ISwapV2)7968"
      },
      {
        "astId": 7991,
        "contract": "contracts/meta/MetaSwapDepositV1.sol:MetaSwapDepositV1",
        "label": "metaSwap",
        "offset": 0,
        "slot": "52",
        "type": "t_contract(IMetaSwapV1)7763"
      },
      {
        "astId": 7995,
        "contract": "contracts/meta/MetaSwapDepositV1.sol:MetaSwapDepositV1",
        "label": "baseTokens",
        "offset": 0,
        "slot": "53",
        "type": "t_array(t_contract(IERC20)856)dyn_storage"
      },
      {
        "astId": 7999,
        "contract": "contracts/meta/MetaSwapDepositV1.sol:MetaSwapDepositV1",
        "label": "metaTokens",
        "offset": 0,
        "slot": "54",
        "type": "t_array(t_contract(IERC20)856)dyn_storage"
      },
      {
        "astId": 8003,
        "contract": "contracts/meta/MetaSwapDepositV1.sol:MetaSwapDepositV1",
        "label": "tokens",
        "offset": 0,
        "slot": "55",
        "type": "t_array(t_contract(IERC20)856)dyn_storage"
      },
      {
        "astId": 8006,
        "contract": "contracts/meta/MetaSwapDepositV1.sol:MetaSwapDepositV1",
        "label": "metaLPToken",
        "offset": 0,
        "slot": "56",
        "type": "t_contract(IERC20)856"
      }
    ],
    "types": {
      "t_array(t_contract(IERC20)856)dyn_storage": {
        "base": "t_contract(IERC20)856",
        "encoding": "dynamic_array",
        "label": "contract IERC20[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)856": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IMetaSwapV1)7763": {
        "encoding": "inplace",
        "label": "contract IMetaSwapV1",
        "numberOfBytes": "20"
      },
      "t_contract(ISwapV2)7968": {
        "encoding": "inplace",
        "label": "contract ISwapV2",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}