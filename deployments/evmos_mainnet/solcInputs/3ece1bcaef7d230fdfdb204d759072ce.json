{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/IMasterChef.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\nimport \"@boringcrypto/boring-solidity-e06e943/contracts/libraries/BoringERC20.sol\";\n\ninterface IMasterChef {\n    using BoringERC20 for IERC20;\n    struct UserInfo {\n        uint256 amount; // How many LP tokens the user has provided.\n        uint256 rewardDebt; // Reward debt. See explanation below.\n    }\n\n    struct PoolInfo {\n        IERC20 lpToken; // Address of LP token contract.\n        uint256 allocPoint; // How many allocation points assigned to this pool. SADDLE to distribute per block.\n        uint256 lastRewardBlock; // Last block number that SADDLE distribution occurs.\n        uint256 accSaddlePerShare; // Accumulated SADDLE per share, times 1e12. See below.\n    }\n\n    function poolInfo(uint256 pid)\n        external\n        view\n        returns (IMasterChef.PoolInfo memory);\n\n    function totalAllocPoint() external view returns (uint256);\n\n    function deposit(uint256 _pid, uint256 _amount) external;\n}\n"
    },
    "@boringcrypto/boring-solidity-e06e943/contracts/libraries/BoringERC20.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.6.12;\r\n\r\nimport \"../interfaces/IERC20.sol\";\r\n\r\nlibrary BoringERC20 {\r\n    function safeSymbol(IERC20 token) internal view returns(string memory) {\r\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x95d89b41));\r\n        return success && data.length > 0 ? abi.decode(data, (string)) : \"???\";\r\n    }\r\n\r\n    function safeName(IERC20 token) internal view returns(string memory) {\r\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x06fdde03));\r\n        return success && data.length > 0 ? abi.decode(data, (string)) : \"???\";\r\n    }\r\n\r\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\r\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x313ce567));\r\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\r\n    }\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 amount) internal {\r\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(0xa9059cbb, to, amount));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"BoringERC20: Transfer failed\");\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 amount) internal {\r\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(0x23b872dd, from, to, amount));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"BoringERC20: TransferFrom failed\");\r\n    }\r\n}"
    },
    "@boringcrypto/boring-solidity-e06e943/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    // EIP 2612\r\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n}"
    },
    "contracts/rewards/MiniChefV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"@boringcrypto/boring-solidity-e06e943/contracts/libraries/BoringMath.sol\";\nimport \"@boringcrypto/boring-solidity-e06e943/contracts/BoringBatchable.sol\";\nimport \"@boringcrypto/boring-solidity-e06e943/contracts/BoringOwnable.sol\";\nimport \"../libraries/SignedSafeMath.sol\";\nimport \"../interfaces/IRewarder.sol\";\nimport \"../interfaces/IMasterChef.sol\";\n\n/// @notice The (older) MasterChef contract gives out a constant number of SADDLE tokens per block.\n/// It is the only address with minting rights for SADDLE.\n/// The idea for this MasterChef V2 (MCV2) contract is therefore to be the owner of a dummy token\n/// that is deposited into the MasterChef V1 (MCV1) contract.\n/// The allocation point for this pool on MCV1 is the total allocation point for all pools that receive double incentives.\ncontract MiniChefV2 is BoringOwnable, BoringBatchable {\n    using BoringMath for uint256;\n    using BoringMath128 for uint128;\n    using BoringERC20 for IERC20;\n    using SignedSafeMath for int256;\n\n    /// @notice Info of each MCV2 user.\n    /// `amount` LP token amount the user has provided.\n    /// `rewardDebt` The amount of SADDLE entitled to the user.\n    struct UserInfo {\n        uint256 amount;\n        int256 rewardDebt;\n    }\n\n    /// @notice Info of each MCV2 pool.\n    /// `allocPoint` The amount of allocation points assigned to the pool.\n    /// Also known as the amount of SADDLE to distribute per block.\n    struct PoolInfo {\n        uint128 accSaddlePerShare;\n        uint64 lastRewardTime;\n        uint64 allocPoint;\n    }\n\n    /// @notice Address of SADDLE contract.\n    IERC20 public immutable SADDLE;\n\n    /// @notice Info of each MCV2 pool.\n    PoolInfo[] public poolInfo;\n    /// @notice Address of the LP token for each MCV2 pool.\n    IERC20[] public lpToken;\n    /// @notice Address of each `IRewarder` contract in MCV2.\n    IRewarder[] public rewarder;\n\n    /// @notice Info of each user that stakes LP tokens.\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n    /// @dev Total allocation points. Must be the sum of all allocation points in all pools.\n    uint256 public totalAllocPoint;\n\n    uint256 public saddlePerSecond;\n    uint256 private constant ACC_SADDLE_PRECISION = 1e12;\n\n    event Deposit(\n        address indexed user,\n        uint256 indexed pid,\n        uint256 amount,\n        address indexed to\n    );\n    event Withdraw(\n        address indexed user,\n        uint256 indexed pid,\n        uint256 amount,\n        address indexed to\n    );\n    event EmergencyWithdraw(\n        address indexed user,\n        uint256 indexed pid,\n        uint256 amount,\n        address indexed to\n    );\n    event Harvest(address indexed user, uint256 indexed pid, uint256 amount);\n    event LogPoolAddition(\n        uint256 indexed pid,\n        uint256 allocPoint,\n        IERC20 indexed lpToken,\n        IRewarder indexed rewarder\n    );\n    event LogSetPool(\n        uint256 indexed pid,\n        uint256 allocPoint,\n        IRewarder indexed rewarder,\n        bool overwrite\n    );\n    event LogUpdatePool(\n        uint256 indexed pid,\n        uint64 lastRewardTime,\n        uint256 lpSupply,\n        uint256 accSaddlePerShare\n    );\n    event LogSaddlePerSecond(uint256 saddlePerSecond);\n\n    /// @param _saddle The SADDLE token contract address.\n    constructor(IERC20 _saddle) public {\n        SADDLE = _saddle;\n    }\n\n    /// @notice Returns the number of MCV2 pools.\n    function poolLength() public view returns (uint256 pools) {\n        pools = poolInfo.length;\n    }\n\n    /// @notice Add a new LP to the pool. Can only be called by the owner.\n    /// DO NOT add the same LP token more than once. Rewards will be messed up if you do.\n    /// @param allocPoint AP of the new pool.\n    /// @param _lpToken Address of the LP ERC-20 token.\n    /// @param _rewarder Address of the rewarder delegate.\n    function add(\n        uint256 allocPoint,\n        IERC20 _lpToken,\n        IRewarder _rewarder\n    ) public onlyOwner {\n        totalAllocPoint = totalAllocPoint.add(allocPoint);\n        lpToken.push(_lpToken);\n        rewarder.push(_rewarder);\n\n        poolInfo.push(\n            PoolInfo({\n                allocPoint: allocPoint.to64(),\n                lastRewardTime: block.timestamp.to64(),\n                accSaddlePerShare: 0\n            })\n        );\n        emit LogPoolAddition(\n            lpToken.length.sub(1),\n            allocPoint,\n            _lpToken,\n            _rewarder\n        );\n    }\n\n    /// @notice Update the given pool's SADDLE allocation point and `IRewarder` contract. Can only be called by the owner.\n    /// @param _pid The index of the pool. See `poolInfo`.\n    /// @param _allocPoint New AP of the pool.\n    /// @param _rewarder Address of the rewarder delegate.\n    /// @param overwrite True if _rewarder should be `set`. Otherwise `_rewarder` is ignored.\n    function set(\n        uint256 _pid,\n        uint256 _allocPoint,\n        IRewarder _rewarder,\n        bool overwrite\n    ) public onlyOwner {\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(\n            _allocPoint\n        );\n        poolInfo[_pid].allocPoint = _allocPoint.to64();\n        if (overwrite) {\n            rewarder[_pid] = _rewarder;\n        }\n        emit LogSetPool(\n            _pid,\n            _allocPoint,\n            overwrite ? _rewarder : rewarder[_pid],\n            overwrite\n        );\n    }\n\n    /// @notice Sets the saddle per second to be distributed. Can only be called by the owner.\n    /// @param _saddlePerSecond The amount of Saddle to be distributed per second.\n    function setSaddlePerSecond(uint256 _saddlePerSecond) public onlyOwner {\n        saddlePerSecond = _saddlePerSecond;\n        emit LogSaddlePerSecond(_saddlePerSecond);\n    }\n\n    /// @notice View function to see pending SADDLE on frontend.\n    /// @param _pid The index of the pool. See `poolInfo`.\n    /// @param _user Address of user.\n    /// @return pending SADDLE reward for a given user.\n    function pendingSaddle(uint256 _pid, address _user)\n        external\n        view\n        returns (uint256 pending)\n    {\n        PoolInfo memory pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_user];\n        uint256 accSaddlePerShare = pool.accSaddlePerShare;\n        uint256 lpSupply = lpToken[_pid].balanceOf(address(this));\n        if (block.timestamp > pool.lastRewardTime && lpSupply != 0) {\n            uint256 time = block.timestamp.sub(pool.lastRewardTime);\n            uint256 saddleReward = time.mul(saddlePerSecond).mul(\n                pool.allocPoint\n            ) / totalAllocPoint;\n            accSaddlePerShare = accSaddlePerShare.add(\n                saddleReward.mul(ACC_SADDLE_PRECISION) / lpSupply\n            );\n        }\n        pending = int256(\n            user.amount.mul(accSaddlePerShare) / ACC_SADDLE_PRECISION\n        ).sub(user.rewardDebt).toUInt256();\n    }\n\n    /// @notice Update reward variables for all pools. Be careful of gas spending!\n    /// @param pids Pool IDs of all to be updated. Make sure to update all active pools.\n    function massUpdatePools(uint256[] calldata pids) external {\n        uint256 len = pids.length;\n        for (uint256 i = 0; i < len; ++i) {\n            updatePool(pids[i]);\n        }\n    }\n\n    /// @notice Update reward variables of the given pool.\n    /// @param pid The index of the pool. See `poolInfo`.\n    /// @return pool Returns the pool that was updated.\n    function updatePool(uint256 pid) public returns (PoolInfo memory pool) {\n        pool = poolInfo[pid];\n        if (block.timestamp > pool.lastRewardTime) {\n            uint256 lpSupply = lpToken[pid].balanceOf(address(this));\n            if (lpSupply > 0) {\n                uint256 time = block.timestamp.sub(pool.lastRewardTime);\n                uint256 saddleReward = time.mul(saddlePerSecond).mul(\n                    pool.allocPoint\n                ) / totalAllocPoint;\n                pool.accSaddlePerShare = pool.accSaddlePerShare.add(\n                    (saddleReward.mul(ACC_SADDLE_PRECISION) / lpSupply).to128()\n                );\n            }\n            pool.lastRewardTime = block.timestamp.to64();\n            poolInfo[pid] = pool;\n            emit LogUpdatePool(\n                pid,\n                pool.lastRewardTime,\n                lpSupply,\n                pool.accSaddlePerShare\n            );\n        }\n    }\n\n    /// @notice Deposit LP tokens to MCV2 for SADDLE allocation.\n    /// @param pid The index of the pool. See `poolInfo`.\n    /// @param amount LP token amount to deposit.\n    /// @param to The receiver of `amount` deposit benefit.\n    function deposit(\n        uint256 pid,\n        uint256 amount,\n        address to\n    ) public {\n        PoolInfo memory pool = updatePool(pid);\n        UserInfo storage user = userInfo[pid][to];\n\n        // Effects\n        user.amount = user.amount.add(amount);\n        user.rewardDebt = user.rewardDebt.add(\n            int256(amount.mul(pool.accSaddlePerShare) / ACC_SADDLE_PRECISION)\n        );\n\n        // Interactions\n        IRewarder _rewarder = rewarder[pid];\n        if (address(_rewarder) != address(0)) {\n            _rewarder.onSaddleReward(pid, to, to, 0, user.amount);\n        }\n\n        lpToken[pid].safeTransferFrom(msg.sender, address(this), amount);\n\n        emit Deposit(msg.sender, pid, amount, to);\n    }\n\n    /// @notice Withdraw LP tokens from MCV2.\n    /// @param pid The index of the pool. See `poolInfo`.\n    /// @param amount LP token amount to withdraw.\n    /// @param to Receiver of the LP tokens.\n    function withdraw(\n        uint256 pid,\n        uint256 amount,\n        address to\n    ) public {\n        PoolInfo memory pool = updatePool(pid);\n        UserInfo storage user = userInfo[pid][msg.sender];\n\n        // Effects\n        user.rewardDebt = user.rewardDebt.sub(\n            int256(amount.mul(pool.accSaddlePerShare) / ACC_SADDLE_PRECISION)\n        );\n        user.amount = user.amount.sub(amount);\n\n        // Interactions\n        IRewarder _rewarder = rewarder[pid];\n        if (address(_rewarder) != address(0)) {\n            _rewarder.onSaddleReward(pid, msg.sender, to, 0, user.amount);\n        }\n\n        lpToken[pid].safeTransfer(to, amount);\n\n        emit Withdraw(msg.sender, pid, amount, to);\n    }\n\n    /// @notice Harvest proceeds for transaction sender to `to`.\n    /// @param pid The index of the pool. See `poolInfo`.\n    /// @param to Receiver of SADDLE rewards.\n    function harvest(uint256 pid, address to) public {\n        PoolInfo memory pool = updatePool(pid);\n        UserInfo storage user = userInfo[pid][msg.sender];\n        int256 accumulatedSaddle = int256(\n            user.amount.mul(pool.accSaddlePerShare) / ACC_SADDLE_PRECISION\n        );\n        uint256 _pendingSaddle = accumulatedSaddle\n            .sub(user.rewardDebt)\n            .toUInt256();\n\n        // Effects\n        user.rewardDebt = accumulatedSaddle;\n\n        // Interactions\n        if (_pendingSaddle != 0) {\n            SADDLE.safeTransfer(to, _pendingSaddle);\n        }\n\n        IRewarder _rewarder = rewarder[pid];\n        if (address(_rewarder) != address(0)) {\n            _rewarder.onSaddleReward(\n                pid,\n                msg.sender,\n                to,\n                _pendingSaddle,\n                user.amount\n            );\n        }\n\n        emit Harvest(msg.sender, pid, _pendingSaddle);\n    }\n\n    /// @notice Withdraw LP tokens from MCV2 and harvest proceeds for transaction sender to `to`.\n    /// @param pid The index of the pool. See `poolInfo`.\n    /// @param amount LP token amount to withdraw.\n    /// @param to Receiver of the LP tokens and SADDLE rewards.\n    function withdrawAndHarvest(\n        uint256 pid,\n        uint256 amount,\n        address to\n    ) public {\n        PoolInfo memory pool = updatePool(pid);\n        UserInfo storage user = userInfo[pid][msg.sender];\n        int256 accumulatedSaddle = int256(\n            user.amount.mul(pool.accSaddlePerShare) / ACC_SADDLE_PRECISION\n        );\n        uint256 _pendingSaddle = accumulatedSaddle\n            .sub(user.rewardDebt)\n            .toUInt256();\n\n        // Effects\n        user.rewardDebt = accumulatedSaddle.sub(\n            int256(amount.mul(pool.accSaddlePerShare) / ACC_SADDLE_PRECISION)\n        );\n        user.amount = user.amount.sub(amount);\n\n        // Interactions\n        SADDLE.safeTransfer(to, _pendingSaddle);\n\n        IRewarder _rewarder = rewarder[pid];\n        if (address(_rewarder) != address(0)) {\n            _rewarder.onSaddleReward(\n                pid,\n                msg.sender,\n                to,\n                _pendingSaddle,\n                user.amount\n            );\n        }\n\n        lpToken[pid].safeTransfer(to, amount);\n\n        emit Withdraw(msg.sender, pid, amount, to);\n        emit Harvest(msg.sender, pid, _pendingSaddle);\n    }\n\n    /// @notice Withdraw without caring about rewards. EMERGENCY ONLY.\n    /// @param pid The index of the pool. See `poolInfo`.\n    /// @param to Receiver of the LP tokens.\n    function emergencyWithdraw(uint256 pid, address to) public {\n        UserInfo storage user = userInfo[pid][msg.sender];\n        uint256 amount = user.amount;\n        user.amount = 0;\n        user.rewardDebt = 0;\n\n        IRewarder _rewarder = rewarder[pid];\n        if (address(_rewarder) != address(0)) {\n            _rewarder.onSaddleReward(pid, msg.sender, to, 0, 0);\n        }\n\n        // Note: transfer can fail or succeed if `amount` is zero.\n        lpToken[pid].safeTransfer(to, amount);\n        emit EmergencyWithdraw(msg.sender, pid, amount, to);\n    }\n}\n"
    },
    "@boringcrypto/boring-solidity-e06e943/contracts/libraries/BoringMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n// a library for performing overflow-safe math, updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math)\r\nlibrary BoringMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {require((c = a + b) >= b, \"BoringMath: Add Overflow\");}\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {require((c = a - b) <= a, \"BoringMath: Underflow\");}\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {require(b == 0 || (c = a * b)/b == a, \"BoringMath: Mul Overflow\");}\r\n    function to128(uint256 a) internal pure returns (uint128 c) {\r\n        require(a <= uint128(-1), \"BoringMath: uint128 Overflow\");\r\n        c = uint128(a);\r\n    }\r\n    function to64(uint256 a) internal pure returns (uint64 c) {\r\n        require(a <= uint64(-1), \"BoringMath: uint64 Overflow\");\r\n        c = uint64(a);\r\n    }\r\n    function to32(uint256 a) internal pure returns (uint32 c) {\r\n        require(a <= uint32(-1), \"BoringMath: uint32 Overflow\");\r\n        c = uint32(a);\r\n    }\r\n}\r\n\r\nlibrary BoringMath128 {\r\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {require((c = a + b) >= b, \"BoringMath: Add Overflow\");}\r\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {require((c = a - b) <= a, \"BoringMath: Underflow\");}\r\n}\r\n\r\nlibrary BoringMath64 {\r\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {require((c = a + b) >= b, \"BoringMath: Add Overflow\");}\r\n    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {require((c = a - b) <= a, \"BoringMath: Underflow\");}\r\n}\r\n\r\nlibrary BoringMath32 {\r\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {require((c = a + b) >= b, \"BoringMath: Add Overflow\");}\r\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {require((c = a - b) <= a, \"BoringMath: Underflow\");}\r\n}"
    },
    "@boringcrypto/boring-solidity-e06e943/contracts/BoringBatchable.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\n// Audit on 5-Jan-2021 by Keno and BoringCrypto\r\n\r\n// P1 - P3: OK\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n// solhint-disable avoid-low-level-calls\r\n\r\nimport \"./libraries/BoringERC20.sol\";\r\n\r\n// T1 - T4: OK\r\ncontract BaseBoringBatchable {\r\n    function _getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\r\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\r\n        if (_returnData.length < 68) return \"Transaction reverted silently\";\r\n\r\n        assembly {\r\n            // Slice the sighash.\r\n            _returnData := add(_returnData, 0x04)\r\n        }\r\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\r\n    }    \r\n    \r\n    // F3 - F9: OK\r\n    // F1: External is ok here because this is the batch function, adding it to a batch makes no sense\r\n    // F2: Calls in the batch may be payable, delegatecall operates in the same context, so each call in the batch has access to msg.value\r\n    // C1 - C21: OK\r\n    // C3: The length of the loop is fully under user control, so can't be exploited\r\n    // C7: Delegatecall is only used on the same contract, so it's safe\r\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable returns(bool[] memory successes, bytes[] memory results) {\r\n        // Interactions\r\n        successes = new bool[](calls.length);\r\n        results = new bytes[](calls.length);\r\n        for (uint256 i = 0; i < calls.length; i++) {\r\n            (bool success, bytes memory result) = address(this).delegatecall(calls[i]);\r\n            require(success || !revertOnFail, _getRevertMsg(result));\r\n            successes[i] = success;\r\n            results[i] = result;\r\n        }\r\n    }\r\n}\r\n\r\n// T1 - T4: OK\r\ncontract BoringBatchable is BaseBoringBatchable {\r\n    // F1 - F9: OK\r\n    // F6: Parameters can be used front-run the permit and the user's permit will fail (due to nonce or other revert)\r\n    //     if part of a batch this could be used to grief once as the second call would not need the permit\r\n    // C1 - C21: OK\r\n    function permitToken(IERC20 token, address from, address to, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\r\n        // Interactions\r\n        // X1 - X5\r\n        token.permit(from, to, amount, deadline, v, r, s);\r\n    }\r\n}"
    },
    "@boringcrypto/boring-solidity-e06e943/contracts/BoringOwnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// Audit on 5-Jan-2021 by Keno and BoringCrypto\r\n\r\n// P1 - P3: OK\r\npragma solidity 0.6.12;\r\n\r\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\r\n// Edited by BoringCrypto\r\n\r\n// T1 - T4: OK\r\ncontract BoringOwnableData {\r\n    // V1 - V5: OK\r\n    address public owner;\r\n    // V1 - V5: OK\r\n    address public pendingOwner;\r\n}\r\n\r\n// T1 - T4: OK\r\ncontract BoringOwnable is BoringOwnableData {\r\n    // E1: OK\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () public {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    // F1 - F9: OK\r\n    // C1 - C21: OK\r\n    function transferOwnership(address newOwner, bool direct, bool renounce) public onlyOwner {\r\n        if (direct) {\r\n            // Checks\r\n            require(newOwner != address(0) || renounce, \"Ownable: zero address\");\r\n\r\n            // Effects\r\n            emit OwnershipTransferred(owner, newOwner);\r\n            owner = newOwner;\r\n            pendingOwner = address(0);\r\n        } else {\r\n            // Effects\r\n            pendingOwner = newOwner;\r\n        }\r\n    }\r\n\r\n    // F1 - F9: OK\r\n    // C1 - C21: OK\r\n    function claimOwnership() public {\r\n        address _pendingOwner = pendingOwner;\r\n        \r\n        // Checks\r\n        require(msg.sender == _pendingOwner, \"Ownable: caller != pending owner\");\r\n\r\n        // Effects\r\n        emit OwnershipTransferred(owner, _pendingOwner);\r\n        owner = _pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n\r\n    // M1 - M5: OK\r\n    // C1 - C21: OK\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n}"
    },
    "contracts/libraries/SignedSafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nlibrary SignedSafeMath {\n    int256 private constant _INT256_MIN = -2**255;\n\n    /**\n     * @dev Returns the multiplication of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(int256 a, int256 b) internal pure returns (int256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        require(\n            !(a == -1 && b == _INT256_MIN),\n            \"SignedSafeMath: multiplication overflow\"\n        );\n\n        int256 c = a * b;\n        require(c / a == b, \"SignedSafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two signed integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(int256 a, int256 b) internal pure returns (int256) {\n        require(b != 0, \"SignedSafeMath: division by zero\");\n        require(\n            !(b == -1 && a == _INT256_MIN),\n            \"SignedSafeMath: division overflow\"\n        );\n\n        int256 c = a / b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a - b;\n        require(\n            (b >= 0 && c <= a) || (b < 0 && c > a),\n            \"SignedSafeMath: subtraction overflow\"\n        );\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the addition of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a + b;\n        require(\n            (b >= 0 && c >= a) || (b < 0 && c < a),\n            \"SignedSafeMath: addition overflow\"\n        );\n\n        return c;\n    }\n\n    function toUInt256(int256 a) internal pure returns (uint256) {\n        require(a >= 0, \"Integer < 0\");\n        return uint256(a);\n    }\n}\n"
    },
    "contracts/interfaces/IRewarder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\nimport \"@boringcrypto/boring-solidity-e06e943/contracts/libraries/BoringERC20.sol\";\n\ninterface IRewarder {\n    using BoringERC20 for IERC20;\n\n    function onSaddleReward(\n        uint256 pid,\n        address user,\n        address recipient,\n        uint256 saddleAmount,\n        uint256 newLpAmount\n    ) external;\n\n    function pendingTokens(\n        uint256 pid,\n        address user,\n        uint256 saddleAmount\n    ) external view returns (IERC20[] memory, uint256[] memory);\n}\n"
    },
    "contracts/rewards/SimpleRewarder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"@boringcrypto/boring-solidity-e06e943/contracts/libraries/BoringERC20.sol\";\nimport \"@boringcrypto/boring-solidity-e06e943/contracts/libraries/BoringMath.sol\";\nimport \"@boringcrypto/boring-solidity-e06e943/contracts/BoringOwnable.sol\";\nimport \"../interfaces/IRewarder.sol\";\n\ninterface IMiniChef {\n    function lpToken(uint256 pid) external view returns (IERC20 _lpToken);\n}\n\n/**\n * @title SimpleRewarder\n * @notice Rewarder contract that can add one additional reward token to a specific PID in MiniChef.\n * Emission rate is controlled by the owner of this contract, independently from MiniChef's owner.\n * @author @0xKeno @weeb_mcgee\n */\ncontract SimpleRewarder is IRewarder, BoringOwnable {\n    using BoringMath for uint256;\n    using BoringMath128 for uint128;\n    using BoringERC20 for IERC20;\n\n    uint256 private constant ACC_TOKEN_PRECISION = 1e12;\n\n    /// @notice Info of each Rewarder user.\n    /// `amount` LP token amount the user has provided.\n    /// `rewardDebt` The amount of Reward Token entitled to the user.\n    struct UserInfo {\n        uint256 amount;\n        uint256 rewardDebt;\n    }\n\n    /// @notice Info of the rewarder pool\n    struct PoolInfo {\n        uint128 accToken1PerShare;\n        uint64 lastRewardTime;\n    }\n\n    /// @notice Address of the token that should be given out as rewards.\n    IERC20 public rewardToken;\n\n    /// @notice Var to track the rewarder pool.\n    PoolInfo public poolInfo;\n\n    /// @notice Info of each user that stakes LP tokens.\n    mapping(address => UserInfo) public userInfo;\n\n    /// @notice Total emission rate of the reward token per second\n    uint256 public rewardPerSecond;\n    /// @notice Address of the lp token that should be incentivized\n    IERC20 public masterLpToken;\n    /// @notice PID in MiniChef that corresponds to masterLpToken\n    uint256 public pid;\n\n    /// @notice MiniChef contract that will call this contract's callback function\n    address public immutable MINICHEF;\n\n    event LogOnReward(\n        address indexed user,\n        uint256 indexed pid,\n        uint256 amount,\n        address indexed to\n    );\n    event LogUpdatePool(\n        uint256 indexed pid,\n        uint64 lastRewardTime,\n        uint256 lpSupply,\n        uint256 accToken1PerShare\n    );\n    event LogRewardPerSecond(uint256 rewardPerSecond);\n    event LogInit(\n        IERC20 indexed rewardToken,\n        address owner,\n        uint256 rewardPerSecond,\n        IERC20 indexed masterLpToken\n    );\n\n    /**\n     * @notice Deploys this contract and sets immutable MiniChef address.\n     */\n    constructor(address _MINICHEF) public {\n        MINICHEF = _MINICHEF;\n    }\n\n    /**\n     * @notice Modifier to restrict caller to be only MiniChef\n     */\n    modifier onlyMiniChef() {\n        require(msg.sender == MINICHEF, \"Rewarder: caller is not MiniChef\");\n        _;\n    }\n\n    /**\n     * @notice Serves as the constructor for clones, as clones can't have a regular constructor.\n     * Initializes state variables with the given parameter.\n     * @param data abi encoded data in format of (IERC20 rewardToken, address owner, uint256 rewardPerSecond, IERC20 masterLpToken, uint256 pid).\n     */\n    function init(bytes calldata data) public payable {\n        require(rewardToken == IERC20(0), \"Rewarder: already initialized\");\n        address _owner;\n        (rewardToken, _owner, rewardPerSecond, masterLpToken, pid) = abi.decode(\n            data,\n            (IERC20, address, uint256, IERC20, uint256)\n        );\n        require(rewardToken != IERC20(0), \"Rewarder: bad rewardToken\");\n        require(\n            IMiniChef(MINICHEF).lpToken(pid) == masterLpToken,\n            \"Rewarder: bad pid or masterLpToken\"\n        );\n        transferOwnership(_owner, true, false);\n        emit LogInit(rewardToken, _owner, rewardPerSecond, masterLpToken);\n    }\n\n    /**\n     * @notice Callback function for when the user claims via the MiniChef contract.\n     * @param _pid PID of the pool it was called for\n     * @param _user address of the user who is claiming rewards\n     * @param to address to send the reward token to\n     * @param lpTokenAmount amount of total lp tokens that the user has it staked\n     */\n    function onSaddleReward(\n        uint256 _pid,\n        address _user,\n        address to,\n        uint256,\n        uint256 lpTokenAmount\n    ) external override onlyMiniChef {\n        require(pid == _pid, \"Rewarder: bad pid init\");\n\n        PoolInfo memory pool = updatePool();\n        UserInfo storage user = userInfo[_user];\n        uint256 pending;\n        if (user.amount > 0) {\n            pending = (user.amount.mul(pool.accToken1PerShare) /\n                ACC_TOKEN_PRECISION).sub(user.rewardDebt);\n            rewardToken.safeTransfer(to, pending);\n        }\n        user.amount = lpTokenAmount;\n        user.rewardDebt =\n            lpTokenAmount.mul(pool.accToken1PerShare) /\n            ACC_TOKEN_PRECISION;\n        emit LogOnReward(_user, pid, pending, to);\n    }\n\n    /**\n     * @notice Sets the reward token per second to be distributed. Can only be called by the owner.\n     * @param _rewardPerSecond The amount of reward token to be distributed per second.\n     */\n    function setRewardPerSecond(uint256 _rewardPerSecond) public onlyOwner {\n        rewardPerSecond = _rewardPerSecond;\n        emit LogRewardPerSecond(_rewardPerSecond);\n    }\n\n    /**\n     * @notice View function to see pending rewards for given address\n     * @param _user Address of user.\n     * @return pending reward for a given user.\n     */\n    function pendingToken(address _user) public view returns (uint256 pending) {\n        PoolInfo memory pool = poolInfo;\n        UserInfo storage user = userInfo[_user];\n        uint256 accToken1PerShare = pool.accToken1PerShare;\n        uint256 lpSupply = IMiniChef(MINICHEF).lpToken(pid).balanceOf(MINICHEF);\n        if (block.timestamp > pool.lastRewardTime && lpSupply != 0) {\n            uint256 time = block.timestamp.sub(pool.lastRewardTime);\n            uint256 reward = time.mul(rewardPerSecond);\n            accToken1PerShare = accToken1PerShare.add(\n                reward.mul(ACC_TOKEN_PRECISION) / lpSupply\n            );\n        }\n        pending = (user.amount.mul(accToken1PerShare) / ACC_TOKEN_PRECISION)\n            .sub(user.rewardDebt);\n    }\n\n    /**\n     * @notice Returns pending reward tokens addresses and reward amounts for given address.\n     * @dev Since SimpleRewarder supports only one additional reward, the returning arrays will only have one element.\n     * @param user address of the user\n     * @return rewardTokens array of reward tokens' addresses\n     * @return rewardAmounts array of reward tokens' amounts\n     */\n    function pendingTokens(\n        uint256,\n        address user,\n        uint256\n    )\n        external\n        view\n        override\n        returns (IERC20[] memory rewardTokens, uint256[] memory rewardAmounts)\n    {\n        IERC20[] memory _rewardTokens = new IERC20[](1);\n        _rewardTokens[0] = (rewardToken);\n        uint256[] memory _rewardAmounts = new uint256[](1);\n        _rewardAmounts[0] = pendingToken(user);\n        return (_rewardTokens, _rewardAmounts);\n    }\n\n    /**\n     * @notice Updates the stored rate of emission per share since the last time this function was called.\n     * @dev This is called whenever `onSaddleReward` is called to ensure the rewards are given out with the\n     * correct emission rate.\n     */\n    function updatePool() public returns (PoolInfo memory pool) {\n        pool = poolInfo;\n        if (block.timestamp > pool.lastRewardTime) {\n            uint256 lpSupply = IMiniChef(MINICHEF).lpToken(pid).balanceOf(\n                MINICHEF\n            );\n\n            if (lpSupply > 0) {\n                uint256 time = block.timestamp.sub(pool.lastRewardTime);\n                uint256 reward = time.mul(rewardPerSecond);\n                pool.accToken1PerShare = pool.accToken1PerShare.add(\n                    (reward.mul(ACC_TOKEN_PRECISION) / lpSupply).to128()\n                );\n            }\n            pool.lastRewardTime = block.timestamp.to64();\n            poolInfo = pool;\n            emit LogUpdatePool(\n                pid,\n                pool.lastRewardTime,\n                lpSupply,\n                pool.accToken1PerShare\n            );\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 10000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}