{
  "address": "0xC1F426d2b5151B139c0895b08c2310F7c804f1aD",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gasLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_gasPrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_SDL",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[2]",
          "name": "oldSubmissionData",
          "type": "uint256[2]"
        },
        {
          "indexed": false,
          "internalType": "uint256[2]",
          "name": "newSubmissionData",
          "type": "uint256[2]"
        }
      ],
      "name": "UpdateSubmissionData",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "bridge",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "check",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "basefee",
          "type": "uint256"
        }
      ],
      "name": "cost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gasLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_gasPrice",
          "type": "uint256"
        }
      ],
      "name": "setSubmissionData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x2dd0445213482c2294e99d6d0b4b357bad2833c47c1cc4413083782b6d62f90b",
  "receipt": {
    "to": null,
    "from": "0x5BDb37d0Ddea3A90F233c7B7F6b9394B6b2eef34",
    "contractAddress": "0xC1F426d2b5151B139c0895b08c2310F7c804f1aD",
    "transactionIndex": 141,
    "gasUsed": "1414792",
    "logsBloom": "0x
    "blockHash": "0x5af96d0546ec5370908a6867c545f1ce2c16f748275a15a2cae11ad92c4afeb2",
    "transactionHash": "0x2dd0445213482c2294e99d6d0b4b357bad2833c47c1cc4413083782b6d62f90b",
    "logs": [
      {
        "transactionIndex": 141,
        "blockNumber": 15916678,
        "transactionHash": "0x2dd0445213482c2294e99d6d0b4b357bad2833c47c1cc4413083782b6d62f90b",
        "address": "0xC1F426d2b5151B139c0895b08c2310F7c804f1aD",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005bdb37d0ddea3a90f233c7b7f6b9394b6b2eef34"
        ],
        "data": "0x",
        "logIndex": 251,
        "blockHash": "0x5af96d0546ec5370908a6867c545f1ce2c16f748275a15a2cae11ad92c4afeb2"
      },
      {
        "transactionIndex": 141,
        "blockNumber": 15916678,
        "transactionHash": "0x2dd0445213482c2294e99d6d0b4b357bad2833c47c1cc4413083782b6d62f90b",
        "address": "0xC1F426d2b5151B139c0895b08c2310F7c804f1aD",
        "topics": [
          "0x08304c417384e677bfe0075c0373b3004aec0f73a9f7cd734d5065fe679f31cb"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000000000000000000000000000000000003b023380",
        "logIndex": 252,
        "blockHash": "0x5af96d0546ec5370908a6867c545f1ce2c16f748275a15a2cae11ad92c4afeb2"
      },
      {
        "transactionIndex": 141,
        "blockNumber": 15916678,
        "transactionHash": "0x2dd0445213482c2294e99d6d0b4b357bad2833c47c1cc4413083782b6d62f90b",
        "address": "0xf1Dc500FdE233A4055e25e5BbF516372BC4F6871",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000c1f426d2b5151b139c0895b08c2310f7c804f1ad",
          "0x000000000000000000000000a3a7b6f88361f48403514059f1f16c8e78d60eec"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 253,
        "blockHash": "0x5af96d0546ec5370908a6867c545f1ce2c16f748275a15a2cae11ad92c4afeb2"
      }
    ],
    "blockNumber": 15916678,
    "cumulativeGasUsed": "13083252",
    "status": 1,
    "byzantium": true
  },
  "args": [1000000, 990000000, "0xf1Dc500FdE233A4055e25e5BbF516372BC4F6871"],
  "numDeployments": 1,
  "solcInputHash": "38ac894988ebf4d6035a93b121cacae1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_SDL\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"oldSubmissionData\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"newSubmissionData\",\"type\":\"uint256[2]\"}],\"name\":\"UpdateSubmissionData\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bridge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"check\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"basefee\",\"type\":\"uint256\"}],\"name\":\"cost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasPrice\",\"type\":\"uint256\"}],\"name\":\"setSubmissionData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Arbitrum bridge requires base fee for the fee calculation therefore the function may revert on evm implementations that do not support base fee\",\"events\":{\"UpdateSubmissionData(uint256[2],uint256[2])\":{\"params\":{\"newSubmissionData\":\"new submission data\",\"oldSubmissionData\":\"previous submission data\"}}},\"kind\":\"dev\",\"methods\":{\"bridge(address,address,uint256)\":{\"details\":\"Due to `whenNotPaused` modifier, this function can only be called when the contract is not paused. The sender must have approved this contract.\",\"params\":{\"_amount\":\"amount of tokens to bridge\",\"_to\":\"address of the destination account on Arbitrum\",\"_token\":\"address of the token to bridge\"}},\"check(address)\":{\"returns\":{\"_0\":\"true if this bridger can be used\"}},\"constructor\":{\"params\":{\"_SDL\":\"The address of the SDL token\",\"_gasLimit\":\"The gas limit for the outbound transfer\",\"_gasPrice\":\"The gas price for the outbound transfer\"}},\"cost()\":{\"returns\":{\"_0\":\"total gas cost for an outbound transfer\"}},\"cost(uint256)\":{\"params\":{\"basefee\":\"The basefee to use for the calculation\"},\"returns\":{\"_0\":\"total gas cost for an outbound transfer\"}},\"gasLimit()\":{\"returns\":{\"_0\":\"gas limit to use for arbitrum outbound transfers\"}},\"gasPrice()\":{\"returns\":{\"_0\":\"gas price to use for arbitrum outbound transfers\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Only the owner can call this function and overriding contracts should implement `whenNotPaused` modifier to their bridge function\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setSubmissionData(uint256,uint256)\":{\"details\":\"only callable by the owner\",\"params\":{\"_gasLimit\":\"gas limit to store for the outbound transfer\",\"_gasPrice\":\"gas price to store for the outbound transfer\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Only the owner can call this function\"}},\"title\":\"Arbitrum bridger contract\",\"version\":1},\"userdoc\":{\"events\":{\"UpdateSubmissionData(uint256[2],uint256[2])\":{\"notice\":\"Event to emit when gas limit and gas price are updated\"}},\"kind\":\"user\",\"methods\":{\"bridge(address,address,uint256)\":{\"notice\":\"Bridge tokens from the current chain to Arbitrum\"},\"check(address)\":{\"notice\":\"Check if this bridger can be used\"},\"constructor\":{\"notice\":\"Constructor for this contract\"},\"cost()\":{\"notice\":\"Calculate the total gas cost for an outbound transfer\"},\"cost(uint256)\":{\"notice\":\"Calculate the total gas cost for an outbound transfer. Uses the provided base fee instead of the current base fee.\"},\"gasLimit()\":{\"notice\":\"Read the stored gas limit\"},\"gasPrice()\":{\"notice\":\"Read the stored gas price\"},\"pause()\":{\"notice\":\"Pause the bridger\"},\"setSubmissionData(uint256,uint256)\":{\"notice\":\"Update the gas limit and gas price for outbound transfers\"},\"unpause()\":{\"notice\":\"Unpause the bridger\"}},\"notice\":\"This contract is used to bridge tokens to Arbitrum\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/xchainGauges/bridgers/ArbitrumBridger.sol\":\"ArbitrumBridger\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-4.7.3/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.7.3/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.7.3/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.7.3/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.7.3/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.7.3/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.7.3/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/xchainGauges/bridgers/ArbitrumBridger.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-4.7.3/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./Bridger.sol\\\";\\n\\n/// @notice Interface for the official Arbitrum Gateway Router contract\\ninterface IGatewayRouter {\\n    function getGateWay(address _token) external view returns (address);\\n\\n    function outboundTransferCustomRefund(\\n        address _l1Token,\\n        address _refundTo,\\n        address _to,\\n        uint256 _amount,\\n        uint256 _maxGas,\\n        uint256 _gasPriceBid,\\n        bytes calldata _data\\n    ) external payable;\\n\\n    function getOutboundCalldata(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external view returns (uint256, uint256);\\n}\\n\\n/// @notice Interface for the official Arbitrum Inbox contract\\ninterface Inbox {\\n    function calculateRetryableSubmissionFee(\\n        uint256 _data_length,\\n        uint256 _base_fee\\n    ) external view returns (uint256);\\n}\\n\\n/// @title Arbitrum bridger contract\\n/// @notice This contract is used to bridge tokens to Arbitrum\\n/// @dev Arbitrum bridge requires base fee for the fee calculation therefore\\n/// the function may revert on evm implementations that do not support base fee\\ncontract ArbitrumBridger is Bridger {\\n    using SafeERC20 for IERC20;\\n\\n    // SDL token address\\n    address private immutable SDL;\\n    // Arbitrum: L1 ERC20 Gateway\\n    address private constant ARB_GATEWAY =\\n        0xa3A7B6F88361F48403514059F1F16C8E78d60EeC;\\n    // Arbitrum: L1 Gateway Router\\n    address private constant ARB_GATEWAY_ROUTER =\\n        0x72Ce9c846789fdB6fC1f34aC4AD25Dd9ef7031ef;\\n    // Arbitrum: L1 Inbox\\n    address private constant INBOX = 0x4Dbd4fc535Ac27206064B68FfCf827b0A60BAB3f;\\n\\n    // Submission data variable which includes gas limit and gas price\\n    uint256 private submissionData;\\n    // Mapping of token addresses to their approval status\\n    mapping(address => bool) public approved;\\n\\n    /// @notice Event to emit when gas limit and gas price are updated\\n    /// @param oldSubmissionData previous submission data\\n    /// @param newSubmissionData new submission data\\n    event UpdateSubmissionData(\\n        uint256[2] oldSubmissionData,\\n        uint256[2] newSubmissionData\\n    );\\n\\n    /// @notice Constructor for this contract\\n    /// @param _gasLimit The gas limit for the outbound transfer\\n    /// @param _gasPrice The gas price for the outbound transfer\\n    /// @param _SDL The address of the SDL token\\n    constructor(\\n        uint256 _gasLimit,\\n        uint256 _gasPrice,\\n        address _SDL\\n    ) {\\n        SDL = _SDL;\\n        // Construct submission data\\n        // uint128 gasLimit\\n        // uint128 gasPrice\\n        // uint256 submissionData = (gasLimit << 128) + gasPrice\\n        require(_gasLimit < type(uint128).max && _gasPrice < type(uint128).max);\\n        submissionData = (_gasLimit << 128) + _gasPrice;\\n        emit UpdateSubmissionData(\\n            [uint256(0), uint256(0)],\\n            [_gasLimit, _gasPrice]\\n        );\\n\\n        // Approve SDL to be used by the associated arbitrum gateway contract\\n        IERC20(_SDL).safeApprove(ARB_GATEWAY, type(uint256).max);\\n        approved[_SDL] = true;\\n    }\\n\\n    /// @notice Bridge tokens from the current chain to Arbitrum\\n    /// @dev Due to `whenNotPaused` modifier, this function can only be called when\\n    /// the contract is not paused. The sender must have approved this contract.\\n    /// @param _token address of the token to bridge\\n    /// @param _to address of the destination account on Arbitrum\\n    /// @param _amount amount of tokens to bridge\\n    function bridge(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) external payable override whenNotPaused {\\n        // Transfer tokens from the caller to this\\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        // If the token is not SDL, approve the token transfer to appropriate gateway\\n        if (_token != SDL && !approved[_token]) {\\n            IERC20(_token).safeApprove(\\n                IGatewayRouter(ARB_GATEWAY_ROUTER).getGateWay(_token),\\n                type(uint256).max\\n            );\\n            approved[_token] = true;\\n        }\\n\\n        // Unpack submission data\\n        uint256 data = submissionData;\\n        uint256 _gasLimit = data >> 128;\\n        uint256 _gasPrice = data & type(uint128).max;\\n\\n        // Calculate submission cost based on current base fee\\n        (, uint256 calldataSize) = IGatewayRouter(ARB_GATEWAY_ROUTER)\\n            .getOutboundCalldata(_token, address(this), _to, _amount, \\\"\\\");\\n        uint256 submissionCost = Inbox(INBOX).calculateRetryableSubmissionFee(\\n            calldataSize + 256,\\n            block.basefee\\n        );\\n\\n        // Use unpacked submission data and calculated submission cost to calculate\\n        // value to send with the outbound transfer\\n        address _owner = owner();\\n        IGatewayRouter(ARB_GATEWAY_ROUTER).outboundTransferCustomRefund{\\n            value: _gasLimit * _gasPrice + submissionCost\\n        }(\\n            _token,\\n            _owner,\\n            _to,\\n            _amount,\\n            _gasLimit,\\n            _gasPrice,\\n            abi.encode(submissionCost, \\\"\\\")\\n        );\\n\\n        // Send any remaining ETH to the owner\\n        if (address(this).balance != 0) {\\n            payable(_owner).transfer(address(this).balance);\\n        }\\n    }\\n\\n    /// @notice Check if this bridger can be used\\n    /// @return true if this bridger can be used\\n    function check(address) external pure override returns (bool) {\\n        return true;\\n    }\\n\\n    /// @notice Read the stored gas limit\\n    /// @return gas limit to use for arbitrum outbound transfers\\n    function gasLimit() external view returns (uint256) {\\n        return submissionData >> 128;\\n    }\\n\\n    /// @notice Read the stored gas price\\n    /// @return gas price to use for arbitrum outbound transfers\\n    function gasPrice() external view returns (uint256) {\\n        return submissionData & type(uint128).max;\\n    }\\n\\n    /// @notice Calculate the total gas cost for an outbound transfer\\n    /// @return total gas cost for an outbound transfer\\n    function cost() external view override returns (uint256) {\\n        return cost(block.basefee);\\n    }\\n\\n    /// @notice Calculate the total gas cost for an outbound transfer. Uses the\\n    /// provided base fee instead of the current base fee.\\n    /// @param basefee The basefee to use for the calculation\\n    /// @return total gas cost for an outbound transfer\\n    function cost(uint256 basefee) public view returns (uint256) {\\n        // Calculate submission cost based on current base fee\\n        (, uint256 calldataSize) = IGatewayRouter(ARB_GATEWAY_ROUTER)\\n            .getOutboundCalldata(SDL, address(this), msg.sender, 10**36, \\\"\\\");\\n        uint256 submissionCost = Inbox(INBOX).calculateRetryableSubmissionFee(\\n            calldataSize + 256,\\n            basefee\\n        );\\n        uint256 data = submissionData;\\n        // gasLimit * gasPrice + maxSubmissionCost\\n        return ((data >> 128) * (data & type(uint128).max) + submissionCost);\\n    }\\n\\n    /// @notice Update the gas limit and gas price for outbound transfers\\n    /// @dev only callable by the owner\\n    /// @param _gasLimit gas limit to store for the outbound transfer\\n    /// @param _gasPrice gas price to store for the outbound transfer\\n    function setSubmissionData(uint256 _gasLimit, uint256 _gasPrice)\\n        external\\n        onlyOwner\\n    {\\n        // construct submission data\\n        require(_gasLimit < type(uint128).max && _gasPrice < type(uint128).max);\\n        uint256 data = submissionData;\\n        submissionData = (_gasLimit << 128) + _gasPrice;\\n        emit UpdateSubmissionData(\\n            [data >> 128, data & type(uint128).max],\\n            [_gasLimit, _gasPrice]\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x3e4ce6b8e406c13b1bf4dc9a32b5439666a3782274c43132c405b6da6d33ac72\",\"license\":\"MIT\"},\"contracts/xchainGauges/bridgers/Bridger.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-4.7.3/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts-4.7.3/security/Pausable.sol\\\";\\n\\n/// @title Abstract contract for bridging tokens between chains\\n/// @notice Defines the interface for bridger contracts with\\n/// basic owner and pause functionality. Owner is set to the\\n/// deployer of the contract.\\nabstract contract Bridger is Ownable, Pausable {\\n    /// @notice Pause the bridger\\n    /// @dev Only the owner can call this function and overriding contracts\\n    /// should implement `whenNotPaused` modifier to their bridge function\\n    function pause() external onlyOwner whenNotPaused {\\n        _pause();\\n    }\\n\\n    /// @notice Unpause the bridger\\n    /// @dev Only the owner can call this function\\n    function unpause() external onlyOwner whenPaused {\\n        _unpause();\\n    }\\n\\n    /// @notice Check if an account can use this bridger contract\\n    /// @param sender The address of the sender\\n    /// @return True if the bridger can be used by the sender\\n    function check(address sender) external view virtual returns (bool);\\n\\n    /// @notice Bridge tokens from the current chain to the target chain\\n    /// @dev The overriding contract should implement `whenNotPaused` modifier\\n    /// @param token The address of the token to bridge\\n    /// @param to The address to send the bridged tokens to\\n    /// @param amount The amount of tokens to bridge\\n    function bridge(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external payable virtual;\\n\\n    /// @notice Get the cost of bridging tokens. This depends on each\\n    /// bridger contract and the current state of the chain.\\n    /// @return The cost of bridging tokens\\n    function cost() external view virtual returns (uint256);\\n\\n    /// @notice Fallback function for receiving ETH\\n    receive() external payable virtual {}\\n}\\n\",\"keccak256\":\"0x3534db39d6c037c90ab692c532fcdaa0b8fb858fd07c09dba1aa6fbe6fde5754\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100e15760003560e01c80638da5cb5b1161007f578063d8b964e611610059578063d8b964e61461023b578063f2fde38b1461026b578063f68016b71461028b578063fe173b97146102a357600080fd5b80638da5cb5b146101c55780639097548d146101fa578063c23697a81461021a57600080fd5b80635c975abb116100bb5780635c975abb1461014c578063715018a6146101885780638456cb591461019d57806387121759146101b257600080fd5b806313faede6146100ed5780633f4ba83a14610115578063446ce0951461012c57600080fd5b366100e857005b600080fd5b3480156100f957600080fd5b506101026102ca565b6040519081526020015b60405180910390f35b34801561012157600080fd5b5061012a6102da565b005b34801561013857600080fd5b5061012a610147366004611371565b6102f4565b34801561015857600080fd5b5060005474010000000000000000000000000000000000000000900460ff165b604051901515815260200161010c565b34801561019457600080fd5b5061012a6103be565b3480156101a957600080fd5b5061012a6103d0565b61012a6101c03660046113b5565b6103e8565b3480156101d157600080fd5b5060005460405173ffffffffffffffffffffffffffffffffffffffff909116815260200161010c565b34801561020657600080fd5b506101026102153660046113f6565b610890565b34801561022657600080fd5b5061017861023536600461140f565b50600190565b34801561024757600080fd5b5061017861025636600461140f565b60026020526000908152604090205460ff1681565b34801561027757600080fd5b5061012a61028636600461140f565b610a53565b34801561029757600080fd5b5060015460801c610102565b3480156102af57600080fd5b506001546fffffffffffffffffffffffffffffffff16610102565b60006102d548610890565b905090565b6102e2610d2d565b6102ea610dae565b6102f2610e32565b565b6102fc610d2d565b6fffffffffffffffffffffffffffffffff8210801561032a57506fffffffffffffffffffffffffffffffff81105b61033357600080fd5b60015461034482608085901b61145b565b600155604080518082018252608083901c81526fffffffffffffffffffffffffffffffff83166020808301919091528251808401845286815290810185905291517f08304c417384e677bfe0075c0373b3004aec0f73a9f7cd734d5065fe679f31cb926103b19291611497565b60405180910390a1505050565b6103c6610d2d565b6102f26000610eaf565b6103d8610d2d565b6103e0610f24565b6102f2610fa9565b6103f0610f24565b61041273ffffffffffffffffffffffffffffffffffffffff8416333084611018565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015610494575073ffffffffffffffffffffffffffffffffffffffff831660009081526002602052604090205460ff16155b156105cc576040517f3b8e414d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015261057d907372ce9c846789fdb6fc1f34ac4ad25dd9ef7031ef90633b8e414d90602401602060405180830381865afa15801561051b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053f91906114b2565b73ffffffffffffffffffffffffffffffffffffffff8516907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610b0f565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260026020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555b6001546040517fa0c76a9600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8086166004830152306024830152841660448201526064810183905260a06084820152600060a48201819052608083901c916fffffffffffffffffffffffffffffffff841691907372ce9c846789fdb6fc1f34ac4ad25dd9ef7031ef9063a0c76a969060c4016040805180830381865afa15801561068c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b091906114cf565b915060009050734dbd4fc535ac27206064b68ffcf827b0a60bab3f63a66b327d6106dc8461010061145b565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526004810191909152486024820152604401602060405180830381865afa158015610736573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075a91906114f3565b9050600061077d60005473ffffffffffffffffffffffffffffffffffffffff1690565b90507372ce9c846789fdb6fc1f34ac4ad25dd9ef7031ef634fb1a07b836107a4878961150c565b6107ae919061145b565b8b848c8c8b8b8a6040516020016107d691815260406020820181905260009082015260600190565b6040516020818303038152906040526040518963ffffffff1660e01b81526004016108079796959493929190611591565b6000604051808303818588803b15801561082057600080fd5b505af1158015610834573d6000803e3d6000fd5b5050505050476000146108855760405173ffffffffffffffffffffffffffffffffffffffff8216904780156108fc02916000818181858888f19350505050158015610883573d6000803e3d6000fd5b505b505050505050505050565b6040517fa0c76a9600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001660048201523060248201523360448201526ec097ce7bc90715b34b9f1000000000606482015260a06084820152600060a482018190529081907372ce9c846789fdb6fc1f34ac4ad25dd9ef7031ef9063a0c76a969060c4016040805180830381865afa158015610961573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098591906114cf565b915060009050734dbd4fc535ac27206064b68ffcf827b0a60bab3f63a66b327d6109b18461010061145b565b866040518363ffffffff1660e01b81526004016109d8929190918252602082015260400190565b602060405180830381865afa1580156109f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1991906114f3565b60015490915081610a406fffffffffffffffffffffffffffffffff8316608084901c61150c565b610a4a919061145b565b95945050505050565b610a5b610d2d565b73ffffffffffffffffffffffffffffffffffffffff8116610b03576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b610b0c81610eaf565b50565b801580610baf57506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015284169063dd62ed3e90604401602060405180830381865afa158015610b89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bad91906114f3565b155b610c3b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608401610afa565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052610d0f9084907f095ea7b300000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261107c565b505050565b6060610d238484600085611188565b90505b9392505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146102f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610afa565b60005474010000000000000000000000000000000000000000900460ff166102f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610afa565b610e3a610dae565b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a1565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60005474010000000000000000000000000000000000000000900460ff16156102f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610afa565b610fb1610f24565b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610e853390565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526110769085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401610c8d565b50505050565b60006110de826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610d149092919063ffffffff16565b805190915015610d0f57808060200190518101906110fc91906115f1565b610d0f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610afa565b60608247101561121a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610afa565b73ffffffffffffffffffffffffffffffffffffffff85163b611298576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610afa565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516112c19190611613565b60006040518083038185875af1925050503d80600081146112fe576040519150601f19603f3d011682016040523d82523d6000602084013e611303565b606091505b509150915061131382828661131e565b979650505050505050565b6060831561132d575081610d26565b82511561133d5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610afa919061162f565b6000806040838503121561138457600080fd5b50508035926020909101359150565b73ffffffffffffffffffffffffffffffffffffffff81168114610b0c57600080fd5b6000806000606084860312156113ca57600080fd5b83356113d581611393565b925060208401356113e581611393565b929592945050506040919091013590565b60006020828403121561140857600080fd5b5035919050565b60006020828403121561142157600080fd5b8135610d2681611393565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561146e5761146e61142c565b92915050565b8060005b6002811015611076578151845260209384019390910190600101611478565b608081016114a58285611474565b610d266040830184611474565b6000602082840312156114c457600080fd5b8151610d2681611393565b600080604083850312156114e257600080fd5b505080516020909101519092909150565b60006020828403121561150557600080fd5b5051919050565b808202811582820484141761146e5761146e61142c565b60005b8381101561153e578181015183820152602001611526565b50506000910152565b6000815180845261155f816020860160208601611523565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600073ffffffffffffffffffffffffffffffffffffffff808a16835280891660208401528088166040840152508560608301528460808301528360a083015260e060c08301526115e460e0830184611547565b9998505050505050505050565b60006020828403121561160357600080fd5b81518015158114610d2657600080fd5b60008251611625818460208701611523565b9190910192915050565b602081526000610d26602083018461154756fea2646970667358221220e5289127f39f6989122ef705d38af16f0004fc4123526444beea37f930a32ecb64736f6c63430008110033",
  "devdoc": {
    "details": "Arbitrum bridge requires base fee for the fee calculation therefore the function may revert on evm implementations that do not support base fee",
    "events": {
      "UpdateSubmissionData(uint256[2],uint256[2])": {
        "params": {
          "newSubmissionData": "new submission data",
          "oldSubmissionData": "previous submission data"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "bridge(address,address,uint256)": {
        "details": "Due to `whenNotPaused` modifier, this function can only be called when the contract is not paused. The sender must have approved this contract.",
        "params": {
          "_amount": "amount of tokens to bridge",
          "_to": "address of the destination account on Arbitrum",
          "_token": "address of the token to bridge"
        }
      },
      "check(address)": {
        "returns": {
          "_0": "true if this bridger can be used"
        }
      },
      "constructor": {
        "params": {
          "_SDL": "The address of the SDL token",
          "_gasLimit": "The gas limit for the outbound transfer",
          "_gasPrice": "The gas price for the outbound transfer"
        }
      },
      "cost()": {
        "returns": {
          "_0": "total gas cost for an outbound transfer"
        }
      },
      "cost(uint256)": {
        "params": {
          "basefee": "The basefee to use for the calculation"
        },
        "returns": {
          "_0": "total gas cost for an outbound transfer"
        }
      },
      "gasLimit()": {
        "returns": {
          "_0": "gas limit to use for arbitrum outbound transfers"
        }
      },
      "gasPrice()": {
        "returns": {
          "_0": "gas price to use for arbitrum outbound transfers"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "Only the owner can call this function and overriding contracts should implement `whenNotPaused` modifier to their bridge function"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setSubmissionData(uint256,uint256)": {
        "details": "only callable by the owner",
        "params": {
          "_gasLimit": "gas limit to store for the outbound transfer",
          "_gasPrice": "gas price to store for the outbound transfer"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Only the owner can call this function"
      }
    },
    "title": "Arbitrum bridger contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "UpdateSubmissionData(uint256[2],uint256[2])": {
        "notice": "Event to emit when gas limit and gas price are updated"
      }
    },
    "kind": "user",
    "methods": {
      "bridge(address,address,uint256)": {
        "notice": "Bridge tokens from the current chain to Arbitrum"
      },
      "check(address)": {
        "notice": "Check if this bridger can be used"
      },
      "constructor": {
        "notice": "Constructor for this contract"
      },
      "cost()": {
        "notice": "Calculate the total gas cost for an outbound transfer"
      },
      "cost(uint256)": {
        "notice": "Calculate the total gas cost for an outbound transfer. Uses the provided base fee instead of the current base fee."
      },
      "gasLimit()": {
        "notice": "Read the stored gas limit"
      },
      "gasPrice()": {
        "notice": "Read the stored gas price"
      },
      "pause()": {
        "notice": "Pause the bridger"
      },
      "setSubmissionData(uint256,uint256)": {
        "notice": "Update the gas limit and gas price for outbound transfers"
      },
      "unpause()": {
        "notice": "Unpause the bridger"
      }
    },
    "notice": "This contract is used to bridge tokens to Arbitrum",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4026,
        "contract": "contracts/xchainGauges/bridgers/ArbitrumBridger.sol:ArbitrumBridger",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4860,
        "contract": "contracts/xchainGauges/bridgers/ArbitrumBridger.sol:ArbitrumBridger",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 8824,
        "contract": "contracts/xchainGauges/bridgers/ArbitrumBridger.sol:ArbitrumBridger",
        "label": "submissionData",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 8828,
        "contract": "contracts/xchainGauges/bridgers/ArbitrumBridger.sol:ArbitrumBridger",
        "label": "approved",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
