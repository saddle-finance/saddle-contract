{
  "address": "0x46866D274E6D9015c5FDc098CE270803e11e3eF4",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldPoolAddress",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "newPoolAddress",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "oldPoolLPTokenAddress",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "newPoolLPTokenAddress",
              "type": "address"
            },
            {
              "internalType": "contract IERC20[]",
              "name": "tokens",
              "type": "address[]"
            }
          ],
          "indexed": false,
          "internalType": "struct GeneralizedSwapMigrator.MigrationData",
          "name": "mData",
          "type": "tuple"
        }
      ],
      "name": "AddMigrationData",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "migrator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldPoolAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldLPTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLPTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "Migrate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oldPoolAddress",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "newPoolAddress",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "oldPoolLPTokenAddress",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "newPoolLPTokenAddress",
              "type": "address"
            },
            {
              "internalType": "contract IERC20[]",
              "name": "tokens",
              "type": "address[]"
            }
          ],
          "internalType": "struct GeneralizedSwapMigrator.MigrationData",
          "name": "mData",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "overwrite",
          "type": "bool"
        }
      ],
      "name": "addMigrationData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "calls",
          "type": "bytes[]"
        },
        {
          "internalType": "bool",
          "name": "revertOnFail",
          "type": "bool"
        }
      ],
      "name": "batch",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oldPoolAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmount",
          "type": "uint256"
        }
      ],
      "name": "migrate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "migrationMap",
      "outputs": [
        {
          "internalType": "address",
          "name": "newPoolAddress",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "oldPoolLPTokenAddress",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "newPoolLPTokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "rescue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0621f1c0446a46a2fe92939ad301c8ec117acaa104a639fafddb35ae5bd4762f",
  "receipt": {
    "to": null,
    "from": "0x99eb33756a2eAa32f5964A747722c4b59e6aF351",
    "contractAddress": "0x46866D274E6D9015c5FDc098CE270803e11e3eF4",
    "transactionIndex": 223,
    "gasUsed": "1634841",
    "logsBloom": "0x
    "blockHash": "0xf9e7121be7a8e92ba7235b28458eab87834e3d80cb83b7906f7834b42220fa97",
    "transactionHash": "0x0621f1c0446a46a2fe92939ad301c8ec117acaa104a639fafddb35ae5bd4762f",
    "logs": [
      {
        "transactionIndex": 223,
        "blockNumber": 13863618,
        "transactionHash": "0x0621f1c0446a46a2fe92939ad301c8ec117acaa104a639fafddb35ae5bd4762f",
        "address": "0x46866D274E6D9015c5FDc098CE270803e11e3eF4",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000099eb33756a2eaa32f5964a747722c4b59e6af351"
        ],
        "data": "0x",
        "logIndex": 202,
        "blockHash": "0xf9e7121be7a8e92ba7235b28458eab87834e3d80cb83b7906f7834b42220fa97"
      }
    ],
    "blockNumber": 13863618,
    "cumulativeGasUsed": "13222728",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "f9a75990e8f41bfde25c3c3dde719082",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldPoolAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"newPoolAddress\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"oldPoolLPTokenAddress\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"newPoolLPTokenAddress\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"indexed\":false,\"internalType\":\"struct GeneralizedSwapMigrator.MigrationData\",\"name\":\"mData\",\"type\":\"tuple\"}],\"name\":\"AddMigrationData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"migrator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldPoolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLPTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLPTokenAmount\",\"type\":\"uint256\"}],\"name\":\"Migrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldPoolAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"newPoolAddress\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"oldPoolLPTokenAddress\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"newPoolLPTokenAddress\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"internalType\":\"struct GeneralizedSwapMigrator.MigrationData\",\"name\":\"mData\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"overwrite\",\"type\":\"bool\"}],\"name\":\"addMigrationData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"calls\",\"type\":\"bytes[]\"},{\"internalType\":\"bool\",\"name\":\"revertOnFail\",\"type\":\"bool\"}],\"name\":\"batch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldPoolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"migrationMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newPoolAddress\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"oldPoolLPTokenAddress\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"newPoolLPTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"rescue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addMigrationData(address,(address,address,address,address[]),bool)\":{\"params\":{\"mData\":\"MigrationData struct that contains information of the old and new pools\",\"oldPoolAddress\":\"pool address to migrate from\",\"overwrite\":\"should overwrite existing migration data\"}},\"batch(bytes[],bool)\":{\"params\":{\"calls\":\"An array of inputs for each call.\",\"revertOnFail\":\"If True then reverts after a failed call and stops doing further calls.\"}},\"migrate(address,uint256,uint256)\":{\"params\":{\"amount\":\"amount of LP tokens to migrate\",\"minAmount\":\"of new LP tokens to receive\",\"oldPoolAddress\":\"pool address to migrate from\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"rescue(address,address)\":{\"params\":{\"to\":\"Minimum amount of new LPToken to receive\",\"token\":\"Amount of old LPToken to migrate\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"GeneralizedSwapMigrator\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addMigrationData(address,(address,address,address,address[]),bool)\":{\"notice\":\"Add new migration data to the contract\"},\"batch(bytes[],bool)\":{\"notice\":\"Allows batched call to self (this contract).\"},\"migrate(address,uint256,uint256)\":{\"notice\":\"Migrates saddle LP tokens from a pool to another\"},\"rescue(address,address)\":{\"notice\":\"Rescues any token that may be sent to this contract accidentally.\"}},\"notice\":\"This contract is responsible for migration liquidity between pools Users can use this contract to remove their liquidity from the old pools and add them to the new ones with a single transaction.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GeneralizedSwapMigrator.sol\":\"GeneralizedSwapMigrator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/GeneralizedSwapMigrator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./interfaces/ISwap.sol\\\";\\nimport \\\"./helper/BaseBoringBatchable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title GeneralizedSwapMigrator\\n * @notice This contract is responsible for migration liquidity between pools\\n * Users can use this contract to remove their liquidity from the old pools and add them to the new\\n * ones with a single transaction.\\n */\\ncontract GeneralizedSwapMigrator is Ownable, BaseBoringBatchable {\\n    using SafeERC20 for IERC20;\\n\\n    struct MigrationData {\\n        address newPoolAddress;\\n        IERC20 oldPoolLPTokenAddress;\\n        IERC20 newPoolLPTokenAddress;\\n        IERC20[] tokens;\\n    }\\n\\n    uint256 private constant MAX_UINT256 = 2**256 - 1;\\n    mapping(address => MigrationData) public migrationMap;\\n\\n    event AddMigrationData(address indexed oldPoolAddress, MigrationData mData);\\n    event Migrate(\\n        address indexed migrator,\\n        address indexed oldPoolAddress,\\n        uint256 oldLPTokenAmount,\\n        uint256 newLPTokenAmount\\n    );\\n\\n    constructor() public Ownable() {}\\n\\n    /**\\n     * @notice Add new migration data to the contract\\n     * @param oldPoolAddress pool address to migrate from\\n     * @param mData MigrationData struct that contains information of the old and new pools\\n     * @param overwrite should overwrite existing migration data\\n     */\\n    function addMigrationData(\\n        address oldPoolAddress,\\n        MigrationData memory mData,\\n        bool overwrite\\n    ) external onlyOwner {\\n        // Check\\n        if (!overwrite) {\\n            require(\\n                address(migrationMap[oldPoolAddress].oldPoolLPTokenAddress) ==\\n                    address(0),\\n                \\\"cannot overwrite existing migration data\\\"\\n            );\\n        }\\n        require(\\n            address(mData.oldPoolLPTokenAddress) != address(0),\\n            \\\"oldPoolLPTokenAddress == 0\\\"\\n        );\\n        require(\\n            address(mData.newPoolLPTokenAddress) != address(0),\\n            \\\"newPoolLPTokenAddress == 0\\\"\\n        );\\n\\n        for (uint8 i = 0; i < 32; i++) {\\n            address oldPoolToken;\\n            try ISwap(oldPoolAddress).getToken(i) returns (IERC20 token) {\\n                oldPoolToken = address(token);\\n            } catch {\\n                require(i > 0, \\\"Failed to get tokens underlying Saddle pool.\\\");\\n                oldPoolToken = address(0);\\n            }\\n\\n            try ISwap(mData.newPoolAddress).getToken(i) returns (IERC20 token) {\\n                require(\\n                    oldPoolToken == address(token) &&\\n                        oldPoolToken == address(mData.tokens[i]),\\n                    \\\"Failed to match tokens list\\\"\\n                );\\n            } catch {\\n                require(i > 0, \\\"Failed to get tokens underlying Saddle pool.\\\");\\n                require(\\n                    oldPoolToken == address(0) && i == mData.tokens.length,\\n                    \\\"Failed to match tokens list\\\"\\n                );\\n                break;\\n            }\\n        }\\n\\n        // Effect\\n        migrationMap[oldPoolAddress] = mData;\\n\\n        // Interaction\\n        // Approve old LP Token to be used for withdraws.\\n        mData.oldPoolLPTokenAddress.approve(oldPoolAddress, MAX_UINT256);\\n\\n        // Approve underlying tokens to be used for deposits.\\n        for (uint256 i = 0; i < mData.tokens.length; i++) {\\n            mData.tokens[i].safeApprove(mData.newPoolAddress, 0);\\n            mData.tokens[i].safeApprove(mData.newPoolAddress, MAX_UINT256);\\n        }\\n\\n        emit AddMigrationData(oldPoolAddress, mData);\\n    }\\n\\n    /**\\n     * @notice Migrates saddle LP tokens from a pool to another\\n     * @param oldPoolAddress pool address to migrate from\\n     * @param amount amount of LP tokens to migrate\\n     * @param minAmount of new LP tokens to receive\\n     */\\n    function migrate(\\n        address oldPoolAddress,\\n        uint256 amount,\\n        uint256 minAmount\\n    ) external returns (uint256) {\\n        // Check\\n        MigrationData memory mData = migrationMap[oldPoolAddress];\\n        require(\\n            address(mData.oldPoolLPTokenAddress) != address(0),\\n            \\\"migration is not available\\\"\\n        );\\n\\n        // Interactions\\n        // Transfer old LP token from the caller\\n        mData.oldPoolLPTokenAddress.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            amount\\n        );\\n\\n        // Remove liquidity from the old pool\\n        uint256[] memory amounts = ISwap(oldPoolAddress).removeLiquidity(\\n            amount,\\n            new uint256[](mData.tokens.length),\\n            MAX_UINT256\\n        );\\n        // Add acquired liquidity to the new pool\\n        uint256 mintedAmount = ISwap(mData.newPoolAddress).addLiquidity(\\n            amounts,\\n            minAmount,\\n            MAX_UINT256\\n        );\\n\\n        // Transfer new LP Token to the caller\\n        mData.newPoolLPTokenAddress.safeTransfer(msg.sender, mintedAmount);\\n\\n        emit Migrate(msg.sender, oldPoolAddress, amount, mintedAmount);\\n        return mintedAmount;\\n    }\\n\\n    /**\\n     * @notice Rescues any token that may be sent to this contract accidentally.\\n     * @param token Amount of old LPToken to migrate\\n     * @param to Minimum amount of new LPToken to receive\\n     */\\n    function rescue(IERC20 token, address to) external onlyOwner {\\n        token.safeTransfer(to, token.balanceOf(address(this)));\\n    }\\n}\\n\",\"keccak256\":\"0x25c87752112aeba0116b1e470eeffb1d52c89e6178eee3a9ea1c3f22533ac9ea\",\"license\":\"MIT\"},\"contracts/helper/BaseBoringBatchable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n// solhint-disable avoid-low-level-calls\\n// solhint-disable no-inline-assembly\\n\\n// Audit on 5-Jan-2021 by Keno and BoringCrypto\\n// WARNING!!!\\n// Combining BoringBatchable with msg.value can cause double spending issues\\n// https://www.paradigm.xyz/2021/08/two-rights-might-make-a-wrong/\\n\\ncontract BaseBoringBatchable {\\n    /// @dev Helper function to extract a useful revert message from a failed call.\\n    /// If the returned data is malformed or not correctly abi encoded then this call can fail itself.\\n    function _getRevertMsg(bytes memory _returnData)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\n\\n        assembly {\\n            // Slice the sighash.\\n            _returnData := add(_returnData, 0x04)\\n        }\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\n    }\\n\\n    /// @notice Allows batched call to self (this contract).\\n    /// @param calls An array of inputs for each call.\\n    /// @param revertOnFail If True then reverts after a failed call and stops doing further calls.\\n    // F1: External is ok here because this is the batch function, adding it to a batch makes no sense\\n    // F2: Calls in the batch may be payable, delegatecall operates in the same context, so each call in the batch has access to msg.value\\n    // C3: The length of the loop is fully under user control, so can't be exploited\\n    // C7: Delegatecall is only used on the same contract, so it's safe\\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable {\\n        for (uint256 i = 0; i < calls.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(\\n                calls[i]\\n            );\\n            if (!success && revertOnFail) {\\n                revert(_getRevertMsg(result));\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x95f34c0ce5cd71071698709dd23eea9b6031fe973be9d6f53f9f08452a444d66\",\"license\":\"MIT\"},\"contracts/interfaces/IAllowlist.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IAllowlist {\\n    function getPoolAccountLimit(address poolAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getPoolCap(address poolAddress) external view returns (uint256);\\n\\n    function verifyAddress(address account, bytes32[] calldata merkleProof)\\n        external\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0xf55e4d678d05bc5d0e24ec5f24504d7437b885e19579f9d29152748c3c1c732e\",\"license\":\"MIT\"},\"contracts/interfaces/ISwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./IAllowlist.sol\\\";\\n\\ninterface ISwap {\\n    // pool data view functions\\n    function getA() external view returns (uint256);\\n\\n    function getAllowlist() external view returns (IAllowlist);\\n\\n    function getToken(uint8 index) external view returns (IERC20);\\n\\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\\n\\n    function getTokenBalance(uint8 index) external view returns (uint256);\\n\\n    function getVirtualPrice() external view returns (uint256);\\n\\n    function isGuarded() external view returns (bool);\\n\\n    function swapStorage()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            address\\n        );\\n\\n    // min return calculation functions\\n    function calculateSwap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calculateRemoveLiquidity(uint256 amount)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function calculateRemoveLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex\\n    ) external view returns (uint256 availableTokenAmount);\\n\\n    // state modifying functions\\n    function initialize(\\n        IERC20[] memory pooledTokens,\\n        uint8[] memory decimals,\\n        string memory lpTokenName,\\n        string memory lpTokenSymbol,\\n        uint256 a,\\n        uint256 fee,\\n        uint256 adminFee,\\n        address lpTokenTargetAddress\\n    ) external;\\n\\n    function swap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function addLiquidity(\\n        uint256[] calldata amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256[] calldata minAmounts,\\n        uint256 deadline\\n    ) external returns (uint256[] memory);\\n\\n    function removeLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidityImbalance(\\n        uint256[] calldata amounts,\\n        uint256 maxBurnAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x5d9f1f9fac2ec3d1d1ead59f36c0da05631eddc281c95adb6573773fbadcc06a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600061001b61006a565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35061006e565b3390565b611c3b8061007d6000396000f3fe60806040526004361061007b5760003560e01c8063d2423b511161004e578063d2423b5114610102578063e36ad77e14610115578063f2fde38b14610144578063fc22d0e5146101645761007b565b80634fdf5d1d146100805780636f731330146100a2578063715018a6146100c25780638da5cb5b146100d7575b600080fd5b34801561008c57600080fd5b506100a061009b366004611484565b610191565b005b3480156100ae57600080fd5b506100a06100bd366004611241565b61026e565b3480156100ce57600080fd5b506100a06107a4565b3480156100e357600080fd5b506100ec610845565b6040516100f991906115d3565b60405180910390f35b6100a061011036600461133c565b610854565b34801561012157600080fd5b50610135610130366004611225565b610917565b6040516100f993929190611625565b34801561015057600080fd5b506100a061015f366004611225565b610948565b34801561017057600080fd5b5061018461017f366004611308565b610a20565b6040516100f99190611ab4565b610199610d21565b6001600160a01b03166101aa610845565b6001600160a01b0316146101d95760405162461bcd60e51b81526004016101d09061189b565b60405180910390fd5b61026a81836001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161020991906115d3565b60206040518083038186803b15801561022157600080fd5b505afa158015610235573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102599190611548565b6001600160a01b0385169190610d25565b5050565b610276610d21565b6001600160a01b0316610287610845565b6001600160a01b0316146102ad5760405162461bcd60e51b81526004016101d09061189b565b806102ee576001600160a01b038381166000908152600160208190526040909120015416156102ee5760405162461bcd60e51b81526004016101d09061183e565b60208201516001600160a01b03166103185760405162461bcd60e51b81526004016101d0906118d0565b60408201516001600160a01b03166103425760405162461bcd60e51b81526004016101d0906117d0565b60005b60208160ff16101561057c576040517f82b866000000000000000000000000000000000000000000000000000000000081526000906001600160a01b038616906382b8660090610399908590600401611af4565b60206040518083038186803b1580156103b157600080fd5b505afa9250505080156103e1575060408051601f3d908101601f191682019092526103de91810190611468565b60015b6104105760008260ff16116104085760405162461bcd60e51b81526004016101d090611716565b506000610413565b90505b83516040517f82b866000000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906382b866009061045b908590600401611af4565b60206040518083038186803b15801561047357600080fd5b505afa9250505080156104a3575060408051601f3d908101601f191682019092526104a091810190611468565b60015b61050a5760008260ff16116104ca5760405162461bcd60e51b81526004016101d090611716565b6001600160a01b0381161580156104e857508360600151518260ff16145b6105045760405162461bcd60e51b81526004016101d090611807565b5061057c565b806001600160a01b0316826001600160a01b0316148015610556575084606001518360ff168151811061053957fe5b60200260200101516001600160a01b0316826001600160a01b0316145b6105725760405162461bcd60e51b81526004016101d090611807565b5050600101610345565b506001600160a01b03808416600090815260016020818152604092839020865181549086167fffffffffffffffffffffffff000000000000000000000000000000000000000091821617825582880151938201805494871694821694909417909355928601516002840180549190951692169190911790925560608401518051859361060f9260038501929101906110b8565b50505060208201516040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063095ea7b39061067f9086907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90600401611648565b602060405180830381600087803b15801561069957600080fd5b505af11580156106ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d1919061144c565b5060005b82606001515181101561075d5761071c83600001516000856060015184815181106106fc57fe5b60200260200101516001600160a01b0316610dad9092919063ffffffff16565b61075583600001517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff856060015184815181106106fc57fe5b6001016106d5565b50826001600160a01b03167f3a4863f22c4536b6b3a7e8989396b0b2f9c10de870d877ec333df6cfec568d30836040516107979190611a2f565b60405180910390a2505050565b6107ac610d21565b6001600160a01b03166107bd610845565b6001600160a01b0316146107e35760405162461bcd60e51b81526004016101d09061189b565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b6000546001600160a01b031690565b60005b8281101561091157600060603086868581811061087057fe5b90506020028101906108829190611b02565b6040516108909291906115a7565b600060405180830381855af49150503d80600081146108cb576040519150601f19603f3d011682016040523d82523d6000602084013e6108d0565b606091505b5091509150811580156108e05750835b15610907576108ee81610e89565b60405162461bcd60e51b81526004016101d09190611686565b5050600101610857565b50505050565b60016020819052600091825260409091208054918101546002909101546001600160a01b0392831692918216911683565b610950610d21565b6001600160a01b0316610961610845565b6001600160a01b0316146109875760405162461bcd60e51b81526004016101d09061189b565b6001600160a01b0381166109ad5760405162461bcd60e51b81526004016101d0906116b9565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6000610a2a611135565b6001600160a01b0380861660009081526001602081815260409283902083516080810185528154861681529281015485168383015260028101549094168284015260038401805484518184028101840190955280855292949360608601939092830182828015610ac357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610aa5575b5050509190925250505060208101519091506001600160a01b0316610afa5760405162461bcd60e51b81526004016101d0906119f8565b6020810151610b14906001600160a01b0316333087610ef1565b6060856001600160a01b03166331cd52b08684606001515167ffffffffffffffff81118015610b4257600080fd5b50604051908082528060200260200182016040528015610b6c578160200160208202803683370190505b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518463ffffffff1660e01b8152600401610bac93929190611abd565b600060405180830381600087803b158015610bc657600080fd5b505af1158015610bda573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c0291908101906113bc565b9050600082600001516001600160a01b0316634d49e87d83877fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518463ffffffff1660e01b8152600401610c5a93929190611661565b602060405180830381600087803b158015610c7457600080fd5b505af1158015610c88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cac9190611548565b6040840151909150610cc8906001600160a01b03163383610d25565b866001600160a01b0316336001600160a01b03167fd616b8856fa5febbdb06f07dd8d624380d02864619f3b796002f43bc36a4d1bc8884604051610d0d929190611ae6565b60405180910390a3925050505b9392505050565b3390565b610da88363a9059cbb60e01b8484604051602401610d44929190611648565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610f12565b505050565b801580610e4e57506040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081526001600160a01b0384169063dd62ed3e90610dfc90309086906004016115e7565b60206040518083038186803b158015610e1457600080fd5b505afa158015610e28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4c9190611548565b155b610e6a5760405162461bcd60e51b81526004016101d09061199b565b610da88363095ea7b360e01b8484604051602401610d44929190611648565b6060604482511015610ecf575060408051808201909152601d81527f5472616e73616374696f6e2072657665727465642073696c656e746c790000006020820152610eec565b60048201915081806020019051810190610ee991906114bc565b90505b919050565b610911846323b872dd60e01b858585604051602401610d4493929190611601565b6060610f67826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610fa19092919063ffffffff16565b805190915015610da85780806020019051810190610f85919061144c565b610da85760405162461bcd60e51b81526004016101d09061193e565b6060610fb08484600085610fb8565b949350505050565b606082471015610fda5760405162461bcd60e51b81526004016101d090611773565b610fe385611079565b610fff5760405162461bcd60e51b81526004016101d090611907565b60006060866001600160a01b0316858760405161101c91906115b7565b60006040518083038185875af1925050503d8060008114611059576040519150601f19603f3d011682016040523d82523d6000602084013e61105e565b606091505b509150915061106e82828661107f565b979650505050505050565b3b151590565b6060831561108e575081610d1a565b82511561109e5782518084602001fd5b8160405162461bcd60e51b81526004016101d09190611686565b828054828255906000526020600020908101928215611125579160200282015b8281111561112557825182547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039091161782556020909201916001909101906110d8565b5061113192915061115b565b5090565b604080516080810182526000808252602082018190529181019190915260608082015290565b5b808211156111315780547fffffffffffffffffffffffff000000000000000000000000000000000000000016815560010161115c565b803561119d81611bdf565b92915050565b600082601f8301126111b3578081fd5b81356111c66111c182611b93565b611b6c565b8181529150602080830190848101818402860182018710156111e757600080fd5b60005b8481101561120f5781356111fd81611bdf565b845292820192908201906001016111ea565b505050505092915050565b803561119d81611bf7565b600060208284031215611236578081fd5b8135610d1a81611bdf565b600080600060608486031215611255578182fd5b833561126081611bdf565b9250602084013567ffffffffffffffff8082111561127c578384fd5b908501906080828803121561128f578384fd5b6112996080611b6c565b6112a38884611192565b81526112b28860208501611192565b60208201526112c48860408501611192565b60408201526060830135828111156112da578586fd5b6112e6898286016111a3565b6060830152508094505050506112ff856040860161121a565b90509250925092565b60008060006060848603121561131c578283fd5b833561132781611bdf565b95602085013595506040909401359392505050565b600080600060408486031215611350578283fd5b833567ffffffffffffffff80821115611367578485fd5b818601915086601f83011261137a578485fd5b813581811115611388578586fd5b876020808302850101111561139b578586fd5b602092830195509350508401356113b181611bf7565b809150509250925092565b600060208083850312156113ce578182fd5b825167ffffffffffffffff8111156113e4578283fd5b8301601f810185136113f4578283fd5b80516114026111c182611b93565b818152838101908385018584028501860189101561141e578687fd5b8694505b83851015611440578051835260019490940193918501918501611422565b50979650505050505050565b60006020828403121561145d578081fd5b8151610d1a81611bf7565b600060208284031215611479578081fd5b8151610d1a81611bdf565b60008060408385031215611496578182fd5b82356114a181611bdf565b915060208301356114b181611bdf565b809150509250929050565b6000602082840312156114cd578081fd5b815167ffffffffffffffff808211156114e4578283fd5b818401915084601f8301126114f7578283fd5b815181811115611505578384fd5b6115186020601f19601f84011601611b6c565b915080825285602082850101111561152e578384fd5b61153f816020840160208601611bb3565b50949350505050565b600060208284031215611559578081fd5b5051919050565b6000815180845260208085019450808401835b8381101561158f57815187529582019590820190600101611573565b509495945050505050565b6001600160a01b03169052565b6000828483379101908152919050565b600082516115c9818460208701611bb3565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0393841681529183166020830152909116604082015260600190565b6001600160a01b03929092168252602082015260400190565b6000606082526116746060830186611560565b60208301949094525060400152919050565b60006020825282518060208401526116a5816040850160208701611bb3565b601f01601f19169190910160400192915050565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602c908201527f4661696c656420746f2067657420746f6b656e7320756e6465726c79696e672060408201527f536164646c6520706f6f6c2e0000000000000000000000000000000000000000606082015260800190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601a908201527f6e6577506f6f6c4c50546f6b656e41646472657373203d3d2030000000000000604082015260600190565b6020808252601b908201527f4661696c656420746f206d6174636820746f6b656e73206c6973740000000000604082015260600190565b60208082526028908201527f63616e6e6f74206f7665727772697465206578697374696e67206d696772617460408201527f696f6e2064617461000000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601a908201527f6f6c64506f6f6c4c50546f6b656e41646472657373203d3d2030000000000000604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606082015260800190565b6020808252601a908201527f6d6967726174696f6e206973206e6f7420617661696c61626c65000000000000604082015260600190565b6000602080835260a083016001600160a01b038086511683860152808387015116604086015280604087015116606086015250606085015160808086015281815180845260c08701915084830193508592505b80831015611aa957611a9582855161159a565b928401926001929092019190840190611a82565b509695505050505050565b90815260200190565b600084825260606020830152611ad66060830185611560565b9050826040830152949350505050565b918252602082015260400190565b60ff91909116815260200190565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112611b36578283fd5b83018035915067ffffffffffffffff821115611b50578283fd5b602001915036819003821315611b6557600080fd5b9250929050565b60405181810167ffffffffffffffff81118282101715611b8b57600080fd5b604052919050565b600067ffffffffffffffff821115611ba9578081fd5b5060209081020190565b60005b83811015611bce578181015183820152602001611bb6565b838111156109115750506000910152565b6001600160a01b0381168114611bf457600080fd5b50565b8015158114611bf457600080fdfea2646970667358221220e04c9d6453b449fd3b81fcd0a5e8e0cda21cbb0d4f093ce8a1c67de4b844424e64736f6c634300060c0033",
  "deployedBytecode": "0x60806040526004361061007b5760003560e01c8063d2423b511161004e578063d2423b5114610102578063e36ad77e14610115578063f2fde38b14610144578063fc22d0e5146101645761007b565b80634fdf5d1d146100805780636f731330146100a2578063715018a6146100c25780638da5cb5b146100d7575b600080fd5b34801561008c57600080fd5b506100a061009b366004611484565b610191565b005b3480156100ae57600080fd5b506100a06100bd366004611241565b61026e565b3480156100ce57600080fd5b506100a06107a4565b3480156100e357600080fd5b506100ec610845565b6040516100f991906115d3565b60405180910390f35b6100a061011036600461133c565b610854565b34801561012157600080fd5b50610135610130366004611225565b610917565b6040516100f993929190611625565b34801561015057600080fd5b506100a061015f366004611225565b610948565b34801561017057600080fd5b5061018461017f366004611308565b610a20565b6040516100f99190611ab4565b610199610d21565b6001600160a01b03166101aa610845565b6001600160a01b0316146101d95760405162461bcd60e51b81526004016101d09061189b565b60405180910390fd5b61026a81836001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161020991906115d3565b60206040518083038186803b15801561022157600080fd5b505afa158015610235573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102599190611548565b6001600160a01b0385169190610d25565b5050565b610276610d21565b6001600160a01b0316610287610845565b6001600160a01b0316146102ad5760405162461bcd60e51b81526004016101d09061189b565b806102ee576001600160a01b038381166000908152600160208190526040909120015416156102ee5760405162461bcd60e51b81526004016101d09061183e565b60208201516001600160a01b03166103185760405162461bcd60e51b81526004016101d0906118d0565b60408201516001600160a01b03166103425760405162461bcd60e51b81526004016101d0906117d0565b60005b60208160ff16101561057c576040517f82b866000000000000000000000000000000000000000000000000000000000081526000906001600160a01b038616906382b8660090610399908590600401611af4565b60206040518083038186803b1580156103b157600080fd5b505afa9250505080156103e1575060408051601f3d908101601f191682019092526103de91810190611468565b60015b6104105760008260ff16116104085760405162461bcd60e51b81526004016101d090611716565b506000610413565b90505b83516040517f82b866000000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906382b866009061045b908590600401611af4565b60206040518083038186803b15801561047357600080fd5b505afa9250505080156104a3575060408051601f3d908101601f191682019092526104a091810190611468565b60015b61050a5760008260ff16116104ca5760405162461bcd60e51b81526004016101d090611716565b6001600160a01b0381161580156104e857508360600151518260ff16145b6105045760405162461bcd60e51b81526004016101d090611807565b5061057c565b806001600160a01b0316826001600160a01b0316148015610556575084606001518360ff168151811061053957fe5b60200260200101516001600160a01b0316826001600160a01b0316145b6105725760405162461bcd60e51b81526004016101d090611807565b5050600101610345565b506001600160a01b03808416600090815260016020818152604092839020865181549086167fffffffffffffffffffffffff000000000000000000000000000000000000000091821617825582880151938201805494871694821694909417909355928601516002840180549190951692169190911790925560608401518051859361060f9260038501929101906110b8565b50505060208201516040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063095ea7b39061067f9086907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90600401611648565b602060405180830381600087803b15801561069957600080fd5b505af11580156106ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d1919061144c565b5060005b82606001515181101561075d5761071c83600001516000856060015184815181106106fc57fe5b60200260200101516001600160a01b0316610dad9092919063ffffffff16565b61075583600001517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff856060015184815181106106fc57fe5b6001016106d5565b50826001600160a01b03167f3a4863f22c4536b6b3a7e8989396b0b2f9c10de870d877ec333df6cfec568d30836040516107979190611a2f565b60405180910390a2505050565b6107ac610d21565b6001600160a01b03166107bd610845565b6001600160a01b0316146107e35760405162461bcd60e51b81526004016101d09061189b565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b6000546001600160a01b031690565b60005b8281101561091157600060603086868581811061087057fe5b90506020028101906108829190611b02565b6040516108909291906115a7565b600060405180830381855af49150503d80600081146108cb576040519150601f19603f3d011682016040523d82523d6000602084013e6108d0565b606091505b5091509150811580156108e05750835b15610907576108ee81610e89565b60405162461bcd60e51b81526004016101d09190611686565b5050600101610857565b50505050565b60016020819052600091825260409091208054918101546002909101546001600160a01b0392831692918216911683565b610950610d21565b6001600160a01b0316610961610845565b6001600160a01b0316146109875760405162461bcd60e51b81526004016101d09061189b565b6001600160a01b0381166109ad5760405162461bcd60e51b81526004016101d0906116b9565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6000610a2a611135565b6001600160a01b0380861660009081526001602081815260409283902083516080810185528154861681529281015485168383015260028101549094168284015260038401805484518184028101840190955280855292949360608601939092830182828015610ac357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610aa5575b5050509190925250505060208101519091506001600160a01b0316610afa5760405162461bcd60e51b81526004016101d0906119f8565b6020810151610b14906001600160a01b0316333087610ef1565b6060856001600160a01b03166331cd52b08684606001515167ffffffffffffffff81118015610b4257600080fd5b50604051908082528060200260200182016040528015610b6c578160200160208202803683370190505b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518463ffffffff1660e01b8152600401610bac93929190611abd565b600060405180830381600087803b158015610bc657600080fd5b505af1158015610bda573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c0291908101906113bc565b9050600082600001516001600160a01b0316634d49e87d83877fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518463ffffffff1660e01b8152600401610c5a93929190611661565b602060405180830381600087803b158015610c7457600080fd5b505af1158015610c88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cac9190611548565b6040840151909150610cc8906001600160a01b03163383610d25565b866001600160a01b0316336001600160a01b03167fd616b8856fa5febbdb06f07dd8d624380d02864619f3b796002f43bc36a4d1bc8884604051610d0d929190611ae6565b60405180910390a3925050505b9392505050565b3390565b610da88363a9059cbb60e01b8484604051602401610d44929190611648565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610f12565b505050565b801580610e4e57506040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081526001600160a01b0384169063dd62ed3e90610dfc90309086906004016115e7565b60206040518083038186803b158015610e1457600080fd5b505afa158015610e28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4c9190611548565b155b610e6a5760405162461bcd60e51b81526004016101d09061199b565b610da88363095ea7b360e01b8484604051602401610d44929190611648565b6060604482511015610ecf575060408051808201909152601d81527f5472616e73616374696f6e2072657665727465642073696c656e746c790000006020820152610eec565b60048201915081806020019051810190610ee991906114bc565b90505b919050565b610911846323b872dd60e01b858585604051602401610d4493929190611601565b6060610f67826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610fa19092919063ffffffff16565b805190915015610da85780806020019051810190610f85919061144c565b610da85760405162461bcd60e51b81526004016101d09061193e565b6060610fb08484600085610fb8565b949350505050565b606082471015610fda5760405162461bcd60e51b81526004016101d090611773565b610fe385611079565b610fff5760405162461bcd60e51b81526004016101d090611907565b60006060866001600160a01b0316858760405161101c91906115b7565b60006040518083038185875af1925050503d8060008114611059576040519150601f19603f3d011682016040523d82523d6000602084013e61105e565b606091505b509150915061106e82828661107f565b979650505050505050565b3b151590565b6060831561108e575081610d1a565b82511561109e5782518084602001fd5b8160405162461bcd60e51b81526004016101d09190611686565b828054828255906000526020600020908101928215611125579160200282015b8281111561112557825182547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039091161782556020909201916001909101906110d8565b5061113192915061115b565b5090565b604080516080810182526000808252602082018190529181019190915260608082015290565b5b808211156111315780547fffffffffffffffffffffffff000000000000000000000000000000000000000016815560010161115c565b803561119d81611bdf565b92915050565b600082601f8301126111b3578081fd5b81356111c66111c182611b93565b611b6c565b8181529150602080830190848101818402860182018710156111e757600080fd5b60005b8481101561120f5781356111fd81611bdf565b845292820192908201906001016111ea565b505050505092915050565b803561119d81611bf7565b600060208284031215611236578081fd5b8135610d1a81611bdf565b600080600060608486031215611255578182fd5b833561126081611bdf565b9250602084013567ffffffffffffffff8082111561127c578384fd5b908501906080828803121561128f578384fd5b6112996080611b6c565b6112a38884611192565b81526112b28860208501611192565b60208201526112c48860408501611192565b60408201526060830135828111156112da578586fd5b6112e6898286016111a3565b6060830152508094505050506112ff856040860161121a565b90509250925092565b60008060006060848603121561131c578283fd5b833561132781611bdf565b95602085013595506040909401359392505050565b600080600060408486031215611350578283fd5b833567ffffffffffffffff80821115611367578485fd5b818601915086601f83011261137a578485fd5b813581811115611388578586fd5b876020808302850101111561139b578586fd5b602092830195509350508401356113b181611bf7565b809150509250925092565b600060208083850312156113ce578182fd5b825167ffffffffffffffff8111156113e4578283fd5b8301601f810185136113f4578283fd5b80516114026111c182611b93565b818152838101908385018584028501860189101561141e578687fd5b8694505b83851015611440578051835260019490940193918501918501611422565b50979650505050505050565b60006020828403121561145d578081fd5b8151610d1a81611bf7565b600060208284031215611479578081fd5b8151610d1a81611bdf565b60008060408385031215611496578182fd5b82356114a181611bdf565b915060208301356114b181611bdf565b809150509250929050565b6000602082840312156114cd578081fd5b815167ffffffffffffffff808211156114e4578283fd5b818401915084601f8301126114f7578283fd5b815181811115611505578384fd5b6115186020601f19601f84011601611b6c565b915080825285602082850101111561152e578384fd5b61153f816020840160208601611bb3565b50949350505050565b600060208284031215611559578081fd5b5051919050565b6000815180845260208085019450808401835b8381101561158f57815187529582019590820190600101611573565b509495945050505050565b6001600160a01b03169052565b6000828483379101908152919050565b600082516115c9818460208701611bb3565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0393841681529183166020830152909116604082015260600190565b6001600160a01b03929092168252602082015260400190565b6000606082526116746060830186611560565b60208301949094525060400152919050565b60006020825282518060208401526116a5816040850160208701611bb3565b601f01601f19169190910160400192915050565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602c908201527f4661696c656420746f2067657420746f6b656e7320756e6465726c79696e672060408201527f536164646c6520706f6f6c2e0000000000000000000000000000000000000000606082015260800190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601a908201527f6e6577506f6f6c4c50546f6b656e41646472657373203d3d2030000000000000604082015260600190565b6020808252601b908201527f4661696c656420746f206d6174636820746f6b656e73206c6973740000000000604082015260600190565b60208082526028908201527f63616e6e6f74206f7665727772697465206578697374696e67206d696772617460408201527f696f6e2064617461000000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601a908201527f6f6c64506f6f6c4c50546f6b656e41646472657373203d3d2030000000000000604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606082015260800190565b6020808252601a908201527f6d6967726174696f6e206973206e6f7420617661696c61626c65000000000000604082015260600190565b6000602080835260a083016001600160a01b038086511683860152808387015116604086015280604087015116606086015250606085015160808086015281815180845260c08701915084830193508592505b80831015611aa957611a9582855161159a565b928401926001929092019190840190611a82565b509695505050505050565b90815260200190565b600084825260606020830152611ad66060830185611560565b9050826040830152949350505050565b918252602082015260400190565b60ff91909116815260200190565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112611b36578283fd5b83018035915067ffffffffffffffff821115611b50578283fd5b602001915036819003821315611b6557600080fd5b9250929050565b60405181810167ffffffffffffffff81118282101715611b8b57600080fd5b604052919050565b600067ffffffffffffffff821115611ba9578081fd5b5060209081020190565b60005b83811015611bce578181015183820152602001611bb6565b838111156109115750506000910152565b6001600160a01b0381168114611bf457600080fd5b50565b8015158114611bf457600080fdfea2646970667358221220e04c9d6453b449fd3b81fcd0a5e8e0cda21cbb0d4f093ce8a1c67de4b844424e64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addMigrationData(address,(address,address,address,address[]),bool)": {
        "params": {
          "mData": "MigrationData struct that contains information of the old and new pools",
          "oldPoolAddress": "pool address to migrate from",
          "overwrite": "should overwrite existing migration data"
        }
      },
      "batch(bytes[],bool)": {
        "params": {
          "calls": "An array of inputs for each call.",
          "revertOnFail": "If True then reverts after a failed call and stops doing further calls."
        }
      },
      "migrate(address,uint256,uint256)": {
        "params": {
          "amount": "amount of LP tokens to migrate",
          "minAmount": "of new LP tokens to receive",
          "oldPoolAddress": "pool address to migrate from"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "rescue(address,address)": {
        "params": {
          "to": "Minimum amount of new LPToken to receive",
          "token": "Amount of old LPToken to migrate"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "GeneralizedSwapMigrator",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addMigrationData(address,(address,address,address,address[]),bool)": {
        "notice": "Add new migration data to the contract"
      },
      "batch(bytes[],bool)": {
        "notice": "Allows batched call to self (this contract)."
      },
      "migrate(address,uint256,uint256)": {
        "notice": "Migrates saddle LP tokens from a pool to another"
      },
      "rescue(address,address)": {
        "notice": "Rescues any token that may be sent to this contract accidentally."
      }
    },
    "notice": "This contract is responsible for migration liquidity between pools Users can use this contract to remove their liquidity from the old pools and add them to the new ones with a single transaction.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1711,
        "contract": "contracts/GeneralizedSwapMigrator.sol:GeneralizedSwapMigrator",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6653,
        "contract": "contracts/GeneralizedSwapMigrator.sol:GeneralizedSwapMigrator",
        "label": "migrationMap",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(MigrationData)6642_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(IERC20)3028)dyn_storage": {
        "base": "t_contract(IERC20)3028",
        "encoding": "dynamic_array",
        "label": "contract IERC20[]",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)3028": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(MigrationData)6642_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct GeneralizedSwapMigrator.MigrationData)",
        "numberOfBytes": "32",
        "value": "t_struct(MigrationData)6642_storage"
      },
      "t_struct(MigrationData)6642_storage": {
        "encoding": "inplace",
        "label": "struct GeneralizedSwapMigrator.MigrationData",
        "members": [
          {
            "astId": 6634,
            "contract": "contracts/GeneralizedSwapMigrator.sol:GeneralizedSwapMigrator",
            "label": "newPoolAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6636,
            "contract": "contracts/GeneralizedSwapMigrator.sol:GeneralizedSwapMigrator",
            "label": "oldPoolLPTokenAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)3028"
          },
          {
            "astId": 6638,
            "contract": "contracts/GeneralizedSwapMigrator.sol:GeneralizedSwapMigrator",
            "label": "newPoolLPTokenAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(IERC20)3028"
          },
          {
            "astId": 6641,
            "contract": "contracts/GeneralizedSwapMigrator.sol:GeneralizedSwapMigrator",
            "label": "tokens",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_contract(IERC20)3028)dyn_storage"
          }
        ],
        "numberOfBytes": "128"
      }
    }
  }
}
