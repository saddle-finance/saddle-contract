{
  "address": "0xccFd60589F4E15a23ad326A5E2c2D871ed310152",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_gasLimit",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_SDL",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_OP_SDL",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "oldGasLimit",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "newGasLimit",
          "type": "uint32"
        }
      ],
      "name": "UpdateGasLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "l1Token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldL2Token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newL2Token",
          "type": "address"
        }
      ],
      "name": "UpdateTokenMapping",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "bridge",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "check",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "l2AddrMap",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_gasLimit",
          "type": "uint32"
        }
      ],
      "name": "setGasLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l1Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l2Token",
          "type": "address"
        }
      ],
      "name": "setL2TokenPair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x37184031327d80e3fd17909755751bc34af36d2af1a02c2f02221bd4fc86696a",
  "receipt": {
    "to": null,
    "from": "0x5BDb37d0Ddea3A90F233c7B7F6b9394B6b2eef34",
    "contractAddress": "0xccFd60589F4E15a23ad326A5E2c2D871ed310152",
    "transactionIndex": 148,
    "gasUsed": "1109196",
    "logsBloom": "0x
    "blockHash": "0x54e1a71a9796465ca7db3038970fe8018edb90348c0423fb52b682ca3e664236",
    "transactionHash": "0x37184031327d80e3fd17909755751bc34af36d2af1a02c2f02221bd4fc86696a",
    "logs": [
      {
        "transactionIndex": 148,
        "blockNumber": 15916679,
        "transactionHash": "0x37184031327d80e3fd17909755751bc34af36d2af1a02c2f02221bd4fc86696a",
        "address": "0xccFd60589F4E15a23ad326A5E2c2D871ed310152",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005bdb37d0ddea3a90f233c7b7f6b9394b6b2eef34"
        ],
        "data": "0x",
        "logIndex": 196,
        "blockHash": "0x54e1a71a9796465ca7db3038970fe8018edb90348c0423fb52b682ca3e664236"
      },
      {
        "transactionIndex": 148,
        "blockNumber": 15916679,
        "transactionHash": "0x37184031327d80e3fd17909755751bc34af36d2af1a02c2f02221bd4fc86696a",
        "address": "0xccFd60589F4E15a23ad326A5E2c2D871ed310152",
        "topics": [
          "0xe4954bdfb8c122bbe014a813e293d81a81b4d0140627367e3a047245687049ed"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030d40",
        "logIndex": 197,
        "blockHash": "0x54e1a71a9796465ca7db3038970fe8018edb90348c0423fb52b682ca3e664236"
      },
      {
        "transactionIndex": 148,
        "blockNumber": 15916679,
        "transactionHash": "0x37184031327d80e3fd17909755751bc34af36d2af1a02c2f02221bd4fc86696a",
        "address": "0xf1Dc500FdE233A4055e25e5BbF516372BC4F6871",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000ccfd60589f4e15a23ad326a5e2c2d871ed310152",
          "0x00000000000000000000000099c9fc46f92e8a1c0dec1b1747d010903e884be1"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 198,
        "blockHash": "0x54e1a71a9796465ca7db3038970fe8018edb90348c0423fb52b682ca3e664236"
      }
    ],
    "blockNumber": 15916679,
    "cumulativeGasUsed": "11525303",
    "status": 1,
    "byzantium": true
  },
  "args": [
    200000,
    "0xf1Dc500FdE233A4055e25e5BbF516372BC4F6871",
    "0xae31207ac34423c41576ff59bfb4e036150f9cf7"
  ],
  "numDeployments": 1,
  "solcInputHash": "38ac894988ebf4d6035a93b121cacae1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_gasLimit\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_SDL\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_OP_SDL\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"oldGasLimit\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newGasLimit\",\"type\":\"uint32\"}],\"name\":\"UpdateGasLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldL2Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newL2Token\",\"type\":\"address\"}],\"name\":\"UpdateTokenMapping\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bridge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"check\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"l2AddrMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_gasLimit\",\"type\":\"uint32\"}],\"name\":\"setGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2Token\",\"type\":\"address\"}],\"name\":\"setL2TokenPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Since Optimism bridge reequires manually providing the L2 token address, the contract owner must set the L2 token address before bridging.\",\"kind\":\"dev\",\"methods\":{\"bridge(address,address,uint256)\":{\"details\":\"The function will revert if the L2 token address is not set\",\"params\":{\"_amount\":\"amount of tokens to bridge\",\"_to\":\"destination address on Optimism chain\",\"_token\":\"token address on this chain\"}},\"check(address)\":{\"returns\":{\"_0\":\"True if the bridger is active\"}},\"constructor\":{\"details\":\"Arbitrum bridge requires base fee for the fee calculation therefore the function may revert on evm implementations that do not support base fee\",\"params\":{\"_OP_SDL\":\"SDL token address on Optimism chain\",\"_SDL\":\"SDL token address on this chain\",\"_gasLimit\":\"Gas limit for the L2 transaction\"}},\"cost()\":{\"details\":\"The gas cost for bridging is 0 on Ethereum mainnet\",\"returns\":{\"_0\":\"The cost of bridging tokens\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Only the owner can call this function and overriding contracts should implement `whenNotPaused` modifier to their bridge function\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setGasLimit(uint32)\":{\"details\":\"The function can only be called by the contract owner\",\"params\":{\"_gasLimit\":\"New gas limit\"}},\"setL2TokenPair(address,address)\":{\"details\":\"The function can only be called by the contract owner\",\"params\":{\"_l1Token\":\"L1 token address\",\"_l2Token\":\"L2 token address on Optimism\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Only the owner can call this function\"}},\"title\":\"Optimism bridger contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bridge(address,address,uint256)\":{\"notice\":\"Bridge given token to Optimism network\"},\"check(address)\":{\"notice\":\"Check if this bridge can be used\"},\"constructor\":{\"notice\":\"This contract is used to bridge tokens to Arbitrum\"},\"cost()\":{\"notice\":\"Get the network cost for bridging tokens to Optimism\"},\"pause()\":{\"notice\":\"Pause the bridger\"},\"setGasLimit(uint32)\":{\"notice\":\"Set gas limit to use for bridging\"},\"setL2TokenPair(address,address)\":{\"notice\":\"Set L2 token address for the given L1 token and approve the bridge to transfer the L1 token\"},\"unpause()\":{\"notice\":\"Unpause the bridger\"}},\"notice\":\"This contract is used to bridge tokens to Optimism network\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/xchainGauges/bridgers/OptimismBridger.sol\":\"OptimismBridger\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-4.7.3/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.7.3/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.7.3/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.7.3/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.7.3/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.7.3/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.7.3/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/xchainGauges/bridgers/Bridger.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-4.7.3/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts-4.7.3/security/Pausable.sol\\\";\\n\\n/// @title Abstract contract for bridging tokens between chains\\n/// @notice Defines the interface for bridger contracts with\\n/// basic owner and pause functionality. Owner is set to the\\n/// deployer of the contract.\\nabstract contract Bridger is Ownable, Pausable {\\n    /// @notice Pause the bridger\\n    /// @dev Only the owner can call this function and overriding contracts\\n    /// should implement `whenNotPaused` modifier to their bridge function\\n    function pause() external onlyOwner whenNotPaused {\\n        _pause();\\n    }\\n\\n    /// @notice Unpause the bridger\\n    /// @dev Only the owner can call this function\\n    function unpause() external onlyOwner whenPaused {\\n        _unpause();\\n    }\\n\\n    /// @notice Check if an account can use this bridger contract\\n    /// @param sender The address of the sender\\n    /// @return True if the bridger can be used by the sender\\n    function check(address sender) external view virtual returns (bool);\\n\\n    /// @notice Bridge tokens from the current chain to the target chain\\n    /// @dev The overriding contract should implement `whenNotPaused` modifier\\n    /// @param token The address of the token to bridge\\n    /// @param to The address to send the bridged tokens to\\n    /// @param amount The amount of tokens to bridge\\n    function bridge(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external payable virtual;\\n\\n    /// @notice Get the cost of bridging tokens. This depends on each\\n    /// bridger contract and the current state of the chain.\\n    /// @return The cost of bridging tokens\\n    function cost() external view virtual returns (uint256);\\n\\n    /// @notice Fallback function for receiving ETH\\n    receive() external payable virtual {}\\n}\\n\",\"keccak256\":\"0x3534db39d6c037c90ab692c532fcdaa0b8fb858fd07c09dba1aa6fbe6fde5754\",\"license\":\"MIT\"},\"contracts/xchainGauges/bridgers/OptimismBridger.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-4.7.3/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts-4.7.3/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./Bridger.sol\\\";\\n\\n/// @notice Interface for the official Optimism Bridge contract\\ninterface IOptimismStandardBridge {\\n    function depositERC20To(\\n        address _l1token,\\n        address _l2token,\\n        address _to,\\n        uint256 _amount,\\n        uint32 l2Gas,\\n        bytes calldata _data\\n    ) external payable;\\n}\\n\\n/// @title Optimism bridger contract\\n/// @notice This contract is used to bridge tokens to Optimism network\\n/// @dev Since Optimism bridge reequires manually providing the L2 token address,\\n/// the contract owner must set the L2 token address before bridging.\\ncontract OptimismBridger is Bridger {\\n    using SafeERC20 for IERC20;\\n\\n    // consts\\n    address private immutable SDL;\\n    address private constant OPTIMISM_L1_STANDARD_BRIDGE =\\n        0x99C9fc46f92E8a1c0deC1b1747d010903E884bE1;\\n\\n    // vars\\n    uint32 private gasLimit;\\n    mapping(address => address) public l2AddrMap;\\n\\n    event UpdateGasLimit(uint32 oldGasLimit, uint32 newGasLimit);\\n    event UpdateTokenMapping(\\n        address indexed l1Token,\\n        address oldL2Token,\\n        address newL2Token\\n    );\\n\\n    /// @notice This contract is used to bridge tokens to Arbitrum\\n    /// @dev Arbitrum bridge requires base fee for the fee calculation therefore\\n    /// the function may revert on evm implementations that do not support base fee\\n    /// @param _gasLimit Gas limit for the L2 transaction\\n    /// @param _SDL SDL token address on this chain\\n    /// @param _OP_SDL SDL token address on Optimism chain\\n    constructor(\\n        uint32 _gasLimit,\\n        address _SDL,\\n        address _OP_SDL\\n    ) {\\n        SDL = _SDL;\\n        gasLimit = _gasLimit;\\n        emit UpdateGasLimit(uint32(0), _gasLimit);\\n\\n        l2AddrMap[_SDL] = _OP_SDL;\\n        // approve token transfer to gateway\\n        IERC20(_SDL).safeApprove(\\n            OPTIMISM_L1_STANDARD_BRIDGE,\\n            type(uint256).max\\n        );\\n    }\\n\\n    /// @notice Bridge given token to Optimism network\\n    /// @dev The function will revert if the L2 token address is not set\\n    /// @param _token token address on this chain\\n    /// @param _to destination address on Optimism chain\\n    /// @param _amount amount of tokens to bridge\\n    function bridge(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) external payable override whenNotPaused {\\n        // Transfer token to this contract from msg.sender\\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        // Ensure token has l2 token pair\\n        address l2Token = l2AddrMap[_token];\\n        require(l2Token != address(0), \\\"L2 token not set\\\");\\n\\n        // Trigger deposit to optimism\\n        IOptimismStandardBridge(OPTIMISM_L1_STANDARD_BRIDGE).depositERC20To(\\n            _token,\\n            l2Token,\\n            _to,\\n            _amount,\\n            gasLimit,\\n            \\\"\\\"\\n        );\\n    }\\n\\n    /// @notice Get the network cost for bridging tokens to Optimism\\n    /// @dev The gas cost for bridging is 0 on Ethereum mainnet\\n    /// @return The cost of bridging tokens\\n    function cost() external pure override returns (uint256) {\\n        return 0;\\n    }\\n\\n    /// @notice Check if this bridge can be used\\n    /// @return True if the bridger is active\\n    function check(address) external pure override returns (bool) {\\n        return true;\\n    }\\n\\n    /// @notice Set gas limit to use for bridging\\n    /// @dev The function can only be called by the contract owner\\n    /// @param _gasLimit New gas limit\\n    function setGasLimit(uint32 _gasLimit) external onlyOwner {\\n        emit UpdateGasLimit(gasLimit, _gasLimit);\\n        gasLimit = _gasLimit;\\n    }\\n\\n    /// @notice Set L2 token address for the given L1 token and approve\\n    /// the bridge to transfer the L1 token\\n    /// @dev The function can only be called by the contract owner\\n    /// @param _l1Token L1 token address\\n    /// @param _l2Token L2 token address on Optimism\\n    function setL2TokenPair(address _l1Token, address _l2Token)\\n        external\\n        onlyOwner\\n    {\\n        // If l2 token is zero address, remove any approval for the l1 token\\n        // Else set approval to max for the l1 token\\n        uint256 approveAmount = 0;\\n        if (_l2Token != address(0)) {\\n            approveAmount = type(uint256).max;\\n        }\\n        IERC20(_l1Token).safeApprove(\\n            OPTIMISM_L1_STANDARD_BRIDGE,\\n            approveAmount\\n        );\\n\\n        emit UpdateTokenMapping(_l1Token, l2AddrMap[_l1Token], _l2Token);\\n        l2AddrMap[_l1Token] = _l2Token;\\n    }\\n}\\n\",\"keccak256\":\"0x62ecac1b31ed7332f551d3b11fc4c2b545e17729c8388e548eb968f4c66357cc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100cb5760003560e01c80638456cb5911610074578063c23697a81161004e578063c23697a814610214578063e3445a3b14610235578063f2fde38b1461027857600080fd5b80638456cb59146101a057806387121759146101b55780638da5cb5b146101c857600080fd5b80635c975abb116100a55780635c975abb1461012f578063715018a61461016b57806383d870fa1461018057600080fd5b806313faede6146100d75780633f4ba83a146100f857806352d84c621461010f57600080fd5b366100d257005b600080fd5b3480156100e357600080fd5b50604051600081526020015b60405180910390f35b34801561010457600080fd5b5061010d610298565b005b34801561011b57600080fd5b5061010d61012a366004610f88565b6102b2565b34801561013b57600080fd5b5060005474010000000000000000000000000000000000000000900460ff165b60405190151581526020016100ef565b34801561017757600080fd5b5061010d610367565b34801561018c57600080fd5b5061010d61019b366004610fd7565b610379565b3480156101ac57600080fd5b5061010d6104b1565b61010d6101c336600461100a565b6104c9565b3480156101d457600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100ef565b34801561022057600080fd5b5061015b61022f366004611046565b50600190565b34801561024157600080fd5b506101ef610250366004611046565b60016020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b34801561028457600080fd5b5061010d610293366004611046565b61066f565b6102a0610944565b6102a86109c5565b6102b0610a49565b565b6102ba610944565b6000546040805163ffffffff75010000000000000000000000000000000000000000009093048316815291831660208301527fe4954bdfb8c122bbe014a813e293d81a81b4d0140627367e3a047245687049ed910160405180910390a16000805463ffffffff9092167501000000000000000000000000000000000000000000027fffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffffff909216919091179055565b61036f610944565b6102b06000610ac6565b610381610944565b600073ffffffffffffffffffffffffffffffffffffffff8216156103c257507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b6103f773ffffffffffffffffffffffffffffffffffffffff84167399c9fc46f92e8a1c0dec1b1747d010903e884be183610726565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526001602090815260409182902054825190851681529386169084015290917f2069a26c43c36ffaabe0c2d19bf65e55dd03abecdc449f5cc9663491e97f709d910160405180910390a25073ffffffffffffffffffffffffffffffffffffffff918216600090815260016020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001691909216179055565b6104b9610944565b6104c1610b3b565b6102b0610bc0565b6104d1610b3b565b6104f373ffffffffffffffffffffffffffffffffffffffff8416333084610c2f565b73ffffffffffffffffffffffffffffffffffffffff8084166000908152600160205260409020541680610587576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4c3220746f6b656e206e6f74207365740000000000000000000000000000000060448201526064015b60405180910390fd5b600080546040517f838b252000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808816600483015280851660248301528616604482015260648101859052750100000000000000000000000000000000000000000090910463ffffffff16608482015260c060a482015260c48101919091527399c9fc46f92e8a1c0dec1b1747d010903e884be19063838b25209060e401600060405180830381600087803b15801561065157600080fd5b505af1158015610665573d6000803e3d6000fd5b5050505050505050565b610677610944565b73ffffffffffffffffffffffffffffffffffffffff811661071a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161057e565b61072381610ac6565b50565b8015806107c657506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015284169063dd62ed3e90604401602060405180830381865afa1580156107a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c49190611061565b155b610852576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606482015260840161057e565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526109269084907f095ea7b300000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610c93565b505050565b606061093a8484600085610d9f565b90505b9392505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146102b0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161057e565b60005474010000000000000000000000000000000000000000900460ff166102b0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604482015260640161057e565b610a516109c5565b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a1565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60005474010000000000000000000000000000000000000000900460ff16156102b0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015260640161057e565b610bc8610b3b565b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610a9c3390565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052610c8d9085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016108a4565b50505050565b6000610cf5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661092b9092919063ffffffff16565b8051909150156109265780806020019051810190610d13919061107a565b610926576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161057e565b606082471015610e31576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161057e565b73ffffffffffffffffffffffffffffffffffffffff85163b610eaf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161057e565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610ed891906110c0565b60006040518083038185875af1925050503d8060008114610f15576040519150601f19603f3d011682016040523d82523d6000602084013e610f1a565b606091505b5091509150610f2a828286610f35565b979650505050505050565b60608315610f4457508161093d565b825115610f545782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057e91906110dc565b600060208284031215610f9a57600080fd5b813563ffffffff8116811461093d57600080fd5b803573ffffffffffffffffffffffffffffffffffffffff81168114610fd257600080fd5b919050565b60008060408385031215610fea57600080fd5b610ff383610fae565b915061100160208401610fae565b90509250929050565b60008060006060848603121561101f57600080fd5b61102884610fae565b925061103660208501610fae565b9150604084013590509250925092565b60006020828403121561105857600080fd5b61093d82610fae565b60006020828403121561107357600080fd5b5051919050565b60006020828403121561108c57600080fd5b8151801515811461093d57600080fd5b60005b838110156110b757818101518382015260200161109f565b50506000910152565b600082516110d281846020870161109c565b9190910192915050565b60208152600082518060208401526110fb81604085016020870161109c565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea2646970667358221220e1af6662e1e6ea1ded2e26fcdbda5d6a744c36326bb8192ee774919f47d99dd264736f6c63430008110033",
  "devdoc": {
    "details": "Since Optimism bridge reequires manually providing the L2 token address, the contract owner must set the L2 token address before bridging.",
    "kind": "dev",
    "methods": {
      "bridge(address,address,uint256)": {
        "details": "The function will revert if the L2 token address is not set",
        "params": {
          "_amount": "amount of tokens to bridge",
          "_to": "destination address on Optimism chain",
          "_token": "token address on this chain"
        }
      },
      "check(address)": {
        "returns": {
          "_0": "True if the bridger is active"
        }
      },
      "constructor": {
        "details": "Arbitrum bridge requires base fee for the fee calculation therefore the function may revert on evm implementations that do not support base fee",
        "params": {
          "_OP_SDL": "SDL token address on Optimism chain",
          "_SDL": "SDL token address on this chain",
          "_gasLimit": "Gas limit for the L2 transaction"
        }
      },
      "cost()": {
        "details": "The gas cost for bridging is 0 on Ethereum mainnet",
        "returns": {
          "_0": "The cost of bridging tokens"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "Only the owner can call this function and overriding contracts should implement `whenNotPaused` modifier to their bridge function"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setGasLimit(uint32)": {
        "details": "The function can only be called by the contract owner",
        "params": {
          "_gasLimit": "New gas limit"
        }
      },
      "setL2TokenPair(address,address)": {
        "details": "The function can only be called by the contract owner",
        "params": {
          "_l1Token": "L1 token address",
          "_l2Token": "L2 token address on Optimism"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Only the owner can call this function"
      }
    },
    "title": "Optimism bridger contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "bridge(address,address,uint256)": {
        "notice": "Bridge given token to Optimism network"
      },
      "check(address)": {
        "notice": "Check if this bridge can be used"
      },
      "constructor": {
        "notice": "This contract is used to bridge tokens to Arbitrum"
      },
      "cost()": {
        "notice": "Get the network cost for bridging tokens to Optimism"
      },
      "pause()": {
        "notice": "Pause the bridger"
      },
      "setGasLimit(uint32)": {
        "notice": "Set gas limit to use for bridging"
      },
      "setL2TokenPair(address,address)": {
        "notice": "Set L2 token address for the given L1 token and approve the bridge to transfer the L1 token"
      },
      "unpause()": {
        "notice": "Unpause the bridger"
      }
    },
    "notice": "This contract is used to bridge tokens to Optimism network",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4026,
        "contract": "contracts/xchainGauges/bridgers/OptimismBridger.sol:OptimismBridger",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4860,
        "contract": "contracts/xchainGauges/bridgers/OptimismBridger.sol:OptimismBridger",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 9343,
        "contract": "contracts/xchainGauges/bridgers/OptimismBridger.sol:OptimismBridger",
        "label": "gasLimit",
        "offset": 21,
        "slot": "0",
        "type": "t_uint32"
      },
      {
        "astId": 9347,
        "contract": "contracts/xchainGauges/bridgers/OptimismBridger.sol:OptimismBridger",
        "label": "l2AddrMap",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}
