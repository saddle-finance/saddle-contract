{
  "address": "0x5DCA270671935cf3dF78bd8373C22BE250198a03",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "merkleRoot_",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "startTimestamp_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "merkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "verifyAndClaimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "vestedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "vestings",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isVerified",
          "type": "bool"
        },
        {
          "internalType": "uint120",
          "name": "totalAmount",
          "type": "uint120"
        },
        {
          "internalType": "uint120",
          "name": "released",
          "type": "uint120"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x46e3fc92135ee7ecb563fef71cc3f6c1772f206a95cf18f35957160965843871",
  "receipt": {
    "to": null,
    "from": "0x5BDb37d0Ddea3A90F233c7B7F6b9394B6b2eef34",
    "contractAddress": "0x5DCA270671935cf3dF78bd8373C22BE250198a03",
    "transactionIndex": 13,
    "gasUsed": "893246",
    "logsBloom": "0x
    "blockHash": "0xbce81aad35ce87653a2dbe96dad6d343666a1fbc46f66da82898fcce9024736e",
    "transactionHash": "0x46e3fc92135ee7ecb563fef71cc3f6c1772f206a95cf18f35957160965843871",
    "logs": [],
    "blockNumber": 13625113,
    "cumulativeGasUsed": "3781414",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf1Dc500FdE233A4055e25e5BbF516372BC4F6871",
    "0x235d88efaae4e04494277ca85279b0550806a2b3efb124e38933a167ba4e7cec",
    1637042400
  ],
  "solcInputHash": "af4196fa2def37a1783574347c2c49c1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot_\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"verifyAndClaimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"vestedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vestings\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"},{\"internalType\":\"uint120\",\"name\":\"totalAmount\",\"type\":\"uint120\"},{\"internalType\":\"uint120\",\"name\":\"released\",\"type\":\"uint120\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimReward(address)\":{\"params\":{\"account\":\"Address of the account that the caller is claiming for. If this is set to `address(0)`, it will use the `msg.sender` instead.\"}},\"constructor\":{\"details\":\"The information about the method used to generate the merkle root and how to replicate it can be found on https://docs.saddle.finance.\",\"params\":{\"merkleRoot_\":\"Bytes of the merkle root node which is generated off chain.\",\"startTimestamp_\":\"Timestamp in seconds when to start vesting. This can be backdated as well.\",\"token_\":\"Address of the token that will be vested\"}},\"verifyAndClaimReward(address,uint256,bytes32[])\":{\"params\":{\"account\":\"Address of the account that the caller is verifying for\",\"merkleProof\":\"Merkle proof that was generated off chain.\",\"totalAmount\":\"Total amount that will be vested linearly\"}},\"vestedAmount(address)\":{\"params\":{\"account\":\"Address to calculate the vested amount for\"}}},\"title\":\"RetroactiveVesting\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimReward(address)\":{\"notice\":\"Claims the vested amount out of the total amount eligible for the given account.\"},\"constructor\":{\"notice\":\"Deploys this contract with given parameters\"},\"verifyAndClaimReward(address,uint256,bytes32[])\":{\"notice\":\"Verifies the given account is eligible for the given amount. Then claims the vested amount out of the total amount eligible.\"},\"vestedAmount(address)\":{\"notice\":\"Calculated the amount that has already vested but hasn't been released yet. Reverts if the given account has not been verified.\"}},\"notice\":\"A token holder contract that can release its token balance linearly over the vesting period of 2 years. Respective address and the amount are included in each merkle node.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RetroactiveVesting.sol\":\"RetroactiveVesting\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        bytes32 computedHash = leaf;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n\\n        // Check if the computed hash (root) is equal to the provided root\\n        return computedHash == root;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1bbdc6813c021e138da527c44d2615931b0e5c7fa2f58369846ed288324a8\",\"license\":\"MIT\"},\"contracts/RetroactiveVesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\n/**\\n * @title RetroactiveVesting\\n * @notice A token holder contract that can release its token balance linearly over\\n * the vesting period of 2 years. Respective address and the amount are included in each merkle node.\\n */\\ncontract RetroactiveVesting {\\n    using SafeERC20 for IERC20;\\n\\n    struct VestingData {\\n        bool isVerified;\\n        uint120 totalAmount;\\n        uint120 released;\\n    }\\n\\n    event Claimed(address indexed account, uint256 amount);\\n\\n    // Address of the token that is subject to vesting\\n    IERC20 public immutable token;\\n    // Merkle root used to verify the beneficiary address and the amount of the tokens\\n    bytes32 public immutable merkleRoot;\\n    // Epoch unix timestamp in seconds when the vesting starts to decay\\n    uint256 public immutable startTimestamp;\\n    // Vesting period of 2 years\\n    uint256 public constant DURATION = 2 * (52 weeks);\\n\\n    mapping(address => VestingData) public vestings;\\n\\n    /**\\n     * @notice Deploys this contract with given parameters\\n     * @dev The information about the method used to generate the merkle root and how to replicate it\\n     * can be found on https://docs.saddle.finance.\\n     * @param token_ Address of the token that will be vested\\n     * @param merkleRoot_ Bytes of the merkle root node which is generated off chain.\\n     * @param startTimestamp_ Timestamp in seconds when to start vesting. This can be backdated as well.\\n     */\\n    constructor(\\n        IERC20 token_,\\n        bytes32 merkleRoot_,\\n        uint256 startTimestamp_\\n    ) public {\\n        require(address(token_) != address(0), \\\"token_ cannot be empty\\\");\\n        require(merkleRoot_[0] != 0, \\\"merkleRoot_ cannot be empty\\\");\\n        require(startTimestamp_ != 0, \\\"startTimestamp_ cannot be 0\\\");\\n\\n        token = token_;\\n        merkleRoot = merkleRoot_;\\n        startTimestamp = startTimestamp_;\\n    }\\n\\n    /**\\n     * @notice Verifies the given account is eligible for the given amount. Then claims the\\n     * vested amount out of the total amount eligible.\\n     * @param account Address of the account that the caller is verifying for\\n     * @param totalAmount Total amount that will be vested linearly\\n     * @param merkleProof Merkle proof that was generated off chain.\\n     */\\n    function verifyAndClaimReward(\\n        address account,\\n        uint256 totalAmount,\\n        bytes32[] calldata merkleProof\\n    ) external {\\n        require(\\n            totalAmount > 0 && totalAmount < type(uint120).max,\\n            \\\"totalAmount cannot be 0 or larger than max uint120 value\\\"\\n        );\\n        VestingData storage vesting = vestings[account];\\n        if (!vesting.isVerified) {\\n            // Verify the merkle proof.\\n            bytes32 node = keccak256(abi.encodePacked(account, totalAmount));\\n            require(\\n                MerkleProof.verify(merkleProof, merkleRoot, node),\\n                \\\"could not verify merkleProof\\\"\\n            );\\n            // Save the verified state\\n            vesting.isVerified = true;\\n            vesting.totalAmount = uint120(totalAmount);\\n        }\\n        _claimReward(account);\\n    }\\n\\n    /**\\n     * @notice Claims the vested amount out of the total amount eligible for the given account.\\n     * @param account Address of the account that the caller is claiming for. If this is set\\n     * to `address(0)`, it will use the `msg.sender` instead.\\n     */\\n    function claimReward(address account) external {\\n        if (account == address(0)) {\\n            account = msg.sender;\\n        }\\n        require(vestings[account].isVerified, \\\"must verify first\\\");\\n        _claimReward(account);\\n    }\\n\\n    function _claimReward(address account) internal {\\n        VestingData storage vesting = vestings[account];\\n        uint256 released = vesting.released;\\n        uint256 amount = _vestedAmount(\\n            vesting.totalAmount,\\n            released,\\n            startTimestamp,\\n            DURATION\\n        );\\n        uint256 newReleased = amount + released;\\n        require(\\n            newReleased < type(uint120).max,\\n            \\\"newReleased is too big to be cast uint120\\\"\\n        );\\n        vesting.released = uint120(newReleased);\\n        token.safeTransfer(account, amount);\\n\\n        emit Claimed(account, amount);\\n    }\\n\\n    /**\\n     * @notice Calculated the amount that has already vested but hasn't been released yet.\\n     * Reverts if the given account has not been verified.\\n     * @param account Address to calculate the vested amount for\\n     */\\n    function vestedAmount(address account) external view returns (uint256) {\\n        require(vestings[account].isVerified, \\\"must verify first\\\");\\n        return\\n            _vestedAmount(\\n                vestings[account].totalAmount,\\n                vestings[account].released,\\n                startTimestamp,\\n                DURATION\\n            );\\n    }\\n\\n    /**\\n     * @notice Calculates the amount that has already vested but hasn't been released yet.\\n     */\\n    function _vestedAmount(\\n        uint256 total,\\n        uint256 released,\\n        uint256 startTimestamp,\\n        uint256 durationInSeconds\\n    ) internal view returns (uint256) {\\n        uint256 blockTimestamp = block.timestamp;\\n\\n        // If current block is before the start, there are no vested amount.\\n        if (blockTimestamp < startTimestamp) {\\n            return 0;\\n        }\\n\\n        uint256 elapsedTime = blockTimestamp - startTimestamp;\\n        uint256 vested;\\n\\n        // If over vesting duration, all tokens vested\\n        if (elapsedTime >= durationInSeconds) {\\n            vested = total;\\n        } else {\\n            vested = (total * elapsedTime) / durationInSeconds;\\n        }\\n\\n        return vested - released;\\n    }\\n}\\n\",\"keccak256\":\"0x03693419eaa261a2a87c5c634452cc2e94600cd5f84ae27437ab4f2ac472fbbc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063d279c1911161005b578063d279c191146100fa578063daf498631461010d578063e6fd48bc1461018e578063fc0c546a146101b557600080fd5b80631be052891461008d5780632eb4a7ab146100ab578063384711cc146100d2578063935fe8c8146100e5575b600080fd5b6100986303bfc40081565b6040519081526020015b60405180910390f35b6100987f000000000000000000000000000000000000000000000000000000000000000081565b6100986100e0366004610c5c565b610201565b6100f86100f3366004610c77565b61031d565b005b6100f8610108366004610c5c565b610563565b61015f61011b366004610c5c565b60006020819052908152604090205460ff8116906effffffffffffffffffffffffffffff610100820481169170010000000000000000000000000000000090041683565b6040805193151584526effffffffffffffffffffffffffffff92831660208501529116908201526060016100a2565b6100987f000000000000000000000000000000000000000000000000000000000000000081565b6101dc7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100a2565b73ffffffffffffffffffffffffffffffffffffffff811660009081526020819052604081205460ff16610295576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6d7573742076657269667920666972737400000000000000000000000000000060448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216600090815260208190526040902054610317906effffffffffffffffffffffffffffff61010082048116917001000000000000000000000000000000009004167f00000000000000000000000000000000000000000000000000000000000000006303bfc40061061c565b92915050565b60008311801561033b57506effffffffffffffffffffffffffffff83105b6103c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603860248201527f746f74616c416d6f756e742063616e6e6f742062652030206f72206c6172676560448201527f72207468616e206d61782075696e743132302076616c75650000000000000000606482015260840161028c565b73ffffffffffffffffffffffffffffffffffffffff84166000908152602081905260409020805460ff16610553576040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606087901b166020820152603481018590526000906054016040516020818303038152906040528051906020012090506104a98484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152507f0000000000000000000000000000000000000000000000000000000000000000925085915061067f9050565b61050f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f636f756c64206e6f7420766572696679206d65726b6c6550726f6f6600000000604482015260640161028c565b5080546effffffffffffffffffffffffffffff8516610100027fffffffffffffffffffffffffffffffff000000000000000000000000000000009091161760011781555b61055c85610730565b5050505050565b73ffffffffffffffffffffffffffffffffffffffff81166105815750335b73ffffffffffffffffffffffffffffffffffffffff811660009081526020819052604090205460ff16610610576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6d75737420766572696679206669727374000000000000000000000000000000604482015260640161028c565b61061981610730565b50565b60004283811015610631576000915050610677565b600061063d8583610e20565b9050600084821061064f575086610667565b8461065a838a610de3565b6106649190610da8565b90505b6106718782610e20565b93505050505b949350505050565b600081815b85518110156107235760008682815181106106a1576106a1610ecf565b602002602001015190508083116106e3576040805160208101859052908101829052606001604051602081830303815290604052805190602001209250610710565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b508061071b81610e67565b915050610684565b50831490505b9392505050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152602081905260408120805490916effffffffffffffffffffffffffffff70010000000000000000000000000000000083048116926107b79161010090910416837f00000000000000000000000000000000000000000000000000000000000000006303bfc40061061c565b905060006107c58383610d90565b90506effffffffffffffffffffffffffffff8110610865576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f6e657752656c656173656420697320746f6f2062696720746f2062652063617360448201527f742075696e743132300000000000000000000000000000000000000000000000606482015260840161028c565b83547fff000000000000000000000000000000ffffffffffffffffffffffffffffffff167001000000000000000000000000000000006effffffffffffffffffffffffffffff8316021784556108f27f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168684610949565b8473ffffffffffffffffffffffffffffffffffffffff167fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a8360405161093a91815260200190565b60405180910390a25050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526109d69084906109db565b505050565b6000610a3d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610ae79092919063ffffffff16565b8051909150156109d65780806020019051810190610a5b9190610d01565b6109d6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161028c565b6060610677848460008585843b610b5a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161028c565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610b839190610d23565b60006040518083038185875af1925050503d8060008114610bc0576040519150601f19603f3d011682016040523d82523d6000602084013e610bc5565b606091505b5091509150610bd5828286610be0565b979650505050505050565b60608315610bef575081610729565b825115610bff5782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161028c9190610d3f565b803573ffffffffffffffffffffffffffffffffffffffff81168114610c5757600080fd5b919050565b600060208284031215610c6e57600080fd5b61072982610c33565b60008060008060608587031215610c8d57600080fd5b610c9685610c33565b935060208501359250604085013567ffffffffffffffff80821115610cba57600080fd5b818701915087601f830112610cce57600080fd5b813581811115610cdd57600080fd5b8860208260051b8501011115610cf257600080fd5b95989497505060200194505050565b600060208284031215610d1357600080fd5b8151801515811461072957600080fd5b60008251610d35818460208701610e37565b9190910192915050565b6020815260008251806020840152610d5e816040850160208701610e37565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60008219821115610da357610da3610ea0565b500190565b600082610dde577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e1b57610e1b610ea0565b500290565b600082821015610e3257610e32610ea0565b500390565b60005b83811015610e52578181015183820152602001610e3a565b83811115610e61576000848401525b50505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610e9957610e99610ea0565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea264697066735822122055338b0816d4d2b2cb0f40cc2b0d7bd0c7c1c26e03de953c914f1a364201940364736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimReward(address)": {
        "params": {
          "account": "Address of the account that the caller is claiming for. If this is set to `address(0)`, it will use the `msg.sender` instead."
        }
      },
      "constructor": {
        "details": "The information about the method used to generate the merkle root and how to replicate it can be found on https://docs.saddle.finance.",
        "params": {
          "merkleRoot_": "Bytes of the merkle root node which is generated off chain.",
          "startTimestamp_": "Timestamp in seconds when to start vesting. This can be backdated as well.",
          "token_": "Address of the token that will be vested"
        }
      },
      "verifyAndClaimReward(address,uint256,bytes32[])": {
        "params": {
          "account": "Address of the account that the caller is verifying for",
          "merkleProof": "Merkle proof that was generated off chain.",
          "totalAmount": "Total amount that will be vested linearly"
        }
      },
      "vestedAmount(address)": {
        "params": {
          "account": "Address to calculate the vested amount for"
        }
      }
    },
    "title": "RetroactiveVesting",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimReward(address)": {
        "notice": "Claims the vested amount out of the total amount eligible for the given account."
      },
      "constructor": {
        "notice": "Deploys this contract with given parameters"
      },
      "verifyAndClaimReward(address,uint256,bytes32[])": {
        "notice": "Verifies the given account is eligible for the given amount. Then claims the vested amount out of the total amount eligible."
      },
      "vestedAmount(address)": {
        "notice": "Calculated the amount that has already vested but hasn't been released yet. Reverts if the given account has not been verified."
      }
    },
    "notice": "A token holder contract that can release its token balance linearly over the vesting period of 2 years. Respective address and the amount are included in each merkle node.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3417,
        "contract": "contracts/RetroactiveVesting.sol:RetroactiveVesting",
        "label": "vestings",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(VestingData)3393_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(VestingData)3393_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RetroactiveVesting.VestingData)",
        "numberOfBytes": "32",
        "value": "t_struct(VestingData)3393_storage"
      },
      "t_struct(VestingData)3393_storage": {
        "encoding": "inplace",
        "label": "struct RetroactiveVesting.VestingData",
        "members": [
          {
            "astId": 3388,
            "contract": "contracts/RetroactiveVesting.sol:RetroactiveVesting",
            "label": "isVerified",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 3390,
            "contract": "contracts/RetroactiveVesting.sol:RetroactiveVesting",
            "label": "totalAmount",
            "offset": 1,
            "slot": "0",
            "type": "t_uint120"
          },
          {
            "astId": 3392,
            "contract": "contracts/RetroactiveVesting.sol:RetroactiveVesting",
            "label": "released",
            "offset": 16,
            "slot": "0",
            "type": "t_uint120"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint120": {
        "encoding": "inplace",
        "label": "uint120",
        "numberOfBytes": "15"
      }
    }
  }
}
