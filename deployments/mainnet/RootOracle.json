{
  "address": "0x450441d90715c79870f48105c2ea445110E2F509",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ve",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_callProxy",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "TransferOwnership",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldCallProxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newCallProxy",
          "type": "address"
        }
      ],
      "name": "UpdateCallProxy",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FACTORY",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VE",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptTransferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "callProxy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_futureOwner",
          "type": "address"
        }
      ],
      "name": "commitTransferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "futureOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        }
      ],
      "name": "push",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "push",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newCallProxy",
          "type": "address"
        }
      ],
      "name": "setCallProxy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x86a180216ff66b2632dec114a3e5e13c4dab3bfebe29887ccfe359b05f0551da",
  "receipt": {
    "to": null,
    "from": "0x979B44CFc7a9B54BED8a3C4FD674B09c194219fD",
    "contractAddress": "0x450441d90715c79870f48105c2ea445110E2F509",
    "transactionIndex": 92,
    "gasUsed": "837571",
    "logsBloom": "0x
    "blockHash": "0xff80d87f9f69705de48cd8e07841d5199bf182027981d5656263cafaa1e8b73c",
    "transactionHash": "0x86a180216ff66b2632dec114a3e5e13c4dab3bfebe29887ccfe359b05f0551da",
    "logs": [
      {
        "transactionIndex": 92,
        "blockNumber": 15916671,
        "transactionHash": "0x86a180216ff66b2632dec114a3e5e13c4dab3bfebe29887ccfe359b05f0551da",
        "address": "0x450441d90715c79870f48105c2ea445110E2F509",
        "topics": [
          "0xe385116766307e81d4427b03f1ac50c300b2f6a5df7b3c67eeb7eaaab12f0805"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000031a68c551db6baaa0f4ee96443706c7b663bfe5d",
        "logIndex": 252,
        "blockHash": "0xff80d87f9f69705de48cd8e07841d5199bf182027981d5656263cafaa1e8b73c"
      },
      {
        "transactionIndex": 92,
        "blockNumber": 15916671,
        "transactionHash": "0x86a180216ff66b2632dec114a3e5e13c4dab3bfebe29887ccfe359b05f0551da",
        "address": "0x450441d90715c79870f48105c2ea445110E2F509",
        "topics": [
          "0x5c486528ec3e3f0ea91181cff8116f02bfa350e03b8b6f12e00765adbb5af85c"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000979b44cfc7a9b54bed8a3c4fd674b09c194219fd",
        "logIndex": 253,
        "blockHash": "0xff80d87f9f69705de48cd8e07841d5199bf182027981d5656263cafaa1e8b73c"
      }
    ],
    "blockNumber": 15916671,
    "cumulativeGasUsed": "11201424",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x19a5Ec09eE74f64573ac53f48A48616CE943C047",
    "0xD2751CdBED54B87777E805be36670D7aeAe73bb2",
    "0x31a68C551dB6BaaA0F4ee96443706C7B663bFe5d"
  ],
  "numDeployments": 1,
  "solcInputHash": "38ac894988ebf4d6035a93b121cacae1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ve\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_callProxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"TransferOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldCallProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newCallProxy\",\"type\":\"address\"}],\"name\":\"UpdateCallProxy\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_futureOwner\",\"type\":\"address\"}],\"name\":\"commitTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"futureOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"}],\"name\":\"push\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"push\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newCallProxy\",\"type\":\"address\"}],\"name\":\"setCallProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"TransferOwnership(address,address)\":{\"params\":{\"newOwner\":\"New owner of the contract\",\"oldOwner\":\"Previous owner of the contract\"}},\"UpdateCallProxy(address,address)\":{\"params\":{\"newCallProxy\":\"New call proxy address\",\"oldCallProxy\":\"Previous call proxy address\"}}},\"kind\":\"dev\",\"methods\":{\"acceptTransferOwnership()\":{\"details\":\"This can only be called by the future owner of the contract\"},\"commitTransferOwnership(address)\":{\"details\":\"This can only be called by the owner of the contract\",\"params\":{\"_futureOwner\":\"Address of the new owner\"}},\"constructor\":{\"params\":{\"_callProxy\":\"CallProxy contract address. This should be set to AnyCallTranslator.\",\"_factory\":\"RootGaugeFactory contract address\",\"_ve\":\"VotingEscrow contract address\"}},\"push(uint256)\":{\"details\":\"This will be reverted if caller doesn't have any veSDL balance\",\"params\":{\"_chainId\":\"Chain ID of the child chain to push the data\"}},\"push(uint256,address)\":{\"details\":\"This will be reverted if user doesn't have any veSDL balance\",\"params\":{\"_chainId\":\"Chain ID of the child chain to push the data\",\"_user\":\"Address of the account to push the data for\"}},\"setCallProxy(address)\":{\"details\":\"This can only be called by the owner of the contract\",\"params\":{\"_newCallProxy\":\"Address of the new call proxy\"}}},\"title\":\"Root Oracle contract\",\"version\":1},\"userdoc\":{\"events\":{\"TransferOwnership(address,address)\":{\"notice\":\"Emitted when ownership is transferred\"},\"UpdateCallProxy(address,address)\":{\"notice\":\"Emitted when call proxy address is updated\"}},\"kind\":\"user\",\"methods\":{\"acceptTransferOwnership()\":{\"notice\":\"Accept the ownership of the contract\"},\"commitTransferOwnership(address)\":{\"notice\":\"Commit to transfer of the ownership of the contract\"},\"constructor\":{\"notice\":\"Constructor for RootOracle contract\"},\"push(uint256)\":{\"notice\":\"Push the veSDL data of the caller to the child chain\"},\"push(uint256,address)\":{\"notice\":\"Push the veSDL data of an account to the child chain\"},\"setCallProxy(address)\":{\"notice\":\"Set the call proxy address\"}},\"notice\":\"RootOracle contract is responsible for reading veSDL data from this chain and sending it to the child chains\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/xchainGauges/oracles/RootOracle.sol\":\"RootOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-4.7.3/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.7.3/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.7.3/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.7.3/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"contracts/xchainGauges/oracles/RootOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-4.7.3/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/// @notice Point struct is used to store the veSDL data from the parent chain\\n/// @param bias Bias of the amount at the time of the update\\n/// @param slope Slope of amount per second that should be reduced\\n/// @param ts Timestamp of the update\\nstruct Point {\\n    int128 bias;\\n    int128 slope;\\n    uint256 ts;\\n}\\n\\n// Interface compatible with AnyCall contract\\ninterface ICallProxy {\\n    function anyCall(\\n        address _to,\\n        bytes calldata _data,\\n        address _fallback,\\n        uint256 _toChainId,\\n        uint256 _flags\\n    ) external;\\n}\\n\\n// Inteface compatible with RootGaugeFactory\\ninterface Factory {\\n    function get_bridger(uint256 _chain_id) external view returns (address);\\n}\\n\\n// Inteface compatible with VotingEscrow\\ninterface votingEscrow {\\n    function epoch() external view returns (uint256);\\n\\n    function point_history(uint256 _idx) external view returns (Point memory);\\n\\n    function user_point_epoch(address _user) external view returns (uint256);\\n\\n    function user_point_history(address _user, uint256 _idx)\\n        external\\n        view\\n        returns (Point memory);\\n}\\n\\n/// @title Root Oracle contract\\n/// @notice RootOracle contract is responsible for reading veSDL data from this chain\\n/// and sending it to the child chains\\ncontract RootOracle {\\n    // consts\\n    // RootGaugeFactory contract address\\n    address public immutable FACTORY;\\n    // VotingEscrow contract address\\n    address public immutable VE;\\n\\n    // events\\n    /// @notice Emitted when ownership is transferred\\n    /// @param oldOwner Previous owner of the contract\\n    /// @param newOwner New owner of the contract\\n    event TransferOwnership(address oldOwner, address newOwner);\\n\\n    /// @notice Emitted when call proxy address is updated\\n    /// @param oldCallProxy Previous call proxy address\\n    /// @param newCallProxy New call proxy address\\n    event UpdateCallProxy(address oldCallProxy, address newCallProxy);\\n\\n    // address for call proxy contract that is responsible for bridging the data\\n    address public callProxy;\\n    // address of the owner of the contract\\n    address public owner;\\n    // address of the future owner of the contract\\n    address public futureOwner;\\n\\n    /// @notice Constructor for RootOracle contract\\n    /// @param _factory RootGaugeFactory contract address\\n    /// @param _ve VotingEscrow contract address\\n    /// @param _callProxy CallProxy contract address. This should be set to AnyCallTranslator.\\n    constructor(\\n        address _factory,\\n        address _ve,\\n        address _callProxy\\n    ) {\\n        FACTORY = _factory;\\n        VE = _ve;\\n\\n        callProxy = _callProxy;\\n        emit UpdateCallProxy(address(0), _callProxy);\\n\\n        owner = msg.sender;\\n        emit TransferOwnership(address(0), msg.sender);\\n    }\\n\\n    /// @notice Push the veSDL data of the caller to the child chain\\n    /// @dev This will be reverted if caller doesn't have any veSDL balance\\n    /// @param _chainId Chain ID of the child chain to push the data\\n    function push(uint256 _chainId) external {\\n        address user = msg.sender;\\n        require(\\n            Factory(FACTORY).get_bridger(_chainId) != address(0),\\n            \\\"Bridger not found\\\"\\n        );\\n\\n        require(IERC20(VE).balanceOf(user) != 0, \\\"No ve balance\\\");\\n        Point memory userPoint = votingEscrow(VE).user_point_history(\\n            user,\\n            votingEscrow(VE).user_point_epoch(user)\\n        );\\n        Point memory globalPoint = votingEscrow(VE).point_history(\\n            votingEscrow(VE).epoch()\\n        );\\n        ICallProxy(callProxy).anyCall(\\n            address(this),\\n            abi.encodeWithSelector(\\n                bytes4(\\n                    keccak256(\\n                        \\\"receive((int128,int128,uint256),(int128,int128,uint256),address)\\\"\\n                    )\\n                ),\\n                userPoint,\\n                globalPoint,\\n                user\\n            ),\\n            address(0),\\n            _chainId,\\n            0\\n        );\\n    }\\n\\n    /// @notice Push the veSDL data of an account to the child chain\\n    /// @dev This will be reverted if user doesn't have any veSDL balance\\n    /// @param _chainId Chain ID of the child chain to push the data\\n    /// @param _user Address of the account to push the data for\\n    function push(uint256 _chainId, address _user) external {\\n        require(\\n            Factory(FACTORY).get_bridger(_chainId) != address(0),\\n            \\\"Bridger not found\\\"\\n        );\\n        require(IERC20(VE).balanceOf(_user) != 0, \\\"No ve balance\\\");\\n        Point memory userPoint = votingEscrow(VE).user_point_history(\\n            _user,\\n            votingEscrow(VE).user_point_epoch(_user)\\n        );\\n        Point memory globalPoint = votingEscrow(VE).point_history(\\n            votingEscrow(VE).epoch()\\n        );\\n        ICallProxy(callProxy).anyCall(\\n            address(this),\\n            abi.encodeWithSelector(\\n                bytes4(\\n                    keccak256(\\n                        \\\"receive((int128,int128,uint256),(int128,int128,uint256),address)\\\"\\n                    )\\n                ),\\n                userPoint,\\n                globalPoint,\\n                _user\\n            ),\\n            address(0),\\n            _chainId,\\n            0\\n        );\\n    }\\n\\n    /// @notice Set the call proxy address\\n    /// @dev This can only be called by the owner of the contract\\n    /// @param _newCallProxy Address of the new call proxy\\n    function setCallProxy(address _newCallProxy) external {\\n        require(msg.sender == owner, \\\"not owner\\\");\\n        emit UpdateCallProxy(callProxy, _newCallProxy);\\n        callProxy = _newCallProxy;\\n    }\\n\\n    /// @notice Commit to transfer of the ownership of the contract\\n    /// @dev This can only be called by the owner of the contract\\n    /// @param _futureOwner Address of the new owner\\n    function commitTransferOwnership(address _futureOwner) external {\\n        require(msg.sender == owner);\\n        futureOwner = _futureOwner;\\n    }\\n\\n    /// @notice Accept the ownership of the contract\\n    /// @dev This can only be called by the future owner of the contract\\n    function acceptTransferOwnership() external {\\n        require(msg.sender == futureOwner);\\n        emit TransferOwnership(owner, msg.sender);\\n        owner = msg.sender;\\n    }\\n}\\n\",\"keccak256\":\"0xe0be84a9e3183570849187a0e23434af919c88f6e1787c62119f73c9c1cf79cb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b50604051610ef0380380610ef083398101604081905261002f91610107565b6001600160a01b0383811660805282811660a052600080546001600160a01b03191691831691821781556040805191825260208201929092527fe385116766307e81d4427b03f1ac50c300b2f6a5df7b3c67eeb7eaaab12f0805910160405180910390a1600180546001600160a01b03191633908117909155604080516000815260208101929092527f5c486528ec3e3f0ea91181cff8116f02bfa350e03b8b6f12e00765adbb5af85c910160405180910390a150505061014a565b80516001600160a01b038116811461010257600080fd5b919050565b60008060006060848603121561011c57600080fd5b610125846100eb565b9250610133602085016100eb565b9150610141604085016100eb565b90509250925092565b60805160a051610d57610199600039600081816101bb0152818161052a01528181610646015281816107550152610791015260008181610126015281816103fc01526109f00152610d576000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c8063959ac48411610076578063c80fbe4e1161005b578063c80fbe4e146101a3578063c863657d146101b6578063e1cebf0b146101dd57600080fd5b8063959ac48414610170578063b9e9d1aa1461018357600080fd5b80632dd31000116100a75780632dd31000146101215780637b371107146101485780638da5cb5b1461015057600080fd5b80632b0d0a8b146100c35780632da688ac146100d8575b600080fd5b6100d66100d1366004610aaf565b6101f0565b005b6000546100f89073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6100f87f000000000000000000000000000000000000000000000000000000000000000081565b6100d6610311565b6001546100f89073ffffffffffffffffffffffffffffffffffffffff1681565b6100d661017e366004610ad3565b6103b3565b6002546100f89073ffffffffffffffffffffffffffffffffffffffff1681565b6100d66101b1366004610aec565b6109a9565b6100f87f000000000000000000000000000000000000000000000000000000000000000081565b6100d66101eb366004610aaf565b610a1f565b60015473ffffffffffffffffffffffffffffffffffffffff163314610276576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f6e6f74206f776e6572000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6000546040805173ffffffffffffffffffffffffffffffffffffffff928316815291831660208301527fe385116766307e81d4427b03f1ac50c300b2f6a5df7b3c67eeb7eaaab12f0805910160405180910390a1600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60025473ffffffffffffffffffffffffffffffffffffffff16331461033557600080fd5b6001546040805173ffffffffffffffffffffffffffffffffffffffff90921682523360208301527f5c486528ec3e3f0ea91181cff8116f02bfa350e03b8b6f12e00765adbb5af85c910160405180910390a1600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001633179055565b6040517f087ca57f00000000000000000000000000000000000000000000000000000000815260048101829052339060009073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063087ca57f906024015b602060405180830381865afa158015610444573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104689190610b1c565b73ffffffffffffffffffffffffffffffffffffffff16036104e5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f42726964676572206e6f7420666f756e64000000000000000000000000000000604482015260640161026d565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301527f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015610571573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105959190610b39565b6000036105fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f2076652062616c616e636500000000000000000000000000000000000000604482015260640161026d565b6040517f010ae75700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906328d09d47908490839063010ae75790602401602060405180830381865afa158015610699573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bd9190610b39565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401606060405180830381865afa15801561072b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074f9190610b69565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d1febfb97f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663900cf0cf6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081e9190610b39565b6040518263ffffffff1660e01b815260040161083c91815260200190565b606060405180830381865afa158015610859573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087d9190610b69565b60005460405191925073ffffffffffffffffffffffffffffffffffffffff169063bd45c4e79030907fab9923f39ee0038d64d2f003c5a186b3d0484765579dd8028fa16db2c4616943906108d990879087908a90602401610bf8565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009485161790525160e085901b909216825261097192916000908a908290600401610c69565b600060405180830381600087803b15801561098b57600080fd5b505af115801561099f573d6000803e3d6000fd5b5050505050505050565b6040517f087ca57f0000000000000000000000000000000000000000000000000000000081526004810183905260009073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063087ca57f90602401610427565b60015473ffffffffffffffffffffffffffffffffffffffff163314610a4357600080fd5b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b73ffffffffffffffffffffffffffffffffffffffff81168114610aac57600080fd5b50565b600060208284031215610ac157600080fd5b8135610acc81610a8a565b9392505050565b600060208284031215610ae557600080fd5b5035919050565b60008060408385031215610aff57600080fd5b823591506020830135610b1181610a8a565b809150509250929050565b600060208284031215610b2e57600080fd5b8151610acc81610a8a565b600060208284031215610b4b57600080fd5b5051919050565b8051600f81900b8114610b6457600080fd5b919050565b600060608284031215610b7b57600080fd5b6040516060810181811067ffffffffffffffff82111715610bc5577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604052610bd183610b52565b8152610bdf60208401610b52565b6020820152604083015160408201528091505092915050565b60e08101610c2382868051600f0b82526020810151600f0b6020830152604081015160408301525050565b8351600f90810b60608401526020850151900b6080830152604084015160a083015273ffffffffffffffffffffffffffffffffffffffff831660c0830152949350505050565b73ffffffffffffffffffffffffffffffffffffffff861681526000602060a08184015286518060a085015260005b81811015610cb35788810183015185820160c001528201610c97565b50600060c0828601015260c07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010192505050610d0e604083018673ffffffffffffffffffffffffffffffffffffffff169052565b606082019390935260800152939250505056fea2646970667358221220aab146b9138856e9d6a7ab23909437b9243016c2f53cff8de6d4aee608e7784d64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100be5760003560e01c8063959ac48411610076578063c80fbe4e1161005b578063c80fbe4e146101a3578063c863657d146101b6578063e1cebf0b146101dd57600080fd5b8063959ac48414610170578063b9e9d1aa1461018357600080fd5b80632dd31000116100a75780632dd31000146101215780637b371107146101485780638da5cb5b1461015057600080fd5b80632b0d0a8b146100c35780632da688ac146100d8575b600080fd5b6100d66100d1366004610aaf565b6101f0565b005b6000546100f89073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6100f87f000000000000000000000000000000000000000000000000000000000000000081565b6100d6610311565b6001546100f89073ffffffffffffffffffffffffffffffffffffffff1681565b6100d661017e366004610ad3565b6103b3565b6002546100f89073ffffffffffffffffffffffffffffffffffffffff1681565b6100d66101b1366004610aec565b6109a9565b6100f87f000000000000000000000000000000000000000000000000000000000000000081565b6100d66101eb366004610aaf565b610a1f565b60015473ffffffffffffffffffffffffffffffffffffffff163314610276576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f6e6f74206f776e6572000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6000546040805173ffffffffffffffffffffffffffffffffffffffff928316815291831660208301527fe385116766307e81d4427b03f1ac50c300b2f6a5df7b3c67eeb7eaaab12f0805910160405180910390a1600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60025473ffffffffffffffffffffffffffffffffffffffff16331461033557600080fd5b6001546040805173ffffffffffffffffffffffffffffffffffffffff90921682523360208301527f5c486528ec3e3f0ea91181cff8116f02bfa350e03b8b6f12e00765adbb5af85c910160405180910390a1600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001633179055565b6040517f087ca57f00000000000000000000000000000000000000000000000000000000815260048101829052339060009073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063087ca57f906024015b602060405180830381865afa158015610444573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104689190610b1c565b73ffffffffffffffffffffffffffffffffffffffff16036104e5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f42726964676572206e6f7420666f756e64000000000000000000000000000000604482015260640161026d565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301527f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015610571573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105959190610b39565b6000036105fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f2076652062616c616e636500000000000000000000000000000000000000604482015260640161026d565b6040517f010ae75700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906328d09d47908490839063010ae75790602401602060405180830381865afa158015610699573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bd9190610b39565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401606060405180830381865afa15801561072b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074f9190610b69565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d1febfb97f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663900cf0cf6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081e9190610b39565b6040518263ffffffff1660e01b815260040161083c91815260200190565b606060405180830381865afa158015610859573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087d9190610b69565b60005460405191925073ffffffffffffffffffffffffffffffffffffffff169063bd45c4e79030907fab9923f39ee0038d64d2f003c5a186b3d0484765579dd8028fa16db2c4616943906108d990879087908a90602401610bf8565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009485161790525160e085901b909216825261097192916000908a908290600401610c69565b600060405180830381600087803b15801561098b57600080fd5b505af115801561099f573d6000803e3d6000fd5b5050505050505050565b6040517f087ca57f0000000000000000000000000000000000000000000000000000000081526004810183905260009073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063087ca57f90602401610427565b60015473ffffffffffffffffffffffffffffffffffffffff163314610a4357600080fd5b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b73ffffffffffffffffffffffffffffffffffffffff81168114610aac57600080fd5b50565b600060208284031215610ac157600080fd5b8135610acc81610a8a565b9392505050565b600060208284031215610ae557600080fd5b5035919050565b60008060408385031215610aff57600080fd5b823591506020830135610b1181610a8a565b809150509250929050565b600060208284031215610b2e57600080fd5b8151610acc81610a8a565b600060208284031215610b4b57600080fd5b5051919050565b8051600f81900b8114610b6457600080fd5b919050565b600060608284031215610b7b57600080fd5b6040516060810181811067ffffffffffffffff82111715610bc5577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604052610bd183610b52565b8152610bdf60208401610b52565b6020820152604083015160408201528091505092915050565b60e08101610c2382868051600f0b82526020810151600f0b6020830152604081015160408301525050565b8351600f90810b60608401526020850151900b6080830152604084015160a083015273ffffffffffffffffffffffffffffffffffffffff831660c0830152949350505050565b73ffffffffffffffffffffffffffffffffffffffff861681526000602060a08184015286518060a085015260005b81811015610cb35788810183015185820160c001528201610c97565b50600060c0828601015260c07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010192505050610d0e604083018673ffffffffffffffffffffffffffffffffffffffff169052565b606082019390935260800152939250505056fea2646970667358221220aab146b9138856e9d6a7ab23909437b9243016c2f53cff8de6d4aee608e7784d64736f6c63430008110033",
  "devdoc": {
    "events": {
      "TransferOwnership(address,address)": {
        "params": {
          "newOwner": "New owner of the contract",
          "oldOwner": "Previous owner of the contract"
        }
      },
      "UpdateCallProxy(address,address)": {
        "params": {
          "newCallProxy": "New call proxy address",
          "oldCallProxy": "Previous call proxy address"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "acceptTransferOwnership()": {
        "details": "This can only be called by the future owner of the contract"
      },
      "commitTransferOwnership(address)": {
        "details": "This can only be called by the owner of the contract",
        "params": {
          "_futureOwner": "Address of the new owner"
        }
      },
      "constructor": {
        "params": {
          "_callProxy": "CallProxy contract address. This should be set to AnyCallTranslator.",
          "_factory": "RootGaugeFactory contract address",
          "_ve": "VotingEscrow contract address"
        }
      },
      "push(uint256)": {
        "details": "This will be reverted if caller doesn't have any veSDL balance",
        "params": {
          "_chainId": "Chain ID of the child chain to push the data"
        }
      },
      "push(uint256,address)": {
        "details": "This will be reverted if user doesn't have any veSDL balance",
        "params": {
          "_chainId": "Chain ID of the child chain to push the data",
          "_user": "Address of the account to push the data for"
        }
      },
      "setCallProxy(address)": {
        "details": "This can only be called by the owner of the contract",
        "params": {
          "_newCallProxy": "Address of the new call proxy"
        }
      }
    },
    "title": "Root Oracle contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "TransferOwnership(address,address)": {
        "notice": "Emitted when ownership is transferred"
      },
      "UpdateCallProxy(address,address)": {
        "notice": "Emitted when call proxy address is updated"
      }
    },
    "kind": "user",
    "methods": {
      "acceptTransferOwnership()": {
        "notice": "Accept the ownership of the contract"
      },
      "commitTransferOwnership(address)": {
        "notice": "Commit to transfer of the ownership of the contract"
      },
      "constructor": {
        "notice": "Constructor for RootOracle contract"
      },
      "push(uint256)": {
        "notice": "Push the veSDL data of the caller to the child chain"
      },
      "push(uint256,address)": {
        "notice": "Push the veSDL data of an account to the child chain"
      },
      "setCallProxy(address)": {
        "notice": "Set the call proxy address"
      }
    },
    "notice": "RootOracle contract is responsible for reading veSDL data from this chain and sending it to the child chains",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10280,
        "contract": "contracts/xchainGauges/oracles/RootOracle.sol:RootOracle",
        "label": "callProxy",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 10282,
        "contract": "contracts/xchainGauges/oracles/RootOracle.sol:RootOracle",
        "label": "owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 10284,
        "contract": "contracts/xchainGauges/oracles/RootOracle.sol:RootOracle",
        "label": "futureOwner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}
