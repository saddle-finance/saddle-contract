{
  "address": "0xeF8Af8b67A58FE795304bE8593c44Ac0D3A59033",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "addPool",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "calls",
          "type": "bytes[]"
        },
        {
          "internalType": "bool",
          "name": "revertOnFail",
          "type": "bool"
        }
      ],
      "name": "batch",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inputIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "outputIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "outputAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateSwapInput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "a",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "swapFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inputIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "outputIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "outputAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateSwapInputCustom",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inputIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "outputIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateSwapOutput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "outputAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "a",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "swapFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inputIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "outputIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateSwapOutputCustom",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "outputAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inputIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "outputIndex",
          "type": "uint256"
        }
      ],
      "name": "relativePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "a",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inputIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "outputIndex",
          "type": "uint256"
        }
      ],
      "name": "relativePriceCustom",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "storedDecimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf0ea7f6e6da63f7eca34d5a3d106a1fa39901de9947ea52d384529026849384d",
  "receipt": {
    "to": null,
    "from": "0x5BDb37d0Ddea3A90F233c7B7F6b9394B6b2eef34",
    "contractAddress": "0xeF8Af8b67A58FE795304bE8593c44Ac0D3A59033",
    "transactionIndex": 171,
    "gasUsed": "1422654",
    "logsBloom": "0x
    "blockHash": "0x44958f9550506fb8f4dcdd6e98cfb54c1e6eb233dd82db907c84de3f85d8ea0f",
    "transactionHash": "0xf0ea7f6e6da63f7eca34d5a3d106a1fa39901de9947ea52d384529026849384d",
    "logs": [],
    "blockNumber": 14397728,
    "cumulativeGasUsed": "10839184",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9a36cc074d200a682e05724b0acb284a",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"calls\",\"type\":\"bytes[]\"},{\"internalType\":\"bool\",\"name\":\"revertOnFail\",\"type\":\"bool\"}],\"name\":\"batch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"}],\"name\":\"calculateSwapInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inputIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"}],\"name\":\"calculateSwapInputCustom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"}],\"name\":\"calculateSwapOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inputIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"}],\"name\":\"calculateSwapOutputCustom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputIndex\",\"type\":\"uint256\"}],\"name\":\"relativePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inputIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputIndex\",\"type\":\"uint256\"}],\"name\":\"relativePriceCustom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"storedDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addPool(address)\":{\"params\":{\"pool\":\"address of a pool contract that implements ISwap\"}},\"batch(bytes[],bool)\":{\"params\":{\"calls\":\"An array of inputs for each call.\",\"revertOnFail\":\"If True then reverts after a failed call and stops doing further calls.\"}},\"calculateSwapInput(address,uint256,uint256,uint256)\":{\"params\":{\"inputIndex\":\"index of the input token in the pool\",\"outputAmount\":\"desired amount of output token to receive on swap\",\"outputIndex\":\"index of the output token in the pool\",\"pool\":\"address of a pool contract that implements ISwap\"},\"returns\":{\"inputAmount\":\"expected input amount\"}},\"calculateSwapInputCustom(uint256[],uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"Uses 1e18 precision for balances, 1e2 for A, and 1e10 for swap fee\",\"params\":{\"a\":\"A parameter to be used in the calculation\",\"balances\":\"array of balances\",\"inputIndex\":\"index of the input token in the pool\",\"outputAmount\":\"desired amount of output token to receive on swap\",\"outputIndex\":\"index of the output token in the pool\",\"swapFee\":\"fee to be charged per swap\"},\"returns\":{\"inputAmount\":\"expected input amount\"}},\"calculateSwapOutput(address,uint256,uint256,uint256)\":{\"params\":{\"inputAmount\":\"amount of input token to swap\",\"inputIndex\":\"index of the input token in the pool\",\"outputIndex\":\"index of the output token in the pool\",\"pool\":\"address of a pool contract that implements ISwap\"},\"returns\":{\"outputAmount\":\"expected output amount\"}},\"calculateSwapOutputCustom(uint256[],uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"Uses 1e18 precision for balances, 1e2 for A, and 1e10 for swap fee\",\"params\":{\"a\":\"A parameter to be used in the calculation\",\"balances\":\"array of balances\",\"inputAmount\":\"amount of input token to swap\",\"inputIndex\":\"index of the input token in the pool\",\"outputIndex\":\"index of the output token in the pool\",\"swapFee\":\"fee to be charged per swap\"},\"returns\":{\"outputAmount\":\"expected output amount\"}},\"relativePrice(address,uint256,uint256)\":{\"params\":{\"inputIndex\":\"index of the input token in the pool\",\"outputIndex\":\"index of the output token in the pool\",\"pool\":\"address of a pool contract that implements ISwap\"},\"returns\":{\"price\":\"relative price of output tokens per one input token\"}},\"relativePriceCustom(uint256[],uint256,uint256,uint256)\":{\"details\":\"Uses 1e18 precision for balances, 1e2 for A\",\"params\":{\"a\":\"A parameter to be used in the calculation\",\"balances\":\"array of balances\",\"inputIndex\":\"index of the input token in the pool\",\"outputIndex\":\"index of the output token in the pool\"},\"returns\":{\"price\":\"relative price of output tokens per one input token\"}}},\"title\":\"SwapCalculator\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addPool(address)\":{\"notice\":\"Add and registers a new pool. This function exist to cache decimal information.\"},\"batch(bytes[],bool)\":{\"notice\":\"Allows batched call to self (this contract).\"},\"calculateSwapInput(address,uint256,uint256,uint256)\":{\"notice\":\"Calculate the expected input amount for given pool, indexes, and out amount\"},\"calculateSwapInputCustom(uint256[],uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Calculate the expected input amount for given balances, A, swap fee, indexes, and out amount\"},\"calculateSwapOutput(address,uint256,uint256,uint256)\":{\"notice\":\"Calculate the expected output amount for given pool, indexes, and input amount\"},\"calculateSwapOutputCustom(uint256[],uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Calculate the expected input amount for given balances, A, swap fee, indexes, and out amount\"},\"relativePrice(address,uint256,uint256)\":{\"notice\":\"Calculates the relative price between two assets in a pool\"},\"relativePriceCustom(uint256[],uint256,uint256,uint256)\":{\"notice\":\"Calculate the relative price between two assets in given setup of balances and A\"}},\"notice\":\"A contract to help calculate exact input and output amounts for a swap. Supports pools with ISwap interfaces. Additionally includes functions to calculate with arbitrary balances, A parameter, and swap fee.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/SwapCalculator.sol\":\"SwapCalculator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/MathUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n/**\\n * @title MathUtils library\\n * @notice A library to be used in conjunction with SafeMath. Contains functions for calculating\\n * differences between two uint256.\\n */\\nlibrary MathUtils {\\n    /**\\n     * @notice Compares a and b and returns true if the difference between a and b\\n     *         is less than 1 or equal to each other.\\n     * @param a uint256 to compare with\\n     * @param b uint256 to compare with\\n     * @return True if the difference between a and b is less than 1 or equal,\\n     *         otherwise return false\\n     */\\n    function within1(uint256 a, uint256 b) internal pure returns (bool) {\\n        return (difference(a, b) <= 1);\\n    }\\n\\n    /**\\n     * @notice Calculates absolute difference between a and b\\n     * @param a uint256 to compare with\\n     * @param b uint256 to compare with\\n     * @return Difference between a and b\\n     */\\n    function difference(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a > b) {\\n            return a - b;\\n        }\\n        return b - a;\\n    }\\n}\\n\",\"keccak256\":\"0x455c798b26b679dff11a4ad5d52f7fef85c42d403bd430da443948f65cf000a0\",\"license\":\"MIT\"},\"contracts/helper/BaseBoringBatchable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n// solhint-disable avoid-low-level-calls\\n// solhint-disable no-inline-assembly\\n\\n// Audit on 5-Jan-2021 by Keno and BoringCrypto\\n// WARNING!!!\\n// Combining BoringBatchable with msg.value can cause double spending issues\\n// https://www.paradigm.xyz/2021/08/two-rights-might-make-a-wrong/\\n\\ncontract BaseBoringBatchable {\\n    /// @dev Helper function to extract a useful revert message from a failed call.\\n    /// If the returned data is malformed or not correctly abi encoded then this call can fail itself.\\n    function _getRevertMsg(bytes memory _returnData)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\n\\n        assembly {\\n            // Slice the sighash.\\n            _returnData := add(_returnData, 0x04)\\n        }\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\n    }\\n\\n    /// @notice Allows batched call to self (this contract).\\n    /// @param calls An array of inputs for each call.\\n    /// @param revertOnFail If True then reverts after a failed call and stops doing further calls.\\n    // F1: External is ok here because this is the batch function, adding it to a batch makes no sense\\n    // F2: Calls in the batch may be payable, delegatecall operates in the same context, so each call in the batch has access to msg.value\\n    // C3: The length of the loop is fully under user control, so can't be exploited\\n    // C7: Delegatecall is only used on the same contract, so it's safe\\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable {\\n        for (uint256 i = 0; i < calls.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(\\n                calls[i]\\n            );\\n            if (!success && revertOnFail) {\\n                revert(_getRevertMsg(result));\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x95f34c0ce5cd71071698709dd23eea9b6031fe973be9d6f53f9f08452a444d66\",\"license\":\"MIT\"},\"contracts/interfaces/IAllowlist.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IAllowlist {\\n    function getPoolAccountLimit(address poolAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getPoolCap(address poolAddress) external view returns (uint256);\\n\\n    function verifyAddress(address account, bytes32[] calldata merkleProof)\\n        external\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0xf55e4d678d05bc5d0e24ec5f24504d7437b885e19579f9d29152748c3c1c732e\",\"license\":\"MIT\"},\"contracts/interfaces/ISwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./IAllowlist.sol\\\";\\n\\ninterface ISwap {\\n    // pool data view functions\\n    function getA() external view returns (uint256);\\n\\n    function getAPrecise() external view returns (uint256);\\n\\n    function getAllowlist() external view returns (IAllowlist);\\n\\n    function getToken(uint8 index) external view returns (IERC20);\\n\\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\\n\\n    function getTokenBalance(uint8 index) external view returns (uint256);\\n\\n    function getVirtualPrice() external view returns (uint256);\\n\\n    function isGuarded() external view returns (bool);\\n\\n    function swapStorage()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            address\\n        );\\n\\n    // min return calculation functions\\n    function calculateSwap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calculateRemoveLiquidity(uint256 amount)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function calculateRemoveLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex\\n    ) external view returns (uint256 availableTokenAmount);\\n\\n    // state modifying functions\\n    function initialize(\\n        IERC20[] memory pooledTokens,\\n        uint8[] memory decimals,\\n        string memory lpTokenName,\\n        string memory lpTokenSymbol,\\n        uint256 a,\\n        uint256 fee,\\n        uint256 adminFee,\\n        address lpTokenTargetAddress\\n    ) external;\\n\\n    function swap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function addLiquidity(\\n        uint256[] calldata amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256[] calldata minAmounts,\\n        uint256 deadline\\n    ) external returns (uint256[] memory);\\n\\n    function removeLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidityImbalance(\\n        uint256[] calldata amounts,\\n        uint256 maxBurnAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x08a0e665c26be7a1a97327528cbdc2b1e3571ee9ed8d37def58600e70b2ae8df\",\"license\":\"MIT\"},\"contracts/libraries/SwapCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../MathUtils.sol\\\";\\nimport \\\"../interfaces/ISwap.sol\\\";\\nimport \\\"../helper/BaseBoringBatchable.sol\\\";\\n\\ninterface IERC20Decimals {\\n    function decimals() external returns (uint8);\\n}\\n\\n/**\\n * @title SwapCalculator\\n * @notice A contract to help calculate exact input and output amounts for a swap. Supports pools with ISwap interfaces.\\n * Additionally includes functions to calculate with arbitrary balances, A parameter, and swap fee.\\n */\\ncontract SwapCalculator is BaseBoringBatchable {\\n    using SafeMath for uint256;\\n    using MathUtils for uint256;\\n\\n    // Constant values\\n    uint256 private constant BALANCE_PRECISION = 1e18;\\n    uint256 private constant BALANCE_DECIMALS = 18;\\n    uint256 private constant A_PRECISION = 100;\\n    uint256 private constant MAX_LOOP_LIMIT = 256;\\n    uint256 private constant MAX_TOKENS_LENGTH = 8;\\n    uint256 private constant FEE_DENOMINATOR = 10**10;\\n\\n    mapping(address => uint256[]) public storedDecimals;\\n\\n    /**\\n     * @notice Calculate the expected output amount for given pool, indexes, and input amount\\n     * @param pool address of a pool contract that implements ISwap\\n     * @param inputIndex index of the input token in the pool\\n     * @param outputIndex index of the output token in the pool\\n     * @param inputAmount amount of input token to swap\\n     * @return outputAmount expected output amount\\n     */\\n    function calculateSwapOutput(\\n        address pool,\\n        uint256 inputIndex,\\n        uint256 outputIndex,\\n        uint256 inputAmount\\n    ) external view returns (uint256 outputAmount) {\\n        outputAmount = ISwap(pool).calculateSwap(\\n            uint8(inputIndex),\\n            uint8(outputIndex),\\n            inputAmount\\n        );\\n    }\\n\\n    /**\\n     * @notice Calculate the expected input amount for given pool, indexes, and out amount\\n     * @param pool address of a pool contract that implements ISwap\\n     * @param inputIndex index of the input token in the pool\\n     * @param outputIndex index of the output token in the pool\\n     * @param outputAmount desired amount of output token to receive on swap\\n     * @return inputAmount expected input amount\\n     */\\n    function calculateSwapInput(\\n        address pool,\\n        uint256 inputIndex,\\n        uint256 outputIndex,\\n        uint256 outputAmount\\n    ) external view returns (uint256 inputAmount) {\\n        uint256[] memory decimalsArr = storedDecimals[pool];\\n        require(decimalsArr.length > 0, \\\"Must call addPool() first\\\");\\n\\n        uint256[] memory balances = new uint256[](decimalsArr.length);\\n        for (uint256 i = 0; i < decimalsArr.length; i++) {\\n            uint256 multiplier = 10**BALANCE_DECIMALS.sub(decimalsArr[i]);\\n            balances[i] = ISwap(pool).getTokenBalance(uint8(i)).mul(multiplier);\\n        }\\n        outputAmount = outputAmount.mul(\\n            10**BALANCE_DECIMALS.sub(decimalsArr[outputIndex])\\n        );\\n\\n        (, , , , uint256 swapFee, , ) = ISwap(pool).swapStorage();\\n\\n        inputAmount = calculateSwapInputCustom(\\n            balances,\\n            ISwap(pool).getAPrecise(),\\n            swapFee,\\n            inputIndex,\\n            outputIndex,\\n            outputAmount\\n        ).div(10**BALANCE_DECIMALS.sub(decimalsArr[inputIndex]));\\n    }\\n\\n    /**\\n     * @notice Calculates the relative price between two assets in a pool\\n     * @param pool address of a pool contract that implements ISwap\\n     * @param inputIndex index of the input token in the pool\\n     * @param outputIndex index of the output token in the pool\\n     * @return price relative price of output tokens per one input token\\n     */\\n    function relativePrice(\\n        address pool,\\n        uint256 inputIndex,\\n        uint256 outputIndex\\n    ) external view returns (uint256 price) {\\n        uint256[] memory decimalsArr = storedDecimals[pool];\\n        require(decimalsArr.length > 0, \\\"Must call addPool() first\\\");\\n\\n        uint256[] memory balances = new uint256[](decimalsArr.length);\\n        for (uint256 i = 0; i < decimalsArr.length; i++) {\\n            uint256 multiplier = 10**BALANCE_DECIMALS.sub(decimalsArr[i]);\\n            balances[i] = ISwap(pool).getTokenBalance(uint8(i)).mul(multiplier);\\n        }\\n\\n        price = relativePriceCustom(\\n            balances,\\n            ISwap(pool).getAPrecise(),\\n            inputIndex,\\n            outputIndex\\n        );\\n    }\\n\\n    /**\\n     * @notice Calculate the expected input amount for given balances, A, swap fee, indexes, and out amount\\n     * @dev Uses 1e18 precision for balances, 1e2 for A, and 1e10 for swap fee\\n     * @param balances array of balances\\n     * @param a A parameter to be used in the calculation\\n     * @param swapFee fee to be charged per swap\\n     * @param inputIndex index of the input token in the pool\\n     * @param outputIndex index of the output token in the pool\\n     * @param inputAmount amount of input token to swap\\n     * @return outputAmount expected output amount\\n     */\\n    function calculateSwapOutputCustom(\\n        uint256[] memory balances,\\n        uint256 a,\\n        uint256 swapFee,\\n        uint256 inputIndex,\\n        uint256 outputIndex,\\n        uint256 inputAmount\\n    ) public pure returns (uint256 outputAmount) {\\n        require(\\n            inputIndex < balances.length && outputIndex < balances.length,\\n            \\\"Invalid token index\\\"\\n        );\\n        // Calculate the swap\\n        uint256 x = inputAmount.add(balances[inputIndex]);\\n        uint256 y = getY(a, inputIndex, outputIndex, x, balances);\\n        outputAmount = balances[outputIndex].sub(y).sub(1);\\n\\n        // Simulate the swap fee\\n        uint256 fee = outputAmount.mul(swapFee).div(FEE_DENOMINATOR);\\n        outputAmount = outputAmount.sub(fee);\\n    }\\n\\n    /**\\n     * @notice Calculate the expected input amount for given balances, A, swap fee, indexes, and out amount\\n     * @dev Uses 1e18 precision for balances, 1e2 for A, and 1e10 for swap fee\\n     * @param balances array of balances\\n     * @param a A parameter to be used in the calculation\\n     * @param swapFee fee to be charged per swap\\n     * @param inputIndex index of the input token in the pool\\n     * @param outputIndex index of the output token in the pool\\n     * @param outputAmount desired amount of output token to receive on swap\\n     * @return inputAmount expected input amount\\n     */\\n    function calculateSwapInputCustom(\\n        uint256[] memory balances,\\n        uint256 a,\\n        uint256 swapFee,\\n        uint256 inputIndex,\\n        uint256 outputIndex,\\n        uint256 outputAmount\\n    ) public pure returns (uint256 inputAmount) {\\n        require(\\n            inputIndex < balances.length && outputIndex < balances.length,\\n            \\\"Invalid token index\\\"\\n        );\\n\\n        // Simulate the swap fee\\n        uint256 fee = outputAmount.mul(swapFee).div(\\n            FEE_DENOMINATOR.sub(swapFee)\\n        );\\n        outputAmount = outputAmount.add(fee);\\n\\n        // Calculate the swap\\n        uint256 y = balances[outputIndex].sub(outputAmount);\\n        uint256 x = getX(a, inputIndex, outputIndex, y, balances);\\n        inputAmount = x.sub(balances[inputIndex]).add(1);\\n    }\\n\\n    /**\\n     * @notice Calculate the relative price between two assets in given setup of balances and A\\n     * @dev Uses 1e18 precision for balances, 1e2 for A\\n     * @param balances array of balances\\n     * @param a A parameter to be used in the calculation\\n     * @param inputIndex index of the input token in the pool\\n     * @param outputIndex index of the output token in the pool\\n     * @return price relative price of output tokens per one input token\\n     */\\n    function relativePriceCustom(\\n        uint256[] memory balances,\\n        uint256 a,\\n        uint256 inputIndex,\\n        uint256 outputIndex\\n    ) public pure returns (uint256 price) {\\n        return\\n            calculateSwapOutputCustom(\\n                balances,\\n                a,\\n                0,\\n                inputIndex,\\n                outputIndex,\\n                BALANCE_PRECISION\\n            );\\n    }\\n\\n    /**\\n     * @notice Add and registers a new pool. This function exist to cache decimal information.\\n     * @param pool address of a pool contract that implements ISwap\\n     */\\n    function addPool(address pool) external payable {\\n        uint256[] memory decimalsArr = new uint256[](MAX_TOKENS_LENGTH);\\n\\n        for (uint256 i = 0; i < MAX_TOKENS_LENGTH; i++) {\\n            try ISwap(pool).getToken(uint8(i)) returns (IERC20 token) {\\n                require(address(token) != address(0), \\\"Token invalid\\\");\\n                decimalsArr[i] = IERC20Decimals(address(token)).decimals();\\n            } catch {\\n                assembly {\\n                    mstore(decimalsArr, sub(mload(decimalsArr), sub(8, i)))\\n                }\\n                break;\\n            }\\n        }\\n\\n        require(decimalsArr.length > 0, \\\"Must call addPool() first\\\");\\n        storedDecimals[pool] = decimalsArr;\\n    }\\n\\n    /**\\n     * @notice Get D, the StableSwap invariant, based on a set of balances and a particular A.\\n     * @param xp a precision-adjusted set of pool balances. Array should be the same cardinality\\n     * as the pool.\\n     * @param a the amplification coefficient * n * (n - 1) in A_PRECISION.\\n     * See the StableSwap paper for details\\n     * @return the invariant, at the precision of the pool\\n     */\\n    function getD(uint256[] memory xp, uint256 a)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 numTokens = xp.length;\\n        uint256 s;\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            s = s.add(xp[i]);\\n        }\\n        if (s == 0) {\\n            return 0;\\n        }\\n\\n        uint256 prevD;\\n        uint256 d = s;\\n        uint256 nA = a.mul(numTokens);\\n\\n        for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {\\n            uint256 dP = d;\\n            for (uint256 j = 0; j < numTokens; j++) {\\n                dP = dP.mul(d).div(xp[j].mul(numTokens));\\n                // If we were to protect the division loss we would have to keep the denominator separate\\n                // and divide at the end. However this leads to overflow with large numTokens or/and D.\\n                // dP = dP * D * D * D * ... overflow!\\n            }\\n            prevD = d;\\n            d = nA.mul(s).div(A_PRECISION).add(dP.mul(numTokens)).mul(d).div(\\n                nA.sub(A_PRECISION).mul(d).div(A_PRECISION).add(\\n                    numTokens.add(1).mul(dP)\\n                )\\n            );\\n            if (d.within1(prevD)) {\\n                return d;\\n            }\\n        }\\n\\n        // Convergence should occur in 4 loops or less. If this is reached, there may be something wrong\\n        // with the pool. If this were to occur repeatedly, LPs should withdraw via `removeLiquidity()`\\n        // function which does not rely on D.\\n        revert(\\\"D does not converge\\\");\\n    }\\n\\n    /**\\n     * @notice Calculate the new balances of the tokens given the indexes of the token\\n     * that is swapped from (FROM) and the token that is swapped to (TO).\\n     * This function is used as a helper function to calculate how much TO token\\n     * the user should receive on swap.\\n     *\\n     * @param preciseA precise form of amplification coefficient\\n     * @param tokenIndexFrom index of FROM token\\n     * @param tokenIndexTo index of TO token\\n     * @param x the new total amount of FROM token\\n     * @param xp balances of the tokens in the pool\\n     * @return the amount of TO token that should remain in the pool\\n     */\\n    function getY(\\n        uint256 preciseA,\\n        uint256 tokenIndexFrom,\\n        uint256 tokenIndexTo,\\n        uint256 x,\\n        uint256[] memory xp\\n    ) internal pure returns (uint256) {\\n        uint256 numTokens = xp.length;\\n        require(\\n            tokenIndexFrom != tokenIndexTo,\\n            \\\"Can't compare token to itself\\\"\\n        );\\n        require(\\n            tokenIndexFrom < numTokens && tokenIndexTo < numTokens,\\n            \\\"Tokens must be in pool\\\"\\n        );\\n\\n        uint256 d = getD(xp, preciseA);\\n        uint256 c = d;\\n        uint256 s;\\n        uint256 nA = numTokens.mul(preciseA);\\n\\n        uint256 _x;\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            if (i == tokenIndexFrom) {\\n                _x = x;\\n            } else if (i != tokenIndexTo) {\\n                _x = xp[i];\\n            } else {\\n                continue;\\n            }\\n            s = s.add(_x);\\n            c = c.mul(d).div(_x.mul(numTokens));\\n            // If we were to protect the division loss we would have to keep the denominator separate\\n            // and divide at the end. However this leads to overflow with large numTokens or/and D.\\n            // c = c * D * D * D * ... overflow!\\n        }\\n        c = c.mul(d).mul(A_PRECISION).div(nA.mul(numTokens));\\n        uint256 b = s.add(d.mul(A_PRECISION).div(nA));\\n        uint256 yPrev;\\n        uint256 y = d;\\n\\n        // iterative approximation\\n        for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {\\n            yPrev = y;\\n            y = y.mul(y).add(c).div(y.mul(2).add(b).sub(d));\\n            if (y.within1(yPrev)) {\\n                return y;\\n            }\\n        }\\n        revert(\\\"Approximation did not converge\\\");\\n    }\\n\\n    /**\\n     * @notice Calculate the new balances of the tokens given the indexes of the token\\n     * that is swapped from (FROM) and the token that is swapped to (TO).\\n     * This function is used as a helper function to calculate how much FROM token\\n     * the user will be required to transfer on swap.\\n     *\\n     * @param preciseA precise form of amplification coefficient\\n     * @param tokenIndexFrom index of FROM token\\n     * @param tokenIndexTo index of TO token\\n     * @param y the new total amount of TO token\\n     * @param xp balances of the tokens in the pool\\n     * @return the amount of FROM token that will be required\\n     */\\n    function getX(\\n        uint256 preciseA,\\n        uint256 tokenIndexFrom,\\n        uint256 tokenIndexTo,\\n        uint256 y,\\n        uint256[] memory xp\\n    ) internal pure returns (uint256) {\\n        return getY(preciseA, tokenIndexTo, tokenIndexFrom, y, xp);\\n    }\\n}\\n\",\"keccak256\":\"0x1e974232b8a67dd6f31a5e16886b8cc9508a63f9bb0c5a90d81780cb68ebb90d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506118cf806100206000396000f3fe6080604052600436106100965760003560e01c8063a936d00311610069578063d2423b511161004e578063d2423b5114610171578063d914cd4b14610186578063db7ffdb21461019957610096565b8063a936d00314610131578063bcf0fcfa1461015157610096565b80632b4bee461461009b5780632b9edaa9146100d157806364965387146100f157806381a6938914610111575b600080fd5b3480156100a757600080fd5b506100bb6100b63660046112dd565b6101b9565b6040516100c89190611782565b60405180910390f35b3480156100dd57600080fd5b506100bb6100ec3660046111cd565b61029c565b3480156100fd57600080fd5b506100bb61010c36600461128b565b6105b4565b34801561011d57600080fd5b506100bb61012c36600461116e565b6105d6565b34801561013d57600080fd5b506100bb61014c366004611199565b610604565b34801561015d57600080fd5b506100bb61016c3660046112dd565b6107ef565b61018461017f366004611207565b610896565b005b610184610194366004611152565b610959565b3480156101a557600080fd5b506100bb6101b43660046111cd565b610b86565b60008651841080156101cb5750865183105b6101f05760405162461bcd60e51b81526004016101e790611612565b60405180910390fd5b60006102146102046402540be40088610c2f565b61020e8589610c5c565b90610c9d565b90506102208382610ccf565b9250600061024a848a878151811061023457fe5b6020026020010151610c2f90919063ffffffff16565b9050600061025b898888858e610cf4565b905061028e60016102888c8a8151811061027157fe5b602002602001015184610c2f90919063ffffffff16565b90610ccf565b9a9950505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260208181526040808320805482518185028101850190935280835260609383018282801561030557602002820191906000526020600020905b8154815260200190600101908083116102f1575b50505050509050600081511161032d5760405162461bcd60e51b81526004016101e7906114ff565b6060815167ffffffffffffffff8111801561034757600080fd5b50604051908082528060200260200182016040528015610371578160200160208202803683370190505b50905060005b82518110156104615760006103a984838151811061039157fe5b60200260200101516012610c2f90919063ffffffff16565b600a0a9050610441818a73ffffffffffffffffffffffffffffffffffffffff166391ceb3eb856040518263ffffffff1660e01b81526004016103eb919061178b565b60206040518083038186803b15801561040357600080fd5b505afa158015610417573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043b9190611406565b90610c5c565b83838151811061044d57fe5b602090810291909101015250600101610377565b5061047e61047483878151811061039157fe5b8590600a0a610c5c565b935060008773ffffffffffffffffffffffffffffffffffffffff16635fd65f0f6040518163ffffffff1660e01b815260040160e06040518083038186803b1580156104c857600080fd5b505afa1580156104dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610500919061141e565b50509450505050506105a861051a84898151811061039157fe5b600a0a61020e848b73ffffffffffffffffffffffffffffffffffffffff16630ba819596040518163ffffffff1660e01b815260040160206040518083038186803b15801561056757600080fd5b505afa15801561057b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059f9190611406565b858c8c8c6101b9565b98975050505050505050565b60006105cd858560008686670de0b6b3a76400006107ef565b95945050505050565b600060205281600052604060002081815481106105ef57fe5b90600052602060002001600091509150505481565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260208181526040808320805482518185028101850190935280835260609383018282801561066d57602002820191906000526020600020905b815481526020019060010190808311610659575b5050505050905060008151116106955760405162461bcd60e51b81526004016101e7906114ff565b6060815167ffffffffffffffff811180156106af57600080fd5b506040519080825280602002602001820160405280156106d9578160200160208202803683370190505b50905060005b825181101561075b5760006106f984838151811061039157fe5b600a0a905061073b818973ffffffffffffffffffffffffffffffffffffffff166391ceb3eb856040518263ffffffff1660e01b81526004016103eb919061178b565b83838151811061074757fe5b6020908102919091010152506001016106df565b506107e5818773ffffffffffffffffffffffffffffffffffffffff16630ba819596040518163ffffffff1660e01b815260040160206040518083038186803b1580156107a657600080fd5b505afa1580156107ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107de9190611406565b87876105b4565b9695505050505050565b60008651841080156108015750865183105b61081d5760405162461bcd60e51b81526004016101e790611612565b600061084588868151811061082e57fe5b602002602001015184610ccf90919063ffffffff16565b90506000610856888787858d610cff565b9050610873600161086d838c898151811061023457fe5b90610c2f565b9250600061088a6402540be40061020e868b610c5c565b905061028e8482610c2f565b60005b828110156109535760006060308686858181106108b257fe5b90506020028101906108c491906117b7565b6040516108d292919061149e565b600060405180830381855af49150503d806000811461090d576040519150601f19603f3d011682016040523d82523d6000602084013e610912565b606091505b5091509150811580156109225750835b156109495761093081610e94565b60405162461bcd60e51b81526004016101e791906114ae565b5050600101610899565b50505050565b6040805160088082526101208201909252606091602082016101008036833701905050905060005b6008811015610b2b576040517f82b8660000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416906382b86600906109dc90849060040161178b565b60206040518083038186803b1580156109f457600080fd5b505afa925050508015610a42575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252610a3f91810190611340565b60015b610a5457806008038251038252610b2b565b73ffffffffffffffffffffffffffffffffffffffff8116610a875760405162461bcd60e51b81526004016101e79061174b565b8073ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610acf57600080fd5b505af1158015610ae3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b07919061147d565b60ff16838381518110610b1657fe5b60200260200101818152505050600101610981565b506000815111610b4d5760405162461bcd60e51b81526004016101e7906114ff565b73ffffffffffffffffffffffffffffffffffffffff82166000908152602081815260409091208251610b8192840190611072565b505050565b6040517fa95b089f00000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff86169063a95b089f90610bdf90879087908790600401611799565b60206040518083038186803b158015610bf757600080fd5b505afa158015610c0b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105cd9190611406565b600082821115610c515760405162461bcd60e51b81526004016101e79061156d565b508082035b92915050565b600082610c6b57506000610c56565b82820282848281610c7857fe5b0414610c965760405162461bcd60e51b81526004016101e790611649565b9392505050565b6000808211610cbe5760405162461bcd60e51b81526004016101e7906115db565b818381610cc757fe5b049392505050565b600082820183811015610c965760405162461bcd60e51b81526004016101e790611536565b60006107e586858786865b805160009085851415610d245760405162461bcd60e51b81526004016101e7906116dd565b8086108015610d3257508085105b610d4e5760405162461bcd60e51b81526004016101e7906115a4565b6000610d5a8489610efc565b905080600080610d6a858c610c5c565b90506000805b86811015610ddd578b811415610d8857899150610daf565b8a8114610daa57888181518110610d9b57fe5b60200260200101519150610daf565b610dd5565b610db98483610ccf565b9350610dd2610dc88389610c5c565b61020e8789610c5c565b94505b600101610d70565b50610dfa610deb8388610c5c565b61020e606461043b888a610c5c565b93506000610e17610e108461020e896064610c5c565b8590610ccf565b9050600086815b610100811015610e7b579091508190610e51610e438a61086d87610288876002610c5c565b61020e8a6102888680610c5c565b9150610e5d8284611043565b15610e73575098506105cd975050505050505050565b600101610e1e565b5060405162461bcd60e51b81526004016101e7906116a6565b6060604482511015610eda575060408051808201909152601d81527f5472616e73616374696f6e2072657665727465642073696c656e746c790000006020820152610ef7565b60048201915081806020019051810190610ef4919061135c565b90505b919050565b815160009081805b82811015610f3c57610f32868281518110610f1b57fe5b602002602001015183610ccf90919063ffffffff16565b9150600101610f04565b5080610f4d57600092505050610c56565b60008181610f5b8786610c5c565b905060005b61010081101561102a578260005b87811015610fb357610fa9610f9f898d8481518110610f8957fe5b6020026020010151610c5c90919063ffffffff16565b61020e8488610c5c565b9150600101610f6e565b509293508392611001610fe1610fce8361043b8b6001610ccf565b610288606461020e8961043b8a84610c2f565b61020e8661043b610ff2868d610c5c565b610288606461020e8b8f610c5c565b935061100d8486611043565b156110215783975050505050505050610c56565b50600101610f60565b5060405162461bcd60e51b81526004016101e790611714565b60006001611051848461105a565b11159392505050565b60008183111561106d5750808203610c56565b500390565b8280548282559060005260206000209081019282156110ad579160200282015b828111156110ad578251825591602001919060010190611092565b506110b99291506110bd565b5090565b5b808211156110b957600081556001016110be565b600082601f8301126110e2578081fd5b813567ffffffffffffffff8111156110f8578182fd5b6020808202611108828201611821565b8381529350818401858301828701840188101561112457600080fd5b600092505b84831015611147578035825260019290920191908301908301611129565b505050505092915050565b600060208284031215611163578081fd5b8135610c9681611874565b60008060408385031215611180578081fd5b823561118b81611874565b946020939093013593505050565b6000806000606084860312156111ad578081fd5b83356111b881611874565b95602085013595506040909401359392505050565b600080600080608085870312156111e2578081fd5b84356111ed81611874565b966020860135965060408601359560600135945092505050565b60008060006040848603121561121b578283fd5b833567ffffffffffffffff80821115611232578485fd5b818601915086601f830112611245578485fd5b813581811115611253578586fd5b8760208083028501011115611266578586fd5b602092830195509350508401358015158114611280578182fd5b809150509250925092565b600080600080608085870312156112a0578384fd5b843567ffffffffffffffff8111156112b6578485fd5b6112c2878288016110d2565b97602087013597506040870135966060013595509350505050565b60008060008060008060c087890312156112f5578182fd5b863567ffffffffffffffff81111561130b578283fd5b61131789828a016110d2565b9960208901359950604089013598606081013598506080810135975060a0013595509350505050565b600060208284031215611351578081fd5b8151610c9681611874565b60006020828403121561136d578081fd5b815167ffffffffffffffff80821115611384578283fd5b818401915084601f830112611397578283fd5b8151818111156113a5578384fd5b6113d660207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601611821565b91508082528560208285010111156113ec578384fd5b6113fd816020840160208601611848565b50949350505050565b600060208284031215611417578081fd5b5051919050565b600080600080600080600060e0888a031215611438578081fd5b875196506020880151955060408801519450606088015193506080880151925060a0880151915060c088015161146d81611874565b8091505092959891949750929550565b60006020828403121561148e578081fd5b815160ff81168114610c96578182fd5b6000828483379101908152919050565b60006020825282518060208401526114cd816040850160208701611848565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60208082526019908201527f4d7573742063616c6c20616464506f6f6c282920666972737400000000000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b60208082526016908201527f546f6b656e73206d75737420626520696e20706f6f6c00000000000000000000604082015260600190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b60208082526013908201527f496e76616c696420746f6b656e20696e64657800000000000000000000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601e908201527f417070726f78696d6174696f6e20646964206e6f7420636f6e76657267650000604082015260600190565b6020808252601d908201527f43616e277420636f6d7061726520746f6b656e20746f20697473656c66000000604082015260600190565b60208082526013908201527f4420646f6573206e6f7420636f6e766572676500000000000000000000000000604082015260600190565b6020808252600d908201527f546f6b656e20696e76616c696400000000000000000000000000000000000000604082015260600190565b90815260200190565b60ff91909116815260200190565b60ff9384168152919092166020820152604081019190915260600190565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126117eb578283fd5b83018035915067ffffffffffffffff821115611805578283fd5b60200191503681900382131561181a57600080fd5b9250929050565b60405181810167ffffffffffffffff8111828210171561184057600080fd5b604052919050565b60005b8381101561186357818101518382015260200161184b565b838111156109535750506000910152565b73ffffffffffffffffffffffffffffffffffffffff8116811461189657600080fd5b5056fea26469706673582212209aae6319bd76e3168bcb0a00acd7900803eae3c12cf9359b54670925930902f964736f6c634300060c0033",
  "deployedBytecode": "0x6080604052600436106100965760003560e01c8063a936d00311610069578063d2423b511161004e578063d2423b5114610171578063d914cd4b14610186578063db7ffdb21461019957610096565b8063a936d00314610131578063bcf0fcfa1461015157610096565b80632b4bee461461009b5780632b9edaa9146100d157806364965387146100f157806381a6938914610111575b600080fd5b3480156100a757600080fd5b506100bb6100b63660046112dd565b6101b9565b6040516100c89190611782565b60405180910390f35b3480156100dd57600080fd5b506100bb6100ec3660046111cd565b61029c565b3480156100fd57600080fd5b506100bb61010c36600461128b565b6105b4565b34801561011d57600080fd5b506100bb61012c36600461116e565b6105d6565b34801561013d57600080fd5b506100bb61014c366004611199565b610604565b34801561015d57600080fd5b506100bb61016c3660046112dd565b6107ef565b61018461017f366004611207565b610896565b005b610184610194366004611152565b610959565b3480156101a557600080fd5b506100bb6101b43660046111cd565b610b86565b60008651841080156101cb5750865183105b6101f05760405162461bcd60e51b81526004016101e790611612565b60405180910390fd5b60006102146102046402540be40088610c2f565b61020e8589610c5c565b90610c9d565b90506102208382610ccf565b9250600061024a848a878151811061023457fe5b6020026020010151610c2f90919063ffffffff16565b9050600061025b898888858e610cf4565b905061028e60016102888c8a8151811061027157fe5b602002602001015184610c2f90919063ffffffff16565b90610ccf565b9a9950505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260208181526040808320805482518185028101850190935280835260609383018282801561030557602002820191906000526020600020905b8154815260200190600101908083116102f1575b50505050509050600081511161032d5760405162461bcd60e51b81526004016101e7906114ff565b6060815167ffffffffffffffff8111801561034757600080fd5b50604051908082528060200260200182016040528015610371578160200160208202803683370190505b50905060005b82518110156104615760006103a984838151811061039157fe5b60200260200101516012610c2f90919063ffffffff16565b600a0a9050610441818a73ffffffffffffffffffffffffffffffffffffffff166391ceb3eb856040518263ffffffff1660e01b81526004016103eb919061178b565b60206040518083038186803b15801561040357600080fd5b505afa158015610417573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043b9190611406565b90610c5c565b83838151811061044d57fe5b602090810291909101015250600101610377565b5061047e61047483878151811061039157fe5b8590600a0a610c5c565b935060008773ffffffffffffffffffffffffffffffffffffffff16635fd65f0f6040518163ffffffff1660e01b815260040160e06040518083038186803b1580156104c857600080fd5b505afa1580156104dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610500919061141e565b50509450505050506105a861051a84898151811061039157fe5b600a0a61020e848b73ffffffffffffffffffffffffffffffffffffffff16630ba819596040518163ffffffff1660e01b815260040160206040518083038186803b15801561056757600080fd5b505afa15801561057b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059f9190611406565b858c8c8c6101b9565b98975050505050505050565b60006105cd858560008686670de0b6b3a76400006107ef565b95945050505050565b600060205281600052604060002081815481106105ef57fe5b90600052602060002001600091509150505481565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260208181526040808320805482518185028101850190935280835260609383018282801561066d57602002820191906000526020600020905b815481526020019060010190808311610659575b5050505050905060008151116106955760405162461bcd60e51b81526004016101e7906114ff565b6060815167ffffffffffffffff811180156106af57600080fd5b506040519080825280602002602001820160405280156106d9578160200160208202803683370190505b50905060005b825181101561075b5760006106f984838151811061039157fe5b600a0a905061073b818973ffffffffffffffffffffffffffffffffffffffff166391ceb3eb856040518263ffffffff1660e01b81526004016103eb919061178b565b83838151811061074757fe5b6020908102919091010152506001016106df565b506107e5818773ffffffffffffffffffffffffffffffffffffffff16630ba819596040518163ffffffff1660e01b815260040160206040518083038186803b1580156107a657600080fd5b505afa1580156107ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107de9190611406565b87876105b4565b9695505050505050565b60008651841080156108015750865183105b61081d5760405162461bcd60e51b81526004016101e790611612565b600061084588868151811061082e57fe5b602002602001015184610ccf90919063ffffffff16565b90506000610856888787858d610cff565b9050610873600161086d838c898151811061023457fe5b90610c2f565b9250600061088a6402540be40061020e868b610c5c565b905061028e8482610c2f565b60005b828110156109535760006060308686858181106108b257fe5b90506020028101906108c491906117b7565b6040516108d292919061149e565b600060405180830381855af49150503d806000811461090d576040519150601f19603f3d011682016040523d82523d6000602084013e610912565b606091505b5091509150811580156109225750835b156109495761093081610e94565b60405162461bcd60e51b81526004016101e791906114ae565b5050600101610899565b50505050565b6040805160088082526101208201909252606091602082016101008036833701905050905060005b6008811015610b2b576040517f82b8660000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416906382b86600906109dc90849060040161178b565b60206040518083038186803b1580156109f457600080fd5b505afa925050508015610a42575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252610a3f91810190611340565b60015b610a5457806008038251038252610b2b565b73ffffffffffffffffffffffffffffffffffffffff8116610a875760405162461bcd60e51b81526004016101e79061174b565b8073ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610acf57600080fd5b505af1158015610ae3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b07919061147d565b60ff16838381518110610b1657fe5b60200260200101818152505050600101610981565b506000815111610b4d5760405162461bcd60e51b81526004016101e7906114ff565b73ffffffffffffffffffffffffffffffffffffffff82166000908152602081815260409091208251610b8192840190611072565b505050565b6040517fa95b089f00000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff86169063a95b089f90610bdf90879087908790600401611799565b60206040518083038186803b158015610bf757600080fd5b505afa158015610c0b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105cd9190611406565b600082821115610c515760405162461bcd60e51b81526004016101e79061156d565b508082035b92915050565b600082610c6b57506000610c56565b82820282848281610c7857fe5b0414610c965760405162461bcd60e51b81526004016101e790611649565b9392505050565b6000808211610cbe5760405162461bcd60e51b81526004016101e7906115db565b818381610cc757fe5b049392505050565b600082820183811015610c965760405162461bcd60e51b81526004016101e790611536565b60006107e586858786865b805160009085851415610d245760405162461bcd60e51b81526004016101e7906116dd565b8086108015610d3257508085105b610d4e5760405162461bcd60e51b81526004016101e7906115a4565b6000610d5a8489610efc565b905080600080610d6a858c610c5c565b90506000805b86811015610ddd578b811415610d8857899150610daf565b8a8114610daa57888181518110610d9b57fe5b60200260200101519150610daf565b610dd5565b610db98483610ccf565b9350610dd2610dc88389610c5c565b61020e8789610c5c565b94505b600101610d70565b50610dfa610deb8388610c5c565b61020e606461043b888a610c5c565b93506000610e17610e108461020e896064610c5c565b8590610ccf565b9050600086815b610100811015610e7b579091508190610e51610e438a61086d87610288876002610c5c565b61020e8a6102888680610c5c565b9150610e5d8284611043565b15610e73575098506105cd975050505050505050565b600101610e1e565b5060405162461bcd60e51b81526004016101e7906116a6565b6060604482511015610eda575060408051808201909152601d81527f5472616e73616374696f6e2072657665727465642073696c656e746c790000006020820152610ef7565b60048201915081806020019051810190610ef4919061135c565b90505b919050565b815160009081805b82811015610f3c57610f32868281518110610f1b57fe5b602002602001015183610ccf90919063ffffffff16565b9150600101610f04565b5080610f4d57600092505050610c56565b60008181610f5b8786610c5c565b905060005b61010081101561102a578260005b87811015610fb357610fa9610f9f898d8481518110610f8957fe5b6020026020010151610c5c90919063ffffffff16565b61020e8488610c5c565b9150600101610f6e565b509293508392611001610fe1610fce8361043b8b6001610ccf565b610288606461020e8961043b8a84610c2f565b61020e8661043b610ff2868d610c5c565b610288606461020e8b8f610c5c565b935061100d8486611043565b156110215783975050505050505050610c56565b50600101610f60565b5060405162461bcd60e51b81526004016101e790611714565b60006001611051848461105a565b11159392505050565b60008183111561106d5750808203610c56565b500390565b8280548282559060005260206000209081019282156110ad579160200282015b828111156110ad578251825591602001919060010190611092565b506110b99291506110bd565b5090565b5b808211156110b957600081556001016110be565b600082601f8301126110e2578081fd5b813567ffffffffffffffff8111156110f8578182fd5b6020808202611108828201611821565b8381529350818401858301828701840188101561112457600080fd5b600092505b84831015611147578035825260019290920191908301908301611129565b505050505092915050565b600060208284031215611163578081fd5b8135610c9681611874565b60008060408385031215611180578081fd5b823561118b81611874565b946020939093013593505050565b6000806000606084860312156111ad578081fd5b83356111b881611874565b95602085013595506040909401359392505050565b600080600080608085870312156111e2578081fd5b84356111ed81611874565b966020860135965060408601359560600135945092505050565b60008060006040848603121561121b578283fd5b833567ffffffffffffffff80821115611232578485fd5b818601915086601f830112611245578485fd5b813581811115611253578586fd5b8760208083028501011115611266578586fd5b602092830195509350508401358015158114611280578182fd5b809150509250925092565b600080600080608085870312156112a0578384fd5b843567ffffffffffffffff8111156112b6578485fd5b6112c2878288016110d2565b97602087013597506040870135966060013595509350505050565b60008060008060008060c087890312156112f5578182fd5b863567ffffffffffffffff81111561130b578283fd5b61131789828a016110d2565b9960208901359950604089013598606081013598506080810135975060a0013595509350505050565b600060208284031215611351578081fd5b8151610c9681611874565b60006020828403121561136d578081fd5b815167ffffffffffffffff80821115611384578283fd5b818401915084601f830112611397578283fd5b8151818111156113a5578384fd5b6113d660207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601611821565b91508082528560208285010111156113ec578384fd5b6113fd816020840160208601611848565b50949350505050565b600060208284031215611417578081fd5b5051919050565b600080600080600080600060e0888a031215611438578081fd5b875196506020880151955060408801519450606088015193506080880151925060a0880151915060c088015161146d81611874565b8091505092959891949750929550565b60006020828403121561148e578081fd5b815160ff81168114610c96578182fd5b6000828483379101908152919050565b60006020825282518060208401526114cd816040850160208701611848565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60208082526019908201527f4d7573742063616c6c20616464506f6f6c282920666972737400000000000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b60208082526016908201527f546f6b656e73206d75737420626520696e20706f6f6c00000000000000000000604082015260600190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b60208082526013908201527f496e76616c696420746f6b656e20696e64657800000000000000000000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601e908201527f417070726f78696d6174696f6e20646964206e6f7420636f6e76657267650000604082015260600190565b6020808252601d908201527f43616e277420636f6d7061726520746f6b656e20746f20697473656c66000000604082015260600190565b60208082526013908201527f4420646f6573206e6f7420636f6e766572676500000000000000000000000000604082015260600190565b6020808252600d908201527f546f6b656e20696e76616c696400000000000000000000000000000000000000604082015260600190565b90815260200190565b60ff91909116815260200190565b60ff9384168152919092166020820152604081019190915260600190565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126117eb578283fd5b83018035915067ffffffffffffffff821115611805578283fd5b60200191503681900382131561181a57600080fd5b9250929050565b60405181810167ffffffffffffffff8111828210171561184057600080fd5b604052919050565b60005b8381101561186357818101518382015260200161184b565b838111156109535750506000910152565b73ffffffffffffffffffffffffffffffffffffffff8116811461189657600080fd5b5056fea26469706673582212209aae6319bd76e3168bcb0a00acd7900803eae3c12cf9359b54670925930902f964736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addPool(address)": {
        "params": {
          "pool": "address of a pool contract that implements ISwap"
        }
      },
      "batch(bytes[],bool)": {
        "params": {
          "calls": "An array of inputs for each call.",
          "revertOnFail": "If True then reverts after a failed call and stops doing further calls."
        }
      },
      "calculateSwapInput(address,uint256,uint256,uint256)": {
        "params": {
          "inputIndex": "index of the input token in the pool",
          "outputAmount": "desired amount of output token to receive on swap",
          "outputIndex": "index of the output token in the pool",
          "pool": "address of a pool contract that implements ISwap"
        },
        "returns": {
          "inputAmount": "expected input amount"
        }
      },
      "calculateSwapInputCustom(uint256[],uint256,uint256,uint256,uint256,uint256)": {
        "details": "Uses 1e18 precision for balances, 1e2 for A, and 1e10 for swap fee",
        "params": {
          "a": "A parameter to be used in the calculation",
          "balances": "array of balances",
          "inputIndex": "index of the input token in the pool",
          "outputAmount": "desired amount of output token to receive on swap",
          "outputIndex": "index of the output token in the pool",
          "swapFee": "fee to be charged per swap"
        },
        "returns": {
          "inputAmount": "expected input amount"
        }
      },
      "calculateSwapOutput(address,uint256,uint256,uint256)": {
        "params": {
          "inputAmount": "amount of input token to swap",
          "inputIndex": "index of the input token in the pool",
          "outputIndex": "index of the output token in the pool",
          "pool": "address of a pool contract that implements ISwap"
        },
        "returns": {
          "outputAmount": "expected output amount"
        }
      },
      "calculateSwapOutputCustom(uint256[],uint256,uint256,uint256,uint256,uint256)": {
        "details": "Uses 1e18 precision for balances, 1e2 for A, and 1e10 for swap fee",
        "params": {
          "a": "A parameter to be used in the calculation",
          "balances": "array of balances",
          "inputAmount": "amount of input token to swap",
          "inputIndex": "index of the input token in the pool",
          "outputIndex": "index of the output token in the pool",
          "swapFee": "fee to be charged per swap"
        },
        "returns": {
          "outputAmount": "expected output amount"
        }
      },
      "relativePrice(address,uint256,uint256)": {
        "params": {
          "inputIndex": "index of the input token in the pool",
          "outputIndex": "index of the output token in the pool",
          "pool": "address of a pool contract that implements ISwap"
        },
        "returns": {
          "price": "relative price of output tokens per one input token"
        }
      },
      "relativePriceCustom(uint256[],uint256,uint256,uint256)": {
        "details": "Uses 1e18 precision for balances, 1e2 for A",
        "params": {
          "a": "A parameter to be used in the calculation",
          "balances": "array of balances",
          "inputIndex": "index of the input token in the pool",
          "outputIndex": "index of the output token in the pool"
        },
        "returns": {
          "price": "relative price of output tokens per one input token"
        }
      }
    },
    "title": "SwapCalculator",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addPool(address)": {
        "notice": "Add and registers a new pool. This function exist to cache decimal information."
      },
      "batch(bytes[],bool)": {
        "notice": "Allows batched call to self (this contract)."
      },
      "calculateSwapInput(address,uint256,uint256,uint256)": {
        "notice": "Calculate the expected input amount for given pool, indexes, and out amount"
      },
      "calculateSwapInputCustom(uint256[],uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Calculate the expected input amount for given balances, A, swap fee, indexes, and out amount"
      },
      "calculateSwapOutput(address,uint256,uint256,uint256)": {
        "notice": "Calculate the expected output amount for given pool, indexes, and input amount"
      },
      "calculateSwapOutputCustom(uint256[],uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Calculate the expected input amount for given balances, A, swap fee, indexes, and out amount"
      },
      "relativePrice(address,uint256,uint256)": {
        "notice": "Calculates the relative price between two assets in a pool"
      },
      "relativePriceCustom(uint256[],uint256,uint256,uint256)": {
        "notice": "Calculate the relative price between two assets in given setup of balances and A"
      }
    },
    "notice": "A contract to help calculate exact input and output amounts for a swap. Supports pools with ISwap interfaces. Additionally includes functions to calculate with arbitrary balances, A parameter, and swap fee.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24683,
        "contract": "contracts/libraries/SwapCalculator.sol:SwapCalculator",
        "label": "storedDecimals",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
