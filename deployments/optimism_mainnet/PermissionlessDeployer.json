{
  "address": "0x293deD6B7D8D37bFE1e66Aadbdec9f87FEDbd37F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_masterRegistry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_targetLPToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_targetSwap",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_targetMetaSwap",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_targetMetaSwapDeposit",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "cloneAddress",
          "type": "address"
        }
      ],
      "name": "NewClone",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "deployer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "swapAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20[]",
          "name": "pooledTokens",
          "type": "address[]"
        }
      ],
      "name": "NewSwapPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "poolRegistry",
          "type": "address"
        }
      ],
      "name": "PoolRegistryUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "TargetLPTokenUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "TargetMetaSwapDepositUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "TargetMetaSwapUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "TargetSwapUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LP_TOKEN_NAME0",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LP_TOKEN_NAME1",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MASTER_REGISTRY",
      "outputs": [
        {
          "internalType": "contract IMasterRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POOL_REGISTRY_NAME",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SADDLE_MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "clone",
      "outputs": [
        {
          "internalType": "address",
          "name": "newClone",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "poolName",
              "type": "bytes32"
            },
            {
              "internalType": "contract IERC20[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint8[]",
              "name": "decimals",
              "type": "uint8[]"
            },
            {
              "internalType": "string",
              "name": "lpTokenSymbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "a",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "adminFee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "baseSwap",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "typeOfAsset",
              "type": "uint8"
            }
          ],
          "internalType": "struct PermissionlessDeployer.DeployMetaSwapInput",
          "name": "input",
          "type": "tuple"
        }
      ],
      "name": "deployMetaSwap",
      "outputs": [
        {
          "internalType": "address",
          "name": "deployedMetaSwap",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "deployedMetaSwapDeposit",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "poolName",
              "type": "bytes32"
            },
            {
              "internalType": "contract IERC20[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint8[]",
              "name": "decimals",
              "type": "uint8[]"
            },
            {
              "internalType": "string",
              "name": "lpTokenSymbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "a",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "adminFee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "typeOfAsset",
              "type": "uint8"
            }
          ],
          "internalType": "struct PermissionlessDeployer.DeploySwapInput",
          "name": "input",
          "type": "tuple"
        }
      ],
      "name": "deploySwap",
      "outputs": [
        {
          "internalType": "address",
          "name": "deployedSwap",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolRegistryCached",
      "outputs": [
        {
          "internalType": "contract IPoolRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_targetLPToken",
          "type": "address"
        }
      ],
      "name": "setTargetLPToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_targetMetaSwap",
          "type": "address"
        }
      ],
      "name": "setTargetMetaSwap",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_targetMetaSwapDeposit",
          "type": "address"
        }
      ],
      "name": "setTargetMetaSwapDeposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_targetSwap",
          "type": "address"
        }
      ],
      "name": "setTargetSwap",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetLPToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetMetaSwap",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetMetaSwapDeposit",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetSwap",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updatePoolRegistryCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdba26cfc923e90d9e485db16ae398edf55a16a2aeb13ff9e81a7a0be4e3396b3",
  "receipt": {
    "to": null,
    "from": "0x5BDb37d0Ddea3A90F233c7B7F6b9394B6b2eef34",
    "contractAddress": "0x293deD6B7D8D37bFE1e66Aadbdec9f87FEDbd37F",
    "transactionIndex": 0,
    "gasUsed": "2490754",
    "logsBloom": "0x
    "blockHash": "0x4dbb39a78b78d08745914b82e670947c31b49c7a0cdbd4b6708975ace2fccc08",
    "transactionHash": "0xdba26cfc923e90d9e485db16ae398edf55a16a2aeb13ff9e81a7a0be4e3396b3",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 29932087,
        "transactionHash": "0xdba26cfc923e90d9e485db16ae398edf55a16a2aeb13ff9e81a7a0be4e3396b3",
        "address": "0x293deD6B7D8D37bFE1e66Aadbdec9f87FEDbd37F",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000091804c72076add9fab49b2c1e1a61a7503199599",
          "0x0000000000000000000000005bdb37d0ddea3a90f233c7b7f6b9394b6b2eef34"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x4dbb39a78b78d08745914b82e670947c31b49c7a0cdbd4b6708975ace2fccc08"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 29932087,
        "transactionHash": "0xdba26cfc923e90d9e485db16ae398edf55a16a2aeb13ff9e81a7a0be4e3396b3",
        "address": "0x293deD6B7D8D37bFE1e66Aadbdec9f87FEDbd37F",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xe132a6a517694e2454dc663f0d4fa738f94e7c1bd06c8950d14f9db8832494bd",
          "0x0000000000000000000000005bdb37d0ddea3a90f233c7b7f6b9394b6b2eef34",
          "0x0000000000000000000000005bdb37d0ddea3a90f233c7b7f6b9394b6b2eef34"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x4dbb39a78b78d08745914b82e670947c31b49c7a0cdbd4b6708975ace2fccc08"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 29932087,
        "transactionHash": "0xdba26cfc923e90d9e485db16ae398edf55a16a2aeb13ff9e81a7a0be4e3396b3",
        "address": "0x293deD6B7D8D37bFE1e66Aadbdec9f87FEDbd37F",
        "topics": [
          "0x336ea638298c0cea1e72c71ed04716bef23a7a6251478299d7ca4067fea0c479",
          "0x0000000000000000000000002b7a5a5923eca5c00c6572cf3e8e08384f563f93"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x4dbb39a78b78d08745914b82e670947c31b49c7a0cdbd4b6708975ace2fccc08"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 29932087,
        "transactionHash": "0xdba26cfc923e90d9e485db16ae398edf55a16a2aeb13ff9e81a7a0be4e3396b3",
        "address": "0x293deD6B7D8D37bFE1e66Aadbdec9f87FEDbd37F",
        "topics": [
          "0x6c149d1850b03102a8ac77fc865c12f017f4fb8bf9f9af345d36b0e8b60bcc85",
          "0x00000000000000000000000008f8611b996bf2f0fd7523b54e69bfb92dd43a81"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x4dbb39a78b78d08745914b82e670947c31b49c7a0cdbd4b6708975ace2fccc08"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 29932087,
        "transactionHash": "0xdba26cfc923e90d9e485db16ae398edf55a16a2aeb13ff9e81a7a0be4e3396b3",
        "address": "0x293deD6B7D8D37bFE1e66Aadbdec9f87FEDbd37F",
        "topics": [
          "0x06fc5602fc767cbb172d176a4cd0531d747abbdd090065ebd7b63ee4d2f0b44d",
          "0x0000000000000000000000005224e52878ab1c6076402e5c98f018d109131351"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x4dbb39a78b78d08745914b82e670947c31b49c7a0cdbd4b6708975ace2fccc08"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 29932087,
        "transactionHash": "0xdba26cfc923e90d9e485db16ae398edf55a16a2aeb13ff9e81a7a0be4e3396b3",
        "address": "0x293deD6B7D8D37bFE1e66Aadbdec9f87FEDbd37F",
        "topics": [
          "0x768ccdac0361ba56b697aa598fdd415f51a59d121b9d2b50714d3072cc4a8f17",
          "0x00000000000000000000000088cc4aa0dd6cf126b00c012dda9f6f4fd9388b17"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x4dbb39a78b78d08745914b82e670947c31b49c7a0cdbd4b6708975ace2fccc08"
      }
    ],
    "blockNumber": 29932087,
    "cumulativeGasUsed": "2490754",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x91804c72076aDd9fAB49b2c1e1A61A7503199599",
    "0x0E510c9b20a5D136E75f7FD2a5F344BD98f9d875",
    "0x2b7A5a5923ECa5C00c6572Cf3E8e08384F563F93",
    "0x08F8611b996bf2F0FD7523B54e69BFb92Dd43a81",
    "0x5224e52878ab1C6076402E5c98F018D109131351",
    "0x88Cc4aA0dd6Cf126b00C012dDa9f6F4fd9388b17"
  ],
  "numDeployments": 1,
  "solcInputHash": "e454d9aa938f149ff8907a8a2452f369",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_masterRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_targetLPToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_targetSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_targetMetaSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_targetMetaSwapDeposit\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"cloneAddress\",\"type\":\"address\"}],\"name\":\"NewClone\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"swapAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20[]\",\"name\":\"pooledTokens\",\"type\":\"address[]\"}],\"name\":\"NewSwapPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolRegistry\",\"type\":\"address\"}],\"name\":\"PoolRegistryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"TargetLPTokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"TargetMetaSwapDepositUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"TargetMetaSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"TargetSwapUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LP_TOKEN_NAME0\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LP_TOKEN_NAME1\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MASTER_REGISTRY\",\"outputs\":[{\"internalType\":\"contract IMasterRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL_REGISTRY_NAME\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SADDLE_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"clone\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newClone\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"poolName\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"decimals\",\"type\":\"uint8[]\"},{\"internalType\":\"string\",\"name\":\"lpTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"adminFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"baseSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"typeOfAsset\",\"type\":\"uint8\"}],\"internalType\":\"struct PermissionlessDeployer.DeployMetaSwapInput\",\"name\":\"input\",\"type\":\"tuple\"}],\"name\":\"deployMetaSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"deployedMetaSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"deployedMetaSwapDeposit\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"poolName\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"decimals\",\"type\":\"uint8[]\"},{\"internalType\":\"string\",\"name\":\"lpTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"adminFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"typeOfAsset\",\"type\":\"uint8\"}],\"internalType\":\"struct PermissionlessDeployer.DeploySwapInput\",\"name\":\"input\",\"type\":\"tuple\"}],\"name\":\"deploySwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"deployedSwap\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolRegistryCached\",\"outputs\":[{\"internalType\":\"contract IPoolRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_targetLPToken\",\"type\":\"address\"}],\"name\":\"setTargetLPToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_targetMetaSwap\",\"type\":\"address\"}],\"name\":\"setTargetMetaSwap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_targetMetaSwapDeposit\",\"type\":\"address\"}],\"name\":\"setTargetMetaSwapDeposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_targetSwap\",\"type\":\"address\"}],\"name\":\"setTargetSwap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetLPToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetMetaSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetMetaSwapDeposit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePoolRegistryCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"NewSwapPool(address,address,address[])\":{\"params\":{\"deployer\":\"address of the deployer\",\"pooledTokens\":\", array of addresses of the tokens in the pool\",\"swapAddress\":\"address of the deployed pool\"}},\"PoolRegistryUpdated(address)\":{\"params\":{\"poolRegistry\":\"address of the current Saddle Pool Registry\"}}},\"kind\":\"dev\",\"methods\":{\"clone(address)\":{\"params\":{\"target\":\"the address of the target pool to be cloned\"},\"returns\":{\"newClone\":\"an address of the cloned pool\"}},\"deployMetaSwap((bytes32,address[],uint8[],string,uint256,uint256,uint256,address,address,uint8))\":{\"params\":{\"input\":\", a DeployMetaSwapInput struct containing the input parameters for the meta pool.\"}},\"deploySwap((bytes32,address[],uint8[],string,uint256,uint256,uint256,address,uint8))\":{\"params\":{\"input\":\", a struct containing the input parameters for the pool to be deployed, must include a unique pool name.\"},\"returns\":{\"deployedSwap\":\"the address of the deployed pool.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"title\":\"PermissionlessDeployer\",\"version\":1},\"userdoc\":{\"events\":{\"NewSwapPool(address,address,address[])\":{\"notice\":\"Emmited when a new pool is deployed\"},\"PoolRegistryUpdated(address)\":{\"notice\":\"Emmited when the pool registry cache is updated\"}},\"kind\":\"user\",\"methods\":{\"SADDLE_MANAGER_ROLE()\":{\"notice\":\"Role responsible for managing target addresses\"},\"clone(address)\":{\"notice\":\"Uses openzeppelin's clone mechanism to clone an existing a pool for cheaper deployments.\"},\"deployMetaSwap((bytes32,address[],uint8[],string,uint256,uint256,uint256,address,address,uint8))\":{\"notice\":\"Deploys a new meta pool.\"},\"deploySwap((bytes32,address[],uint8[],string,uint256,uint256,uint256,address,uint8))\":{\"notice\":\"Deploys a new pool, adds an entry in the Saddle Pool Registry.\"},\"updatePoolRegistryCache()\":{\"notice\":\"Updates cached address of the pool registry **should be onlymanager?\"}},\"notice\":\"Allows for anyone to indepentantly deploy pools and meta pools of given tokens. A user will set custom parameters for the pool such as the trading/admin fees, as well as the a-parameter. Ownership of the pools are given to the deploying address. Saddle will collect 50% of the trading fees earned by the pool.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/permissionless/PermissionlessDeployer.sol\":\"PermissionlessDeployer\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4fc155a2f7837603d69a13cfa481eb5e7f5e02cb77e2ec9edbac30986db37988\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `master`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address master) internal returns (address instance) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, master))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `master`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `master` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address master, bytes32 salt) internal returns (address instance) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, master))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address master, bytes32 salt, address deployer) internal pure returns (address predicted) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, master))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address master, bytes32 salt) internal view returns (address predicted) {\\n        return predictDeterministicAddress(master, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x0d24348f536f928d8b42789737bf34762faee065667ab530ea20969a9d9920d1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\",\"license\":\"MIT\"},\"contracts/interfaces/IAllowlist.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IAllowlist {\\n    function getPoolAccountLimit(address poolAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getPoolCap(address poolAddress) external view returns (uint256);\\n\\n    function verifyAddress(address account, bytes32[] calldata merkleProof)\\n        external\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0xf55e4d678d05bc5d0e24ec5f24504d7437b885e19579f9d29152748c3c1c732e\",\"license\":\"MIT\"},\"contracts/interfaces/IMasterRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IMasterRegistry {\\n    /* Structs */\\n\\n    struct ReverseRegistryData {\\n        bytes32 name;\\n        uint256 version;\\n    }\\n\\n    /* Functions */\\n\\n    /**\\n     * @notice Add a new registry entry to the master list.\\n     * @param registryName name for the registry\\n     * @param registryAddress address of the new registry\\n     */\\n    function addRegistry(bytes32 registryName, address registryAddress)\\n        external\\n        payable;\\n\\n    /**\\n     * @notice Resolves a name to the latest registry address. Reverts if no match is found.\\n     * @param name name for the registry\\n     * @return address address of the latest registry with the matching name\\n     */\\n    function resolveNameToLatestAddress(bytes32 name)\\n        external\\n        view\\n        returns (address);\\n\\n    /**\\n     * @notice Resolves a name and version to an address. Reverts if there is no registry with given name and version.\\n     * @param name address of the registry you want to resolve to\\n     * @param version version of the registry you want to resolve to\\n     */\\n    function resolveNameAndVersionToAddress(bytes32 name, uint256 version)\\n        external\\n        view\\n        returns (address);\\n\\n    /**\\n     * @notice Resolves a name to an array of all addresses. Reverts if no match is found.\\n     * @param name name for the registry\\n     * @return address address of the latest registry with the matching name\\n     */\\n    function resolveNameToAllAddresses(bytes32 name)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    /**\\n     * @notice Resolves an address to registry entry data.\\n     * @param registryAddress address of a registry you want to resolve\\n     * @return name name of the resolved registry\\n     * @return version version of the resolved registry\\n     * @return isLatest boolean flag of whether the given address is the latest version of the given registries with\\n     * matching name\\n     */\\n    function resolveAddressToRegistryData(address registryAddress)\\n        external\\n        view\\n        returns (\\n            bytes32 name,\\n            uint256 version,\\n            bool isLatest\\n        );\\n}\\n\",\"keccak256\":\"0x0e403d7e259003f3826b3009ae3e39344706d7af8a0a5bd48ba45a6ca978226b\",\"license\":\"MIT\"},\"contracts/interfaces/IMetaSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./ISwap.sol\\\";\\n\\ninterface IMetaSwap {\\n    // pool data view functions\\n    function getA() external view returns (uint256);\\n\\n    function getToken(uint8 index) external view returns (IERC20);\\n\\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\\n\\n    function getTokenBalance(uint8 index) external view returns (uint256);\\n\\n    function getVirtualPrice() external view returns (uint256);\\n\\n    function isGuarded() external view returns (bool);\\n\\n    function metaSwapStorage()\\n        external\\n        view\\n        returns (\\n            address baseSwap,\\n            uint256 baseVirtualPrice,\\n            uint256 baseCacheLastUpdated\\n        );\\n\\n    // min return calculation functions\\n    function calculateSwap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calculateSwapUnderlying(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calculateRemoveLiquidity(uint256 amount)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function calculateRemoveLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex\\n    ) external view returns (uint256 availableTokenAmount);\\n\\n    // state modifying functions\\n    function initialize(\\n        IERC20[] memory _pooledTokens,\\n        uint8[] memory decimals,\\n        string memory lpTokenName,\\n        string memory lpTokenSymbol,\\n        uint256 _a,\\n        uint256 _fee,\\n        uint256 _adminFee,\\n        address lpTokenTargetAddress\\n    ) external;\\n\\n    function initializeMetaSwap(\\n        IERC20[] memory _pooledTokens,\\n        uint8[] memory decimals,\\n        string memory lpTokenName,\\n        string memory lpTokenSymbol,\\n        uint256 _a,\\n        uint256 _fee,\\n        uint256 _adminFee,\\n        address lpTokenTargetAddress,\\n        ISwap baseSwap\\n    ) external;\\n\\n    function swap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function swapUnderlying(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function addLiquidity(\\n        uint256[] calldata amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256[] calldata minAmounts,\\n        uint256 deadline\\n    ) external returns (uint256[] memory);\\n\\n    function removeLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidityImbalance(\\n        uint256[] calldata amounts,\\n        uint256 maxBurnAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x9392f53aaf25e15dbe85bf92477c1bf526ab70c00c5e4cd389da8e12e061c1d1\",\"license\":\"MIT\"},\"contracts/interfaces/IMetaSwapDeposit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./ISwap.sol\\\";\\nimport \\\"./IMetaSwap.sol\\\";\\n\\ninterface IMetaSwapDeposit {\\n    function initialize(\\n        ISwap _baseSwap,\\n        IMetaSwap _metaSwap,\\n        IERC20 _metaLPToken\\n    ) external;\\n}\\n\",\"keccak256\":\"0xbc15e79f6d08b7d07b450ff6f5961eadf1c867b0f85feb59503874b719a2cd59\",\"license\":\"MIT\"},\"contracts/interfaces/IPoolRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IPoolRegistry {\\n    /* Structs */\\n\\n    struct PoolInputData {\\n        address poolAddress;\\n        uint8 typeOfAsset;\\n        bytes32 poolName;\\n        address targetAddress;\\n        address metaSwapDepositAddress;\\n        bool isSaddleApproved;\\n        bool isRemoved;\\n        bool isGuarded;\\n    }\\n\\n    struct PoolData {\\n        address poolAddress;\\n        address lpToken;\\n        uint8 typeOfAsset;\\n        bytes32 poolName;\\n        address targetAddress;\\n        IERC20[] tokens;\\n        IERC20[] underlyingTokens;\\n        address basePoolAddress;\\n        address metaSwapDepositAddress;\\n        bool isSaddleApproved;\\n        bool isRemoved;\\n        bool isGuarded;\\n    }\\n\\n    struct SwapStorageData {\\n        uint256 initialA;\\n        uint256 futureA;\\n        uint256 initialATime;\\n        uint256 futureATime;\\n        uint256 swapFee;\\n        uint256 adminFee;\\n        address lpToken;\\n    }\\n\\n    /* Public Variables */\\n\\n    /**\\n     * @notice Returns the index + 1 of the pool address in the registry\\n     * @param poolAddress address to look for\\n     */\\n    function poolsIndexOfPlusOne(address poolAddress)\\n        external\\n        returns (uint256);\\n\\n    /**\\n     * @notice Returns the index + 1 of the pool name in the registry\\n     * @param poolName pool name in bytes32 format to look for\\n     */\\n    function poolsIndexOfNamePlusOne(bytes32 poolName)\\n        external\\n        returns (uint256);\\n\\n    /* Functions */\\n\\n    /**\\n     * @notice Add a new pool to the registry\\n     * @param inputData PoolInputData struct for the new pool\\n     * @dev Before adding a meta pool, the user must first add the underlying base pool.\\n     * Only Swap and MetaSwap contracts need to be added.\\n     */\\n    function addPool(PoolInputData memory inputData) external payable;\\n\\n    /**\\n     * @notice Add a new pool to the registry\\n     * @param data PoolInputData struct for the new pool\\n     * @dev Before adding a meta pool, the user must first add the underlying base pool.\\n     * Only Swap and MetaSwap contracts need to be added.\\n     */\\n    function addCommunityPool(PoolData memory data) external payable;\\n\\n    /**\\n     * @notice Approve community deployed pools to be upgraded as Saddle owned\\n     * @dev since array entries are difficult to remove, we modify the entry to mark it\\n     * as a Saddle owned pool.\\n     * @param poolAddress address of the community pool\\n     */\\n    function approvePool(address poolAddress) external payable;\\n\\n    /**\\n     * @notice Overwrite existing entry with new PoolData\\n     * @param poolData new PoolData struct to store\\n     */\\n    function updatePool(PoolData memory poolData) external payable;\\n\\n    /**\\n     * @notice Remove pool from the registry\\n     * @dev Since arrays are not easily reducable, the entry will be marked as removed.\\n     * @param poolAddress address of the pool to remove\\n     */\\n    function removePool(address poolAddress) external payable;\\n\\n    /**\\n     * @notice Returns PoolData for given pool address\\n     * @param poolAddress address of the pool to read\\n     */\\n    function getPoolData(address poolAddress)\\n        external\\n        view\\n        returns (PoolData memory);\\n\\n    /**\\n     * @notice Returns PoolData at given index\\n     * @param index index of the pool to read\\n     */\\n    function getPoolDataAtIndex(uint256 index)\\n        external\\n        view\\n        returns (PoolData memory);\\n\\n    /**\\n     * @notice Returns PoolData with given name\\n     * @param poolName name of the pool to read\\n     */\\n    function getPoolDataByName(bytes32 poolName)\\n        external\\n        view\\n        returns (PoolData memory);\\n\\n    /**\\n     * @notice Returns virtual price of the given pool address\\n     * @param poolAddress address of the pool to read\\n     */\\n    function getVirtualPrice(address poolAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Returns A of the given pool address\\n     * @param poolAddress address of the pool to read\\n     */\\n    function getA(address poolAddress) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the paused status of the given pool address\\n     * @param poolAddress address of the pool to read\\n     */\\n    function getPaused(address poolAddress) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the SwapStorage struct of the given pool address\\n     * @param poolAddress address of the pool to read\\n     */\\n    function getSwapStorage(address poolAddress)\\n        external\\n        view\\n        returns (SwapStorageData memory swapStorageData);\\n\\n    /**\\n     * @notice Returns the tokens of the given pool address\\n     * @param poolAddress address of the pool to read\\n     */\\n    function getTokens(address poolAddress)\\n        external\\n        view\\n        returns (IERC20[] memory);\\n\\n    /**\\n     * @notice Returns the underlying tokens of the given pool address. Base pools will return an empty array.\\n     * @param poolAddress address of the pool to read\\n     */\\n    function getUnderlyingTokens(address poolAddress)\\n        external\\n        view\\n        returns (IERC20[] memory);\\n\\n    /**\\n     * @notice Returns number of entries in the registry. Includes removed pools\\n     * in the list as well.\\n     */\\n    function getPoolsLength() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns an array of pool addresses that can swap between from and to\\n     * @param from address of the token to swap from\\n     * @param to address of the token to swap to\\n     * @return eligiblePools array of pool addresses that can swap between from and to\\n     */\\n    function getEligiblePools(address from, address to)\\n        external\\n        view\\n        returns (address[] memory eligiblePools);\\n\\n    /**\\n     * @notice Returns an array of balances of the tokens\\n     * @param poolAddress address of the pool to look up the token balances for\\n     * @return balances array of token balances\\n     */\\n    function getTokenBalances(address poolAddress)\\n        external\\n        view\\n        returns (uint256[] memory balances);\\n\\n    /**\\n     * @notice Returns an array of balances of the tokens\\n     * @param poolAddress address of the pool to look up the token balances for\\n     * @return balances array of token balances\\n     */\\n    function getUnderlyingTokenBalances(address poolAddress)\\n        external\\n        view\\n        returns (uint256[] memory balances);\\n}\\n\",\"keccak256\":\"0x7f51230d9e9229a935312bd05f5e93ab8fbb38e6635bbfb9402001b86a795bb2\",\"license\":\"MIT\"},\"contracts/interfaces/ISwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./IAllowlist.sol\\\";\\n\\ninterface ISwap {\\n    // pool data view functions\\n    function getA() external view returns (uint256);\\n\\n    function getAPrecise() external view returns (uint256);\\n\\n    function getAllowlist() external view returns (IAllowlist);\\n\\n    function getToken(uint8 index) external view returns (IERC20);\\n\\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\\n\\n    function getTokenBalance(uint8 index) external view returns (uint256);\\n\\n    function getVirtualPrice() external view returns (uint256);\\n\\n    function owner() external view returns (address);\\n\\n    function isGuarded() external view returns (bool);\\n\\n    function paused() external view returns (bool);\\n\\n    function swapStorage()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            address\\n        );\\n\\n    // min return calculation functions\\n    function calculateSwap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calculateRemoveLiquidity(uint256 amount)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function calculateRemoveLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex\\n    ) external view returns (uint256 availableTokenAmount);\\n\\n    // state modifying functions\\n    function initialize(\\n        IERC20[] memory pooledTokens,\\n        uint8[] memory decimals,\\n        string memory lpTokenName,\\n        string memory lpTokenSymbol,\\n        uint256 a,\\n        uint256 fee,\\n        uint256 adminFee,\\n        address lpTokenTargetAddress\\n    ) external;\\n\\n    function swap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function addLiquidity(\\n        uint256[] calldata amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256[] calldata minAmounts,\\n        uint256 deadline\\n    ) external returns (uint256[] memory);\\n\\n    function removeLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidityImbalance(\\n        uint256[] calldata amounts,\\n        uint256 maxBurnAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xcd26195c5e3824e7984750a05c9fcb6dde3e266022c3bd1a9dcdda9e967a6f4c\",\"license\":\"MIT\"},\"contracts/permissionless/PermissionlessDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"../interfaces/ISwap.sol\\\";\\nimport \\\"../interfaces/IMetaSwap.sol\\\";\\nimport \\\"../interfaces/IMetaSwapDeposit.sol\\\";\\nimport \\\"../interfaces/IPoolRegistry.sol\\\";\\nimport \\\"../interfaces/IMasterRegistry.sol\\\";\\n\\n/**\\n * @title PermissionlessDeployer\\n * @notice Allows for anyone to indepentantly deploy pools and meta pools of given tokens. A user will set\\n * custom parameters for the pool such as the trading/admin fees, as well as the a-parameter.\\n *\\n * Ownership of the pools are given to the deploying address. Saddle will collect 50% of the trading fees earned\\n * by the pool.\\n */\\ncontract PermissionlessDeployer is AccessControl {\\n    IMasterRegistry public immutable MASTER_REGISTRY;\\n    bytes32 public constant POOL_REGISTRY_NAME =\\n        0x506f6f6c52656769737472790000000000000000000000000000000000000000;\\n\\n    /// @notice Role responsible for managing target addresses\\n    bytes32 public constant SADDLE_MANAGER_ROLE =\\n        keccak256(\\\"SADDLE_MANAGER_ROLE\\\");\\n\\n    address public targetLPToken;\\n    address public targetSwap;\\n    address public targetMetaSwap;\\n    address public targetMetaSwapDeposit;\\n    string public constant LP_TOKEN_NAME0 = \\\"Saddle \\\";\\n    string public constant LP_TOKEN_NAME1 = \\\" LP Token\\\";\\n\\n    IPoolRegistry public poolRegistryCached;\\n\\n    /**\\n     * @notice Emmited when a new pool is deployed\\n     * @param deployer address of the deployer\\n     * @param swapAddress address of the deployed pool\\n     * @param pooledTokens, array of addresses of the tokens in the pool\\n     */\\n    event NewSwapPool(\\n        address indexed deployer,\\n        address swapAddress,\\n        IERC20[] pooledTokens\\n    );\\n\\n    event NewClone(address indexed target, address cloneAddress);\\n\\n    /**\\n     * @notice Emmited when the pool registry cache is updated\\n     * @param poolRegistry address of the current Saddle Pool Registry\\n     */\\n    event PoolRegistryUpdated(address indexed poolRegistry);\\n    event TargetLPTokenUpdated(address indexed target);\\n    event TargetSwapUpdated(address indexed target);\\n    event TargetMetaSwapUpdated(address indexed target);\\n    event TargetMetaSwapDepositUpdated(address indexed target);\\n\\n    struct DeploySwapInput {\\n        bytes32 poolName; // name of the pool\\n        IERC20[] tokens; // array of addresses of the tokens in the pool\\n        uint8[] decimals; // array of decimals of the tokens in the pool\\n        string lpTokenSymbol; // symbol of the LPToken\\n        uint256 a; // a-parameter of the pool\\n        uint256 fee; // trading fee of the pool\\n        uint256 adminFee; // admin fee of the pool\\n        address owner; // owner address of the pool\\n        uint8 typeOfAsset; // USD/BTC/ETH/OTHER\\n    }\\n\\n    struct DeployMetaSwapInput {\\n        bytes32 poolName; // name of the pool\\n        IERC20[] tokens; // array of addresses of the tokens in the pool\\n        uint8[] decimals; // array of decimals of the tokens in the pool\\n        string lpTokenSymbol; // symbol of the LPToken\\n        uint256 a; // a-parameter of the pool\\n        uint256 fee; // trading fee of the pool\\n        uint256 adminFee; // admin fee of the pool\\n        address baseSwap; // address of the basepool\\n        address owner; // owner address of the pool\\n        uint8 typeOfAsset; // USD/BTC/ETH/OTHER\\n    }\\n\\n    constructor(\\n        address admin,\\n        address _masterRegistry,\\n        address _targetLPToken,\\n        address _targetSwap,\\n        address _targetMetaSwap,\\n        address _targetMetaSwapDeposit\\n    ) public payable {\\n        require(admin != address(0), \\\"admin == 0\\\");\\n        require(_masterRegistry != address(0), \\\"masterRegistry == 0\\\");\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, admin);\\n        _setupRole(SADDLE_MANAGER_ROLE, msg.sender);\\n\\n        _setTargetLPToken(_targetLPToken);\\n        _setTargetSwap(_targetSwap);\\n        _setTargetMetaSwap(_targetMetaSwap);\\n        _setTargetMetaSwapDeposit(_targetMetaSwapDeposit);\\n\\n        MASTER_REGISTRY = IMasterRegistry(_masterRegistry);\\n        _updatePoolRegistryCache(_masterRegistry);\\n    }\\n\\n    modifier onlyManager() {\\n        require(hasRole(SADDLE_MANAGER_ROLE, msg.sender), \\\"only manager\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Uses openzeppelin's clone mechanism to clone an existing a pool for cheaper deployments.\\n     * @param target the address of the target pool to be cloned\\n     * @return newClone an address of the cloned pool\\n     */\\n    function clone(address target) public payable returns (address newClone) {\\n        newClone = Clones.clone(target);\\n        emit NewClone(target, newClone);\\n    }\\n\\n    /**\\n     * @notice Deploys a new pool, adds an entry in the Saddle Pool Registry.\\n     * @param input, a struct containing the input parameters for the pool to be deployed,\\n     * must include a unique pool name.\\n     * @return deployedSwap the address of the deployed pool.\\n     */\\n\\n    function deploySwap(DeploySwapInput memory input)\\n        external\\n        payable\\n        returns (address deployedSwap)\\n    {\\n        require(\\n            poolRegistryCached.poolsIndexOfNamePlusOne(input.poolName) == 0,\\n            \\\"pool name already exists\\\"\\n        );\\n\\n        address swapClone = clone(targetSwap);\\n\\n        ISwap(swapClone).initialize(\\n            input.tokens,\\n            input.decimals,\\n            string(\\n                abi.encodePacked(\\n                    LP_TOKEN_NAME0,\\n                    input.lpTokenSymbol,\\n                    LP_TOKEN_NAME1\\n                )\\n            ),\\n            input.lpTokenSymbol,\\n            input.a,\\n            input.fee,\\n            input.adminFee,\\n            targetLPToken\\n        );\\n        Ownable(swapClone).transferOwnership(input.owner);\\n        (, , , , , , address lpToken) = ISwap(swapClone).swapStorage();\\n\\n        IPoolRegistry.PoolData memory poolData = IPoolRegistry.PoolData({\\n            poolAddress: swapClone,\\n            lpToken: lpToken,\\n            typeOfAsset: input.typeOfAsset,\\n            poolName: input.poolName,\\n            targetAddress: targetSwap,\\n            tokens: input.tokens,\\n            underlyingTokens: new IERC20[](0),\\n            basePoolAddress: address(0),\\n            metaSwapDepositAddress: address(0),\\n            isSaddleApproved: false,\\n            isRemoved: false,\\n            isGuarded: false\\n        });\\n\\n        emit NewSwapPool(msg.sender, swapClone, input.tokens);\\n\\n        poolRegistryCached.addCommunityPool(poolData);\\n        return swapClone;\\n    }\\n\\n    /**\\n     * @notice Deploys a new meta pool.\\n     * @param input, a DeployMetaSwapInput struct containing the input parameters for the meta pool.\\n     */\\n    function deployMetaSwap(DeployMetaSwapInput memory input)\\n        external\\n        payable\\n        returns (address deployedMetaSwap, address deployedMetaSwapDeposit)\\n    {\\n        require(\\n            poolRegistryCached.poolsIndexOfNamePlusOne(input.poolName) == 0,\\n            \\\"pool name already exists\\\"\\n        );\\n\\n        deployedMetaSwap = clone(targetMetaSwap);\\n        IMetaSwap(deployedMetaSwap).initializeMetaSwap(\\n            input.tokens,\\n            input.decimals,\\n            string(\\n                abi.encodePacked(\\n                    LP_TOKEN_NAME0,\\n                    input.lpTokenSymbol,\\n                    LP_TOKEN_NAME1\\n                )\\n            ),\\n            input.lpTokenSymbol,\\n            input.a,\\n            input.fee,\\n            input.adminFee,\\n            targetLPToken,\\n            ISwap(input.baseSwap)\\n        );\\n        (, , , , , , address lpToken) = ISwap(deployedMetaSwap).swapStorage();\\n        Ownable(deployedMetaSwap).transferOwnership(input.owner);\\n\\n        deployedMetaSwapDeposit = clone(targetMetaSwapDeposit);\\n        IMetaSwapDeposit(deployedMetaSwapDeposit).initialize(\\n            ISwap(input.baseSwap),\\n            IMetaSwap(deployedMetaSwap),\\n            IERC20(lpToken)\\n        );\\n\\n        IERC20[] memory baseTokens = poolRegistryCached.getTokens(\\n            input.baseSwap\\n        ); // revert if baseSwap is not registered\\n        IERC20[] memory underlyingTokens = new IERC20[](\\n            input.tokens.length - 1 + baseTokens.length\\n        );\\n        uint256 metaLPTokenIndex = input.tokens.length - 1;\\n        for (uint256 i = 0; i < metaLPTokenIndex; i++) {\\n            underlyingTokens[i] = input.tokens[i];\\n        }\\n        for (uint256 i = metaLPTokenIndex; i < underlyingTokens.length; i++) {\\n            underlyingTokens[i] = baseTokens[i - metaLPTokenIndex];\\n        }\\n\\n        IPoolRegistry.PoolData memory poolData = IPoolRegistry.PoolData({\\n            poolAddress: deployedMetaSwap,\\n            lpToken: lpToken,\\n            typeOfAsset: input.typeOfAsset,\\n            poolName: input.poolName,\\n            targetAddress: targetSwap,\\n            tokens: input.tokens,\\n            underlyingTokens: underlyingTokens,\\n            basePoolAddress: input.baseSwap,\\n            metaSwapDepositAddress: deployedMetaSwapDeposit,\\n            isSaddleApproved: false,\\n            isRemoved: false,\\n            isGuarded: false\\n        });\\n\\n        emit NewSwapPool(msg.sender, deployedMetaSwap, input.tokens);\\n        emit NewSwapPool(msg.sender, deployedMetaSwapDeposit, underlyingTokens);\\n\\n        poolRegistryCached.addCommunityPool(poolData);\\n    }\\n\\n    /**\\n     * @notice Updates cached address of the pool registry **should be onlymanager?\\n     */\\n    function updatePoolRegistryCache() external {\\n        _updatePoolRegistryCache(address(MASTER_REGISTRY));\\n    }\\n\\n    function _updatePoolRegistryCache(address masterRegistry) internal {\\n        poolRegistryCached = IPoolRegistry(\\n            IMasterRegistry(masterRegistry).resolveNameToLatestAddress(\\n                POOL_REGISTRY_NAME\\n            )\\n        );\\n    }\\n\\n    function setTargetLPToken(address _targetLPToken)\\n        external\\n        payable\\n        onlyManager\\n    {\\n        _setTargetLPToken(_targetLPToken);\\n    }\\n\\n    function _setTargetLPToken(address _targetLPToken) internal {\\n        require(\\n            address(_targetLPToken) != address(0),\\n            \\\"Target LPToken cannot be 0\\\"\\n        );\\n        targetLPToken = _targetLPToken;\\n        emit TargetLPTokenUpdated(_targetLPToken);\\n    }\\n\\n    function setTargetSwap(address _targetSwap) external payable onlyManager {\\n        _setTargetSwap(_targetSwap);\\n    }\\n\\n    function _setTargetSwap(address _targetSwap) internal {\\n        require(address(_targetSwap) != address(0), \\\"Target Swap cannot be 0\\\");\\n        targetSwap = _targetSwap;\\n        emit TargetSwapUpdated(_targetSwap);\\n    }\\n\\n    function setTargetMetaSwap(address _targetMetaSwap)\\n        public\\n        payable\\n        onlyManager\\n    {\\n        _setTargetMetaSwap(_targetMetaSwap);\\n    }\\n\\n    function _setTargetMetaSwap(address _targetMetaSwap) internal {\\n        require(\\n            address(_targetMetaSwap) != address(0),\\n            \\\"Target MetaSwap cannot be 0\\\"\\n        );\\n        targetMetaSwap = _targetMetaSwap;\\n        emit TargetMetaSwapUpdated(_targetMetaSwap);\\n    }\\n\\n    function setTargetMetaSwapDeposit(address _targetMetaSwapDeposit)\\n        external\\n        payable\\n        onlyManager\\n    {\\n        _setTargetMetaSwapDeposit(_targetMetaSwapDeposit);\\n    }\\n\\n    function _setTargetMetaSwapDeposit(address _targetMetaSwapDeposit)\\n        internal\\n    {\\n        require(\\n            address(_targetMetaSwapDeposit) != address(0),\\n            \\\"Target MetaSwapDeposit cannot be 0\\\"\\n        );\\n        targetMetaSwapDeposit = _targetMetaSwapDeposit;\\n        emit TargetMetaSwapDepositUpdated(_targetMetaSwapDeposit);\\n    }\\n}\\n\",\"keccak256\":\"0x4f16de7dd2e8ffdd088c002325ed0b5b84d0960553f61373d4e5b8823e112103\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405260405162002dcf38038062002dcf8339810160408190526200002691620004d9565b6001600160a01b038616620000585760405162461bcd60e51b81526004016200004f9062000686565b60405180910390fd5b6001600160a01b038516620000815760405162461bcd60e51b81526004016200004f906200059f565b6200008e6000876200010f565b620000ba7fe132a6a517694e2454dc663f0d4fa738f94e7c1bd06c8950d14f9db8832494bd336200010f565b620000c5846200011f565b620000d08362000192565b620000db8262000205565b620000e68162000278565b6001600160601b0319606086901b166080526200010385620002eb565b505050505050620006aa565b6200011b82826200039f565b5050565b6001600160a01b038116620001485760405162461bcd60e51b81526004016200004f9062000568565b600180546001600160a01b0319166001600160a01b0383169081179091556040517f336ea638298c0cea1e72c71ed04716bef23a7a6251478299d7ca4067fea0c47990600090a250565b6001600160a01b038116620001bb5760405162461bcd60e51b81526004016200004f90620005d6565b600280546001600160a01b0319166001600160a01b0383169081179091556040517f6c149d1850b03102a8ac77fc865c12f017f4fb8bf9f9af345d36b0e8b60bcc8590600090a250565b6001600160a01b0381166200022e5760405162461bcd60e51b81526004016200004f906200064f565b600380546001600160a01b0319166001600160a01b0383169081179091556040517f06fc5602fc767cbb172d176a4cd0531d747abbdd090065ebd7b63ee4d2f0b44d90600090a250565b6001600160a01b038116620002a15760405162461bcd60e51b81526004016200004f906200060d565b600480546001600160a01b0319166001600160a01b0383169081179091556040517f768ccdac0361ba56b697aa598fdd415f51a59d121b9d2b50714d3072cc4a8f1790600090a250565b604051633705f62560e01b81526001600160a01b03821690633705f6259062000328906b506f6f6c526567697374727960a01b906004016200055f565b60206040518083038186803b1580156200034157600080fd5b505afa15801562000356573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200037c9190620004bb565b600580546001600160a01b0319166001600160a01b039290921691909117905550565b600082815260208181526040909120620003c49183906200139362000418821b17901c565b156200011b57620003d462000438565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006200042f836001600160a01b0384166200043c565b90505b92915050565b3390565b60006200044a83836200048b565b620004825750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000432565b50600062000432565b60009081526001919091016020526040902054151590565b80516001600160a01b03811681146200043257600080fd5b600060208284031215620004cd578081fd5b6200042f8383620004a3565b60008060008060008060c08789031215620004f2578182fd5b620004fe8888620004a3565b95506200050f8860208901620004a3565b9450620005208860408901620004a3565b9350620005318860608901620004a3565b9250620005428860808901620004a3565b9150620005538860a08901620004a3565b90509295509295509295565b90815260200190565b6020808252601a908201527f546172676574204c50546f6b656e2063616e6e6f742062652030000000000000604082015260600190565b60208082526013908201527f6d61737465725265676973747279203d3d203000000000000000000000000000604082015260600190565b60208082526017908201527f54617267657420537761702063616e6e6f742062652030000000000000000000604082015260600190565b60208082526022908201527f546172676574204d657461537761704465706f7369742063616e6e6f74206265604082015261020360f41b606082015260800190565b6020808252601b908201527f546172676574204d657461537761702063616e6e6f7420626520300000000000604082015260600190565b6020808252600a9082015269061646d696e203d3d20360b41b604082015260600190565b60805160601c612702620006cd60003980610d3c5280610d6452506127026000f3fe6080604052600436106101a05760003560e01c8063a132d9b5116100e1578063b636f24a1161008a578063cce061e011610064578063cce061e0146103f8578063d547741f1461040d578063df0c1cf01461042d578063e1a58c3d14610440576101a0565b8063b636f24a146103b0578063bbe7d6b7146103c5578063ca15c873146103d8576101a0565b8063ac841ed9116100bb578063ac841ed914610366578063afa9502e1461037b578063b3a316b01461038e576101a0565b8063a132d9b514610329578063a217fddf1461033c578063a50d7d8514610351576101a0565b806336568abe1161014e5780636d2f2246116101285780636d2f2246146102b45780638124b78e146102c95780639010d07c146102dc57806391d14854146102fc576101a0565b806336568abe1461026a5780633c7958401461028a5780634f8d446b1461029f576101a0565b8063248a9ca31161017f578063248a9ca3146102065780632f2ff15d1461023357806333ba0efc14610255576101a0565b8062fc2fc0146101a55780630831cbb7146101cf57806321fcbe05146101f1575b600080fd5b6101b86101b3366004611cf3565b610453565b6040516101c692919061208e565b60405180910390f35b3480156101db57600080fd5b506101e4610b2e565b6040516101c6919061207a565b3480156101fd57600080fd5b506101e4610b3d565b34801561021257600080fd5b50610226610221366004611c8b565b610b4c565b6040516101c691906121e8565b34801561023f57600080fd5b5061025361024e366004611ca3565b610b64565b005b34801561026157600080fd5b506101e4610bac565b34801561027657600080fd5b50610253610285366004611ca3565b610bbb565b34801561029657600080fd5b506101e4610bfd565b3480156102ab57600080fd5b50610226610c0c565b3480156102c057600080fd5b50610226610c30565b6101e46102d7366004611bb4565b610c54565b3480156102e857600080fd5b506101e46102f7366004611cd2565b610ca7565b34801561030857600080fd5b5061031c610317366004611ca3565b610cc8565b6040516101c691906121dd565b610253610337366004611bb4565b610ce0565b34801561034857600080fd5b50610226610d32565b34801561035d57600080fd5b50610253610d37565b34801561037257600080fd5b506101e4610d62565b6101e4610389366004611e0e565b610d86565b34801561039a57600080fd5b506103a36111d4565b6040516101c69190612214565b3480156103bc57600080fd5b506103a361120d565b6102536103d3366004611bb4565b611246565b3480156103e457600080fd5b506102266103f3366004611c8b565b611295565b34801561040457600080fd5b506101e46112ac565b34801561041957600080fd5b50610253610428366004611ca3565b6112bb565b61025361043b366004611bb4565b6112f5565b61025361044e366004611bb4565b611344565b60055481516040517f5b506a0000000000000000000000000000000000000000000000000000000000815260009283926001600160a01b0390911691635b506a00916104a1916004016121e8565b602060405180830381600087803b1580156104bb57600080fd5b505af11580156104cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f39190611f05565b156105195760405162461bcd60e51b8152600401610510906122e1565b60405180910390fd5b60035461052e906001600160a01b0316610c54565b9150816001600160a01b031663118e1c77846020015185604001516040518060400160405280600781526020017f536164646c65200000000000000000000000000000000000000000000000000081525087606001516040518060400160405280600981526020017f204c5020546f6b656e00000000000000000000000000000000000000000000008152506040516020016105cc93929190612037565b60408051808303601f1901815290829052606089015160808a015160a08b015160c08c015160015460e0808f0151908b901b7fffffffff0000000000000000000000000000000000000000000000000000000016885261063c9998976001600160a01b0390921691600401612153565b600060405180830381600087803b15801561065657600080fd5b505af115801561066a573d6000803e3d6000fd5b505050506000826001600160a01b0316635fd65f0f6040518163ffffffff1660e01b815260040160e06040518083038186803b1580156106a957600080fd5b505afa1580156106bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e19190611f1d565b9650505050505050826001600160a01b031663f2fde38b8561010001516040518263ffffffff1660e01b815260040161071a919061207a565b600060405180830381600087803b15801561073457600080fd5b505af1158015610748573d6000803e3d6000fd5b505060045461076292506001600160a01b03169050610c54565b60e08501516040517fc0c53b8b0000000000000000000000000000000000000000000000000000000081529193506001600160a01b0384169163c0c53b8b916107b191879086906004016121f1565b600060405180830381600087803b1580156107cb57600080fd5b505af11580156107df573d6000803e3d6000fd5b505060055460e08701516040517f450efe21000000000000000000000000000000000000000000000000000000008152606094506001600160a01b03909216925063450efe2191610833919060040161207a565b60006040518083038186803b15801561084b57600080fd5b505afa15801561085f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108879190810190611bf3565b9050606081516001876020015151030167ffffffffffffffff811180156108ad57600080fd5b506040519080825280602002602001820160405280156108d7578160200160208202803683370190505b506020870151519091507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0160005b81811015610952578760200151818151811061091e57fe5b602002602001015183828151811061093257fe5b6001600160a01b0390921660209283029190910190910152600101610906565b50805b82518110156109a057838282038151811061096c57fe5b602002602001015183828151811061098057fe5b6001600160a01b0390921660209283029190910190910152600101610955565b506109a96119e4565b5060408051610180810182526001600160a01b038089168252868116602080840191909152610120808c015160ff16848601528b51606085015260025483166080850152908b01805160a085015260c0840187905260e0808d015184169085015291891661010084015260009083018190526101408301819052610160830152519151909133917f0838512b7934222cec571cf3fde1cf3e9e864bbc431bd5d1ef4d9ed3079093d991610a5e918b91906120a8565b60405180910390a2336001600160a01b03167f0838512b7934222cec571cf3fde1cf3e9e864bbc431bd5d1ef4d9ed3079093d98785604051610aa19291906120a8565b60405180910390a26005546040517f8a754bbe0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690638a754bbe90610af2908490600401612542565b600060405180830381600087803b158015610b0c57600080fd5b505af1158015610b20573d6000803e3d6000fd5b505050505050505050915091565b6004546001600160a01b031681565b6001546001600160a01b031681565b6000818152602081905260409020600201545b919050565b600082815260208190526040902060020154610b82906103176113a8565b610b9e5760405162461bcd60e51b815260040161051090612284565b610ba882826113ac565b5050565b6005546001600160a01b031681565b610bc36113a8565b6001600160a01b0316816001600160a01b031614610bf35760405162461bcd60e51b8152600401610510906124e5565b610ba88282611415565b6003546001600160a01b031681565b7f506f6f6c5265676973747279000000000000000000000000000000000000000081565b7fe132a6a517694e2454dc663f0d4fa738f94e7c1bd06c8950d14f9db8832494bd81565b6000610c5f8261147e565b9050816001600160a01b03167f3bf919a220a0f12ddcaf77fd06ffa4b9c728617774936f0d78b452010319c82482604051610c9a919061207a565b60405180910390a2919050565b6000828152602081905260408120610cbf9083611504565b90505b92915050565b6000828152602081905260408120610cbf9083611510565b610d0a7fe132a6a517694e2454dc663f0d4fa738f94e7c1bd06c8950d14f9db8832494bd33610cc8565b610d265760405162461bcd60e51b81526004016105109061234f565b610d2f81611525565b50565b600081565b610d607f00000000000000000000000000000000000000000000000000000000000000006115ad565b565b7f000000000000000000000000000000000000000000000000000000000000000081565b60055481516040517f5b506a000000000000000000000000000000000000000000000000000000000081526000926001600160a01b031691635b506a0091610dd191906004016121e8565b602060405180830381600087803b158015610deb57600080fd5b505af1158015610dff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e239190611f05565b15610e405760405162461bcd60e51b8152600401610510906122e1565b600254600090610e58906001600160a01b0316610c54565b9050806001600160a01b031663b28cb6dc846020015185604001516040518060400160405280600781526020017f536164646c65200000000000000000000000000000000000000000000000000081525087606001516040518060400160405280600981526020017f204c5020546f6b656e0000000000000000000000000000000000000000000000815250604051602001610ef693929190612037565b60408051601f1981840301815290829052606089015160808a015160a08b015160c08c01516001547fffffffff0000000000000000000000000000000000000000000000000000000060e08b901b168752610f619897966001600160a01b03909116906004016120d2565b600060405180830381600087803b158015610f7b57600080fd5b505af1158015610f8f573d6000803e3d6000fd5b50505060e08401516040517ff2fde38b0000000000000000000000000000000000000000000000000000000081526001600160a01b038416925063f2fde38b91610fdb9160040161207a565b600060405180830381600087803b158015610ff557600080fd5b505af1158015611009573d6000803e3d6000fd5b505050506000816001600160a01b0316635fd65f0f6040518163ffffffff1660e01b815260040160e06040518083038186803b15801561104857600080fd5b505afa15801561105c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110809190611f1d565b96505050505050506110906119e4565b5060408051610180810182526001600160a01b0384811682528381166020808401919091526101008881015160ff1684860152885160608501526002549092166080840152878101805160a085015284516000808252928101865260c085015260e0840182905291830181905261012083018190526101408301819052610160830152519151909133917f0838512b7934222cec571cf3fde1cf3e9e864bbc431bd5d1ef4d9ed3079093d991611148918791906120a8565b60405180910390a26005546040517f8a754bbe0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690638a754bbe90611199908490600401612542565b600060405180830381600087803b1580156111b357600080fd5b505af11580156111c7573d6000803e3d6000fd5b5094979650505050505050565b6040518060400160405280600981526020017f204c5020546f6b656e000000000000000000000000000000000000000000000081525081565b6040518060400160405280600781526020017f536164646c65200000000000000000000000000000000000000000000000000081525081565b6112707fe132a6a517694e2454dc663f0d4fa738f94e7c1bd06c8950d14f9db8832494bd33610cc8565b61128c5760405162461bcd60e51b81526004016105109061234f565b610d2f8161169d565b6000818152602081905260408120610cc290611725565b6002546001600160a01b031681565b6000828152602081905260409020600201546112d9906103176113a8565b610bf35760405162461bcd60e51b815260040161051090612386565b61131f7fe132a6a517694e2454dc663f0d4fa738f94e7c1bd06c8950d14f9db8832494bd33610cc8565b61133b5760405162461bcd60e51b81526004016105109061234f565b610d2f81611730565b61136e7fe132a6a517694e2454dc663f0d4fa738f94e7c1bd06c8950d14f9db8832494bd33610cc8565b61138a5760405162461bcd60e51b81526004016105109061234f565b610d2f816117b8565b6000610cbf836001600160a01b038416611840565b3390565b60008281526020819052604090206113c49082611393565b15610ba8576113d16113a8565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600082815260208190526040902061142d908261188a565b15610ba85761143a6113a8565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f09150506001600160a01b038116610b5f5760405162461bcd60e51b8152600401610510906123e3565b6000610cbf838361189f565b6000610cbf836001600160a01b0384166118e4565b6001600160a01b03811661154b5760405162461bcd60e51b815260040161051090612451565b600480547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040517f768ccdac0361ba56b697aa598fdd415f51a59d121b9d2b50714d3072cc4a8f1790600090a250565b6040517f3705f6250000000000000000000000000000000000000000000000000000000081526001600160a01b03821690633705f62590611612907f506f6f6c52656769737472790000000000000000000000000000000000000000906004016121e8565b60206040518083038186803b15801561162a57600080fd5b505afa15801561163e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116629190611bd7565b600580547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039290921691909117905550565b6001600160a01b0381166116c35760405162461bcd60e51b8152600401610510906124ae565b600380547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040517f06fc5602fc767cbb172d176a4cd0531d747abbdd090065ebd7b63ee4d2f0b44d90600090a250565b6000610cc2826118fc565b6001600160a01b0381166117565760405162461bcd60e51b81526004016105109061241a565b600280547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040517f6c149d1850b03102a8ac77fc865c12f017f4fb8bf9f9af345d36b0e8b60bcc8590600090a250565b6001600160a01b0381166117de5760405162461bcd60e51b815260040161051090612318565b600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040517f336ea638298c0cea1e72c71ed04716bef23a7a6251478299d7ca4067fea0c47990600090a250565b600061184c83836118e4565b61188257508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610cc2565b506000610cc2565b6000610cbf836001600160a01b038416611900565b815460009082106118c25760405162461bcd60e51b815260040161051090612227565b8260000182815481106118d157fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b600081815260018301602052604081205480156119da5783547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808301919081019060009087908390811061195157fe5b906000526020600020015490508087600001848154811061196e57fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061199e57fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610cc2565b6000915050610cc2565b604080516101808101825260008082526020820181905291810182905260608082018390526080820183905260a0820181905260c082015260e0810182905261010081018290526101208101829052610140810182905261016081019190915290565b8035610cc2816126b7565b600082601f830112611a62578081fd5b8135611a75611a7082612667565b612640565b818152915060208083019084810181840286018201871015611a9657600080fd5b60005b84811015611abe578135611aac816126b7565b84529282019290820190600101611a99565b505050505092915050565b600082601f830112611ad9578081fd5b8135611ae7611a7082612667565b818152915060208083019084810181840286018201871015611b0857600080fd5b60005b84811015611abe57611b1d8883611ba3565b84529282019290820190600101611b0b565b8051610cc2816126b7565b600082601f830112611b4a578081fd5b813567ffffffffffffffff811115611b60578182fd5b611b736020601f19601f84011601612640565b9150808252836020828501011115611b8a57600080fd5b8060208401602084013760009082016020015292915050565b803560ff81168114610cc257600080fd5b600060208284031215611bc5578081fd5b8135611bd0816126b7565b9392505050565b600060208284031215611be8578081fd5b8151611bd0816126b7565b60006020808385031215611c05578182fd5b825167ffffffffffffffff811115611c1b578283fd5b8301601f81018513611c2b578283fd5b8051611c39611a7082612667565b8181528381019083850185840285018601891015611c55578687fd5b8694505b83851015611c7f57611c6b8982611b2f565b835260019490940193918501918501611c59565b50979650505050505050565b600060208284031215611c9c578081fd5b5035919050565b60008060408385031215611cb5578081fd5b823591506020830135611cc7816126b7565b809150509250929050565b60008060408385031215611ce4578182fd5b50508035926020909101359150565b600060208284031215611d04578081fd5b813567ffffffffffffffff80821115611d1b578283fd5b8184019150610140808387031215611d31578384fd5b611d3a81612640565b905082358152602083013582811115611d51578485fd5b611d5d87828601611a52565b602083015250604083013582811115611d74578485fd5b611d8087828601611ac9565b604083015250606083013582811115611d97578485fd5b611da387828601611b3a565b6060830152506080830135608082015260a083013560a082015260c083013560c0820152611dd48660e08501611a47565b60e08201526101009150611dea86838501611a47565b828201526101209150611dff86838501611ba3565b91810191909152949350505050565b600060208284031215611e1f578081fd5b813567ffffffffffffffff80821115611e36578283fd5b8184019150610120808387031215611e4c578384fd5b611e5581612640565b905082358152602083013582811115611e6c578485fd5b611e7887828601611a52565b602083015250604083013582811115611e8f578485fd5b611e9b87828601611ac9565b604083015250606083013582811115611eb2578485fd5b611ebe87828601611b3a565b6060830152506080830135608082015260a083013560a082015260c083013560c0820152611eef8660e08501611a47565b60e08201526101009150611dff86838501611ba3565b600060208284031215611f16578081fd5b5051919050565b600080600080600080600060e0888a031215611f37578283fd5b875196506020880151955060408801519450606088015193506080880151925060a0880151915060c0880151611f6c816126b7565b8091505092959891949750929550565b6001600160a01b03169052565b6000815180845260208085019450808401835b83811015611fc15781516001600160a01b031687529582019590820190600101611f9c565b509495945050505050565b6000815180845260208085019450808401835b83811015611fc157815160ff1687529582019590820190600101611fdf565b15159052565b6000815180845261201c816020860160208601612687565b601f01601f19169290920160200192915050565b60ff169052565b60008451612049818460208901612687565b84519083019061205d818360208901612687565b8451910190612070818360208801612687565b0195945050505050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b60006001600160a01b0384168252604060208301526120ca6040830184611f89565b949350505050565b60006101008083526120e68184018c611f89565b905082810360208401526120fa818b611fcc565b9050828103604084015261210e818a612004565b905082810360608401526121228189612004565b9150508560808301528460a08301528360c08301526001600160a01b03831660e08301529998505050505050505050565b60006101208083526121678184018d611f89565b9050828103602084015261217b818c611fcc565b9050828103604084015261218f818b612004565b905082810360608401526121a3818a612004565b6080840198909852505060a081019490945260c08401929092526001600160a01b0390811660e08401521661010090910152949350505050565b901515815260200190565b90815260200190565b6001600160a01b0393841681529183166020830152909116604082015260600190565b600060208252610cbf6020830184612004565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e60408201527f6473000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201527f2061646d696e20746f206772616e740000000000000000000000000000000000606082015260800190565b60208082526018908201527f706f6f6c206e616d6520616c7265616479206578697374730000000000000000604082015260600190565b6020808252601a908201527f546172676574204c50546f6b656e2063616e6e6f742062652030000000000000604082015260600190565b6020808252600c908201527f6f6e6c79206d616e616765720000000000000000000000000000000000000000604082015260600190565b60208082526030908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201527f2061646d696e20746f207265766f6b6500000000000000000000000000000000606082015260800190565b60208082526016908201527f455243313136373a20637265617465206661696c656400000000000000000000604082015260600190565b60208082526017908201527f54617267657420537761702063616e6e6f742062652030000000000000000000604082015260600190565b60208082526022908201527f546172676574204d657461537761704465706f7369742063616e6e6f7420626560408201527f2030000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601b908201527f546172676574204d657461537761702063616e6e6f7420626520300000000000604082015260600190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201527f20726f6c657320666f722073656c660000000000000000000000000000000000606082015260800190565b600060208252612556602083018451611f7c565b60208301516125686040840182611f7c565b50604083015161257b6060840182612030565b5060608301516080830152608083015161259860a0840182611f7c565b5060a08301516101808060c08501526125b56101a0850183611f89565b915060c0850151601f198584030160e08601526125d28382611f89565b92505060e08501516101006125e981870183611f7c565b86015190506101206125fd86820183611f7c565b860151905061014061261186820183611ffe565b860151905061016061262586820183611ffe565b860151905061263685830182611ffe565b5090949350505050565b60405181810167ffffffffffffffff8111828210171561265f57600080fd5b604052919050565b600067ffffffffffffffff82111561267d578081fd5b5060209081020190565b60005b838110156126a257818101518382015260200161268a565b838111156126b1576000848401525b50505050565b6001600160a01b0381168114610d2f57600080fdfea2646970667358221220d56422b9e463c0dcb41b8cca0dcd51818946ab0781666fb5f3badcc92cb3841564736f6c634300060c0033",
  "deployedBytecode": "0x6080604052600436106101a05760003560e01c8063a132d9b5116100e1578063b636f24a1161008a578063cce061e011610064578063cce061e0146103f8578063d547741f1461040d578063df0c1cf01461042d578063e1a58c3d14610440576101a0565b8063b636f24a146103b0578063bbe7d6b7146103c5578063ca15c873146103d8576101a0565b8063ac841ed9116100bb578063ac841ed914610366578063afa9502e1461037b578063b3a316b01461038e576101a0565b8063a132d9b514610329578063a217fddf1461033c578063a50d7d8514610351576101a0565b806336568abe1161014e5780636d2f2246116101285780636d2f2246146102b45780638124b78e146102c95780639010d07c146102dc57806391d14854146102fc576101a0565b806336568abe1461026a5780633c7958401461028a5780634f8d446b1461029f576101a0565b8063248a9ca31161017f578063248a9ca3146102065780632f2ff15d1461023357806333ba0efc14610255576101a0565b8062fc2fc0146101a55780630831cbb7146101cf57806321fcbe05146101f1575b600080fd5b6101b86101b3366004611cf3565b610453565b6040516101c692919061208e565b60405180910390f35b3480156101db57600080fd5b506101e4610b2e565b6040516101c6919061207a565b3480156101fd57600080fd5b506101e4610b3d565b34801561021257600080fd5b50610226610221366004611c8b565b610b4c565b6040516101c691906121e8565b34801561023f57600080fd5b5061025361024e366004611ca3565b610b64565b005b34801561026157600080fd5b506101e4610bac565b34801561027657600080fd5b50610253610285366004611ca3565b610bbb565b34801561029657600080fd5b506101e4610bfd565b3480156102ab57600080fd5b50610226610c0c565b3480156102c057600080fd5b50610226610c30565b6101e46102d7366004611bb4565b610c54565b3480156102e857600080fd5b506101e46102f7366004611cd2565b610ca7565b34801561030857600080fd5b5061031c610317366004611ca3565b610cc8565b6040516101c691906121dd565b610253610337366004611bb4565b610ce0565b34801561034857600080fd5b50610226610d32565b34801561035d57600080fd5b50610253610d37565b34801561037257600080fd5b506101e4610d62565b6101e4610389366004611e0e565b610d86565b34801561039a57600080fd5b506103a36111d4565b6040516101c69190612214565b3480156103bc57600080fd5b506103a361120d565b6102536103d3366004611bb4565b611246565b3480156103e457600080fd5b506102266103f3366004611c8b565b611295565b34801561040457600080fd5b506101e46112ac565b34801561041957600080fd5b50610253610428366004611ca3565b6112bb565b61025361043b366004611bb4565b6112f5565b61025361044e366004611bb4565b611344565b60055481516040517f5b506a0000000000000000000000000000000000000000000000000000000000815260009283926001600160a01b0390911691635b506a00916104a1916004016121e8565b602060405180830381600087803b1580156104bb57600080fd5b505af11580156104cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f39190611f05565b156105195760405162461bcd60e51b8152600401610510906122e1565b60405180910390fd5b60035461052e906001600160a01b0316610c54565b9150816001600160a01b031663118e1c77846020015185604001516040518060400160405280600781526020017f536164646c65200000000000000000000000000000000000000000000000000081525087606001516040518060400160405280600981526020017f204c5020546f6b656e00000000000000000000000000000000000000000000008152506040516020016105cc93929190612037565b60408051808303601f1901815290829052606089015160808a015160a08b015160c08c015160015460e0808f0151908b901b7fffffffff0000000000000000000000000000000000000000000000000000000016885261063c9998976001600160a01b0390921691600401612153565b600060405180830381600087803b15801561065657600080fd5b505af115801561066a573d6000803e3d6000fd5b505050506000826001600160a01b0316635fd65f0f6040518163ffffffff1660e01b815260040160e06040518083038186803b1580156106a957600080fd5b505afa1580156106bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e19190611f1d565b9650505050505050826001600160a01b031663f2fde38b8561010001516040518263ffffffff1660e01b815260040161071a919061207a565b600060405180830381600087803b15801561073457600080fd5b505af1158015610748573d6000803e3d6000fd5b505060045461076292506001600160a01b03169050610c54565b60e08501516040517fc0c53b8b0000000000000000000000000000000000000000000000000000000081529193506001600160a01b0384169163c0c53b8b916107b191879086906004016121f1565b600060405180830381600087803b1580156107cb57600080fd5b505af11580156107df573d6000803e3d6000fd5b505060055460e08701516040517f450efe21000000000000000000000000000000000000000000000000000000008152606094506001600160a01b03909216925063450efe2191610833919060040161207a565b60006040518083038186803b15801561084b57600080fd5b505afa15801561085f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108879190810190611bf3565b9050606081516001876020015151030167ffffffffffffffff811180156108ad57600080fd5b506040519080825280602002602001820160405280156108d7578160200160208202803683370190505b506020870151519091507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0160005b81811015610952578760200151818151811061091e57fe5b602002602001015183828151811061093257fe5b6001600160a01b0390921660209283029190910190910152600101610906565b50805b82518110156109a057838282038151811061096c57fe5b602002602001015183828151811061098057fe5b6001600160a01b0390921660209283029190910190910152600101610955565b506109a96119e4565b5060408051610180810182526001600160a01b038089168252868116602080840191909152610120808c015160ff16848601528b51606085015260025483166080850152908b01805160a085015260c0840187905260e0808d015184169085015291891661010084015260009083018190526101408301819052610160830152519151909133917f0838512b7934222cec571cf3fde1cf3e9e864bbc431bd5d1ef4d9ed3079093d991610a5e918b91906120a8565b60405180910390a2336001600160a01b03167f0838512b7934222cec571cf3fde1cf3e9e864bbc431bd5d1ef4d9ed3079093d98785604051610aa19291906120a8565b60405180910390a26005546040517f8a754bbe0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690638a754bbe90610af2908490600401612542565b600060405180830381600087803b158015610b0c57600080fd5b505af1158015610b20573d6000803e3d6000fd5b505050505050505050915091565b6004546001600160a01b031681565b6001546001600160a01b031681565b6000818152602081905260409020600201545b919050565b600082815260208190526040902060020154610b82906103176113a8565b610b9e5760405162461bcd60e51b815260040161051090612284565b610ba882826113ac565b5050565b6005546001600160a01b031681565b610bc36113a8565b6001600160a01b0316816001600160a01b031614610bf35760405162461bcd60e51b8152600401610510906124e5565b610ba88282611415565b6003546001600160a01b031681565b7f506f6f6c5265676973747279000000000000000000000000000000000000000081565b7fe132a6a517694e2454dc663f0d4fa738f94e7c1bd06c8950d14f9db8832494bd81565b6000610c5f8261147e565b9050816001600160a01b03167f3bf919a220a0f12ddcaf77fd06ffa4b9c728617774936f0d78b452010319c82482604051610c9a919061207a565b60405180910390a2919050565b6000828152602081905260408120610cbf9083611504565b90505b92915050565b6000828152602081905260408120610cbf9083611510565b610d0a7fe132a6a517694e2454dc663f0d4fa738f94e7c1bd06c8950d14f9db8832494bd33610cc8565b610d265760405162461bcd60e51b81526004016105109061234f565b610d2f81611525565b50565b600081565b610d607f00000000000000000000000000000000000000000000000000000000000000006115ad565b565b7f000000000000000000000000000000000000000000000000000000000000000081565b60055481516040517f5b506a000000000000000000000000000000000000000000000000000000000081526000926001600160a01b031691635b506a0091610dd191906004016121e8565b602060405180830381600087803b158015610deb57600080fd5b505af1158015610dff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e239190611f05565b15610e405760405162461bcd60e51b8152600401610510906122e1565b600254600090610e58906001600160a01b0316610c54565b9050806001600160a01b031663b28cb6dc846020015185604001516040518060400160405280600781526020017f536164646c65200000000000000000000000000000000000000000000000000081525087606001516040518060400160405280600981526020017f204c5020546f6b656e0000000000000000000000000000000000000000000000815250604051602001610ef693929190612037565b60408051601f1981840301815290829052606089015160808a015160a08b015160c08c01516001547fffffffff0000000000000000000000000000000000000000000000000000000060e08b901b168752610f619897966001600160a01b03909116906004016120d2565b600060405180830381600087803b158015610f7b57600080fd5b505af1158015610f8f573d6000803e3d6000fd5b50505060e08401516040517ff2fde38b0000000000000000000000000000000000000000000000000000000081526001600160a01b038416925063f2fde38b91610fdb9160040161207a565b600060405180830381600087803b158015610ff557600080fd5b505af1158015611009573d6000803e3d6000fd5b505050506000816001600160a01b0316635fd65f0f6040518163ffffffff1660e01b815260040160e06040518083038186803b15801561104857600080fd5b505afa15801561105c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110809190611f1d565b96505050505050506110906119e4565b5060408051610180810182526001600160a01b0384811682528381166020808401919091526101008881015160ff1684860152885160608501526002549092166080840152878101805160a085015284516000808252928101865260c085015260e0840182905291830181905261012083018190526101408301819052610160830152519151909133917f0838512b7934222cec571cf3fde1cf3e9e864bbc431bd5d1ef4d9ed3079093d991611148918791906120a8565b60405180910390a26005546040517f8a754bbe0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690638a754bbe90611199908490600401612542565b600060405180830381600087803b1580156111b357600080fd5b505af11580156111c7573d6000803e3d6000fd5b5094979650505050505050565b6040518060400160405280600981526020017f204c5020546f6b656e000000000000000000000000000000000000000000000081525081565b6040518060400160405280600781526020017f536164646c65200000000000000000000000000000000000000000000000000081525081565b6112707fe132a6a517694e2454dc663f0d4fa738f94e7c1bd06c8950d14f9db8832494bd33610cc8565b61128c5760405162461bcd60e51b81526004016105109061234f565b610d2f8161169d565b6000818152602081905260408120610cc290611725565b6002546001600160a01b031681565b6000828152602081905260409020600201546112d9906103176113a8565b610bf35760405162461bcd60e51b815260040161051090612386565b61131f7fe132a6a517694e2454dc663f0d4fa738f94e7c1bd06c8950d14f9db8832494bd33610cc8565b61133b5760405162461bcd60e51b81526004016105109061234f565b610d2f81611730565b61136e7fe132a6a517694e2454dc663f0d4fa738f94e7c1bd06c8950d14f9db8832494bd33610cc8565b61138a5760405162461bcd60e51b81526004016105109061234f565b610d2f816117b8565b6000610cbf836001600160a01b038416611840565b3390565b60008281526020819052604090206113c49082611393565b15610ba8576113d16113a8565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600082815260208190526040902061142d908261188a565b15610ba85761143a6113a8565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f09150506001600160a01b038116610b5f5760405162461bcd60e51b8152600401610510906123e3565b6000610cbf838361189f565b6000610cbf836001600160a01b0384166118e4565b6001600160a01b03811661154b5760405162461bcd60e51b815260040161051090612451565b600480547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040517f768ccdac0361ba56b697aa598fdd415f51a59d121b9d2b50714d3072cc4a8f1790600090a250565b6040517f3705f6250000000000000000000000000000000000000000000000000000000081526001600160a01b03821690633705f62590611612907f506f6f6c52656769737472790000000000000000000000000000000000000000906004016121e8565b60206040518083038186803b15801561162a57600080fd5b505afa15801561163e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116629190611bd7565b600580547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039290921691909117905550565b6001600160a01b0381166116c35760405162461bcd60e51b8152600401610510906124ae565b600380547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040517f06fc5602fc767cbb172d176a4cd0531d747abbdd090065ebd7b63ee4d2f0b44d90600090a250565b6000610cc2826118fc565b6001600160a01b0381166117565760405162461bcd60e51b81526004016105109061241a565b600280547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040517f6c149d1850b03102a8ac77fc865c12f017f4fb8bf9f9af345d36b0e8b60bcc8590600090a250565b6001600160a01b0381166117de5760405162461bcd60e51b815260040161051090612318565b600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040517f336ea638298c0cea1e72c71ed04716bef23a7a6251478299d7ca4067fea0c47990600090a250565b600061184c83836118e4565b61188257508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610cc2565b506000610cc2565b6000610cbf836001600160a01b038416611900565b815460009082106118c25760405162461bcd60e51b815260040161051090612227565b8260000182815481106118d157fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b600081815260018301602052604081205480156119da5783547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808301919081019060009087908390811061195157fe5b906000526020600020015490508087600001848154811061196e57fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061199e57fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610cc2565b6000915050610cc2565b604080516101808101825260008082526020820181905291810182905260608082018390526080820183905260a0820181905260c082015260e0810182905261010081018290526101208101829052610140810182905261016081019190915290565b8035610cc2816126b7565b600082601f830112611a62578081fd5b8135611a75611a7082612667565b612640565b818152915060208083019084810181840286018201871015611a9657600080fd5b60005b84811015611abe578135611aac816126b7565b84529282019290820190600101611a99565b505050505092915050565b600082601f830112611ad9578081fd5b8135611ae7611a7082612667565b818152915060208083019084810181840286018201871015611b0857600080fd5b60005b84811015611abe57611b1d8883611ba3565b84529282019290820190600101611b0b565b8051610cc2816126b7565b600082601f830112611b4a578081fd5b813567ffffffffffffffff811115611b60578182fd5b611b736020601f19601f84011601612640565b9150808252836020828501011115611b8a57600080fd5b8060208401602084013760009082016020015292915050565b803560ff81168114610cc257600080fd5b600060208284031215611bc5578081fd5b8135611bd0816126b7565b9392505050565b600060208284031215611be8578081fd5b8151611bd0816126b7565b60006020808385031215611c05578182fd5b825167ffffffffffffffff811115611c1b578283fd5b8301601f81018513611c2b578283fd5b8051611c39611a7082612667565b8181528381019083850185840285018601891015611c55578687fd5b8694505b83851015611c7f57611c6b8982611b2f565b835260019490940193918501918501611c59565b50979650505050505050565b600060208284031215611c9c578081fd5b5035919050565b60008060408385031215611cb5578081fd5b823591506020830135611cc7816126b7565b809150509250929050565b60008060408385031215611ce4578182fd5b50508035926020909101359150565b600060208284031215611d04578081fd5b813567ffffffffffffffff80821115611d1b578283fd5b8184019150610140808387031215611d31578384fd5b611d3a81612640565b905082358152602083013582811115611d51578485fd5b611d5d87828601611a52565b602083015250604083013582811115611d74578485fd5b611d8087828601611ac9565b604083015250606083013582811115611d97578485fd5b611da387828601611b3a565b6060830152506080830135608082015260a083013560a082015260c083013560c0820152611dd48660e08501611a47565b60e08201526101009150611dea86838501611a47565b828201526101209150611dff86838501611ba3565b91810191909152949350505050565b600060208284031215611e1f578081fd5b813567ffffffffffffffff80821115611e36578283fd5b8184019150610120808387031215611e4c578384fd5b611e5581612640565b905082358152602083013582811115611e6c578485fd5b611e7887828601611a52565b602083015250604083013582811115611e8f578485fd5b611e9b87828601611ac9565b604083015250606083013582811115611eb2578485fd5b611ebe87828601611b3a565b6060830152506080830135608082015260a083013560a082015260c083013560c0820152611eef8660e08501611a47565b60e08201526101009150611dff86838501611ba3565b600060208284031215611f16578081fd5b5051919050565b600080600080600080600060e0888a031215611f37578283fd5b875196506020880151955060408801519450606088015193506080880151925060a0880151915060c0880151611f6c816126b7565b8091505092959891949750929550565b6001600160a01b03169052565b6000815180845260208085019450808401835b83811015611fc15781516001600160a01b031687529582019590820190600101611f9c565b509495945050505050565b6000815180845260208085019450808401835b83811015611fc157815160ff1687529582019590820190600101611fdf565b15159052565b6000815180845261201c816020860160208601612687565b601f01601f19169290920160200192915050565b60ff169052565b60008451612049818460208901612687565b84519083019061205d818360208901612687565b8451910190612070818360208801612687565b0195945050505050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b60006001600160a01b0384168252604060208301526120ca6040830184611f89565b949350505050565b60006101008083526120e68184018c611f89565b905082810360208401526120fa818b611fcc565b9050828103604084015261210e818a612004565b905082810360608401526121228189612004565b9150508560808301528460a08301528360c08301526001600160a01b03831660e08301529998505050505050505050565b60006101208083526121678184018d611f89565b9050828103602084015261217b818c611fcc565b9050828103604084015261218f818b612004565b905082810360608401526121a3818a612004565b6080840198909852505060a081019490945260c08401929092526001600160a01b0390811660e08401521661010090910152949350505050565b901515815260200190565b90815260200190565b6001600160a01b0393841681529183166020830152909116604082015260600190565b600060208252610cbf6020830184612004565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e60408201527f6473000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201527f2061646d696e20746f206772616e740000000000000000000000000000000000606082015260800190565b60208082526018908201527f706f6f6c206e616d6520616c7265616479206578697374730000000000000000604082015260600190565b6020808252601a908201527f546172676574204c50546f6b656e2063616e6e6f742062652030000000000000604082015260600190565b6020808252600c908201527f6f6e6c79206d616e616765720000000000000000000000000000000000000000604082015260600190565b60208082526030908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201527f2061646d696e20746f207265766f6b6500000000000000000000000000000000606082015260800190565b60208082526016908201527f455243313136373a20637265617465206661696c656400000000000000000000604082015260600190565b60208082526017908201527f54617267657420537761702063616e6e6f742062652030000000000000000000604082015260600190565b60208082526022908201527f546172676574204d657461537761704465706f7369742063616e6e6f7420626560408201527f2030000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601b908201527f546172676574204d657461537761702063616e6e6f7420626520300000000000604082015260600190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201527f20726f6c657320666f722073656c660000000000000000000000000000000000606082015260800190565b600060208252612556602083018451611f7c565b60208301516125686040840182611f7c565b50604083015161257b6060840182612030565b5060608301516080830152608083015161259860a0840182611f7c565b5060a08301516101808060c08501526125b56101a0850183611f89565b915060c0850151601f198584030160e08601526125d28382611f89565b92505060e08501516101006125e981870183611f7c565b86015190506101206125fd86820183611f7c565b860151905061014061261186820183611ffe565b860151905061016061262586820183611ffe565b860151905061263685830182611ffe565b5090949350505050565b60405181810167ffffffffffffffff8111828210171561265f57600080fd5b604052919050565b600067ffffffffffffffff82111561267d578081fd5b5060209081020190565b60005b838110156126a257818101518382015260200161268a565b838111156126b1576000848401525b50505050565b6001600160a01b0381168114610d2f57600080fdfea2646970667358221220d56422b9e463c0dcb41b8cca0dcd51818946ab0781666fb5f3badcc92cb3841564736f6c634300060c0033",
  "devdoc": {
    "events": {
      "NewSwapPool(address,address,address[])": {
        "params": {
          "deployer": "address of the deployer",
          "pooledTokens": ", array of addresses of the tokens in the pool",
          "swapAddress": "address of the deployed pool"
        }
      },
      "PoolRegistryUpdated(address)": {
        "params": {
          "poolRegistry": "address of the current Saddle Pool Registry"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "clone(address)": {
        "params": {
          "target": "the address of the target pool to be cloned"
        },
        "returns": {
          "newClone": "an address of the cloned pool"
        }
      },
      "deployMetaSwap((bytes32,address[],uint8[],string,uint256,uint256,uint256,address,address,uint8))": {
        "params": {
          "input": ", a DeployMetaSwapInput struct containing the input parameters for the meta pool."
        }
      },
      "deploySwap((bytes32,address[],uint8[],string,uint256,uint256,uint256,address,uint8))": {
        "params": {
          "input": ", a struct containing the input parameters for the pool to be deployed, must include a unique pool name."
        },
        "returns": {
          "deployedSwap": "the address of the deployed pool."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      }
    },
    "title": "PermissionlessDeployer",
    "version": 1
  },
  "userdoc": {
    "events": {
      "NewSwapPool(address,address,address[])": {
        "notice": "Emmited when a new pool is deployed"
      },
      "PoolRegistryUpdated(address)": {
        "notice": "Emmited when the pool registry cache is updated"
      }
    },
    "kind": "user",
    "methods": {
      "SADDLE_MANAGER_ROLE()": {
        "notice": "Role responsible for managing target addresses"
      },
      "clone(address)": {
        "notice": "Uses openzeppelin's clone mechanism to clone an existing a pool for cheaper deployments."
      },
      "deployMetaSwap((bytes32,address[],uint8[],string,uint256,uint256,uint256,address,address,uint8))": {
        "notice": "Deploys a new meta pool."
      },
      "deploySwap((bytes32,address[],uint8[],string,uint256,uint256,uint256,address,uint8))": {
        "notice": "Deploys a new pool, adds an entry in the Saddle Pool Registry."
      },
      "updatePoolRegistryCache()": {
        "notice": "Updates cached address of the pool registry **should be onlymanager?"
      }
    },
    "notice": "Allows for anyone to indepentantly deploy pools and meta pools of given tokens. A user will set custom parameters for the pool such as the trading/admin fees, as well as the a-parameter. Ownership of the pools are given to the deploying address. Saddle will collect 50% of the trading fees earned by the pool.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1726,
        "contract": "contracts/permissionless/PermissionlessDeployer.sol:PermissionlessDeployer",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)1722_storage)"
      },
      {
        "astId": 31861,
        "contract": "contracts/permissionless/PermissionlessDeployer.sol:PermissionlessDeployer",
        "label": "targetLPToken",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 31863,
        "contract": "contracts/permissionless/PermissionlessDeployer.sol:PermissionlessDeployer",
        "label": "targetSwap",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 31865,
        "contract": "contracts/permissionless/PermissionlessDeployer.sol:PermissionlessDeployer",
        "label": "targetMetaSwap",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 31867,
        "contract": "contracts/permissionless/PermissionlessDeployer.sol:PermissionlessDeployer",
        "label": "targetMetaSwapDeposit",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 31875,
        "contract": "contracts/permissionless/PermissionlessDeployer.sol:PermissionlessDeployer",
        "label": "poolRegistryCached",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IPoolRegistry)25070"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IPoolRegistry)25070": {
        "encoding": "inplace",
        "label": "contract IPoolRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)1722_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)1722_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)5815_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 5814,
            "contract": "contracts/permissionless/PermissionlessDeployer.sol:PermissionlessDeployer",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)5550_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)1722_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 1719,
            "contract": "contracts/permissionless/PermissionlessDeployer.sol:PermissionlessDeployer",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AddressSet)5815_storage"
          },
          {
            "astId": 1721,
            "contract": "contracts/permissionless/PermissionlessDeployer.sol:PermissionlessDeployer",
            "label": "adminRole",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)5550_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 5545,
            "contract": "contracts/permissionless/PermissionlessDeployer.sol:PermissionlessDeployer",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 5549,
            "contract": "contracts/permissionless/PermissionlessDeployer.sol:PermissionlessDeployer",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
