{
  "address": "0xDcD9d0456846F641F5547cA025aFe9ae560Cc61F",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenAmounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "fees",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "invariant",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpTokenSupply",
          "type": "uint256"
        }
      ],
      "name": "AddLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAdminFee",
          "type": "uint256"
        }
      ],
      "name": "NewAdminFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSwapFee",
          "type": "uint256"
        }
      ],
      "name": "NewSwapFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newWithdrawFee",
          "type": "uint256"
        }
      ],
      "name": "NewWithdrawFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "futureTime",
          "type": "uint256"
        }
      ],
      "name": "RampA",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenAmounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpTokenSupply",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenAmounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "fees",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "invariant",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpTokenSupply",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidityImbalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpTokenSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "boughtId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensBought",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidityOne",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "StopRampA",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensSold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensBought",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "soldId",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "boughtId",
          "type": "uint128"
        }
      ],
      "name": "TokenSwap",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "A_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_A",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_ADMIN_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_SWAP_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_WITHDRAW_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POOL_PRECISION_DECIMALS",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xfdad7690bbf8f11c1d62111343213c016bf415d0f97360f46c3e77e4825a553c",
  "receipt": {
    "to": null,
    "from": "0xF94082E14f339BA13592eE5CcfD46eEdA82B1FDb",
    "contractAddress": "0xDcD9d0456846F641F5547cA025aFe9ae560Cc61F",
    "transactionIndex": 3,
    "gasUsed": "4093094",
    "logsBloom": "0x
    "blockHash": "0xdfbdd122d684c2784ff50d3e4e3126f98d8b0b7c977d2a89dfe2a316cc83f331",
    "transactionHash": "0xfdad7690bbf8f11c1d62111343213c016bf415d0f97360f46c3e77e4825a553c",
    "logs": [],
    "blockNumber": 10454779,
    "cumulativeGasUsed": "5454701",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "8f41ed0bf5ed398a2f798685730bd171",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invariant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenSupply\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAdminFee\",\"type\":\"uint256\"}],\"name\":\"NewAdminFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSwapFee\",\"type\":\"uint256\"}],\"name\":\"NewSwapFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newWithdrawFee\",\"type\":\"uint256\"}],\"name\":\"NewWithdrawFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"futureTime\",\"type\":\"uint256\"}],\"name\":\"RampA\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenSupply\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invariant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenSupply\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidityImbalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"boughtId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensBought\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidityOne\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"StopRampA\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensBought\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"soldId\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"boughtId\",\"type\":\"uint128\"}],\"name\":\"TokenSwap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"A_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_A\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_ADMIN_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SWAP_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_WITHDRAW_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL_PRECISION_DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contracts relying on this library must initialize SwapUtils.Swap struct then use this library for SwapUtils.Swap struct. Note that this library contains both functions called by users and admins. Admin functions should be protected within contracts using this library.\",\"kind\":\"dev\",\"methods\":{\"addLiquidity(SwapUtilsGuarded.Swap storage,uint256[],uint256,bytes32[])\":{\"params\":{\"amounts\":\"the amounts of each token to add, in their native precision\",\"merkleProof\":\"bytes32 array that will be used to prove the existence of the caller's address in the list of allowed addresses. If the pool is not in the guarded launch phase, this parameter will be ignored.\",\"minToMint\":\"the minimum LP tokens adding this amount of liquidity should mint, otherwise revert. Handy for front-running mitigation\",\"self\":\"Swap struct to read from and write to\"},\"returns\":{\"_0\":\"amount of LP token user received\"}},\"calculateCurrentWithdrawFee(SwapUtilsGuarded.Swap storage,address)\":{\"params\":{\"user\":\"address you want to calculate withdraw fee of\"},\"returns\":{\"_0\":\"current withdraw fee of the user\"}},\"calculateRemoveLiquidity(SwapUtilsGuarded.Swap storage,address,uint256)\":{\"params\":{\"account\":\"the address that is removing liquidity. required for withdraw fee calculation\",\"amount\":\"the amount of LP tokens that would to be burned on withdrawal\"},\"returns\":{\"_0\":\"array of amounts of tokens user will receive\"}},\"calculateSwap(SwapUtilsGuarded.Swap storage,uint8,uint8,uint256)\":{\"params\":{\"dx\":\"the number of tokens to sell. If the token charges a fee on transfers, use the amount that gets transferred after the fee.\",\"self\":\"Swap struct to read from\",\"tokenIndexFrom\":\"the token to sell\",\"tokenIndexTo\":\"the token to buy\"},\"returns\":{\"dy\":\"the number of tokens the user will get\"}},\"calculateTokenAmount(SwapUtilsGuarded.Swap storage,address,uint256[],bool)\":{\"details\":\"This shouldn't be used outside frontends for user estimates.\",\"params\":{\"account\":\"address of the account depositing or withdrawing tokens\",\"amounts\":\"an array of token amounts to deposit or withdrawal, corresponding to pooledTokens. The amount should be in each pooled token's native precision. If a token charges a fee on transfers, use the amount that gets transferred after the fee.\",\"deposit\":\"whether this is a deposit or a withdrawal\",\"self\":\"Swap struct to read from\"},\"returns\":{\"_0\":\"if deposit was true, total amount of lp token that will be minted and if deposit was false, total amount of lp token that will be burned\"}},\"calculateWithdrawOneToken(SwapUtilsGuarded.Swap storage,address,uint256,uint8)\":{\"params\":{\"account\":\"the address that is withdrawing\",\"self\":\"Swap struct to read from\",\"tokenAmount\":\"the amount to withdraw in the pool's precision\",\"tokenIndex\":\"which token will be withdrawn\"},\"returns\":{\"_0\":\"the amount of token user will receive and the associated swap fee\"}},\"getA(SwapUtilsGuarded.Swap storage)\":{\"details\":\"See the StableSwap paper for details\",\"params\":{\"self\":\"Swap struct to read from\"},\"returns\":{\"_0\":\"A parameter\"}},\"getAPrecise(SwapUtilsGuarded.Swap storage)\":{\"details\":\"See the StableSwap paper for details\",\"params\":{\"self\":\"Swap struct to read from\"},\"returns\":{\"_0\":\"A parameter in its raw precision form\"}},\"getAdminBalance(SwapUtilsGuarded.Swap storage,uint256)\":{\"params\":{\"index\":\"Index of the pooled token\",\"self\":\"Swap struct to read from\"},\"returns\":{\"_0\":\"admin balance in the token's precision\"}},\"getDepositTimestamp(SwapUtilsGuarded.Swap storage,address)\":{\"params\":{\"self\":\"Swap struct to read from\"},\"returns\":{\"_0\":\"timestamp of last deposit\"}},\"getVirtualPrice(SwapUtilsGuarded.Swap storage)\":{\"params\":{\"self\":\"Swap struct to read from\"},\"returns\":{\"_0\":\"the virtual price, scaled to precision of POOL_PRECISION_DECIMALS\"}},\"rampA(SwapUtilsGuarded.Swap storage,uint256,uint256)\":{\"params\":{\"futureA_\":\"the new A to ramp towards\",\"futureTime_\":\"timestamp when the new A should be reached\",\"self\":\"Swap struct to update\"}},\"removeLiquidity(SwapUtilsGuarded.Swap storage,uint256,uint256[])\":{\"details\":\"Liquidity can always be removed, even when the pool is paused.\",\"params\":{\"amount\":\"the amount of LP tokens to burn\",\"minAmounts\":\"the minimum amounts of each token in the pool acceptable for this burn. Useful as a front-running mitigation\",\"self\":\"Swap struct to read from and write to\"},\"returns\":{\"_0\":\"amounts of tokens the user received\"}},\"removeLiquidityImbalance(SwapUtilsGuarded.Swap storage,uint256[],uint256)\":{\"params\":{\"amounts\":\"how much of each token to withdraw\",\"maxBurnAmount\":\"the max LP token provider is willing to pay to remove liquidity. Useful as a front-running mitigation.\",\"self\":\"Swap struct to read from and write to\"},\"returns\":{\"_0\":\"actual amount of LP tokens burned in the withdrawal\"}},\"removeLiquidityOneToken(SwapUtilsGuarded.Swap storage,uint256,uint8,uint256)\":{\"params\":{\"minAmount\":\"the minimum amount to withdraw, otherwise revert\",\"self\":\"Swap struct to read from and write to\",\"tokenAmount\":\"the amount of the lp tokens to burn\",\"tokenIndex\":\"the index of the token you want to receive\"},\"returns\":{\"_0\":\"amount chosen token that user received\"}},\"setAdminFee(SwapUtilsGuarded.Swap storage,uint256)\":{\"details\":\"adminFee cannot be higher than 100% of the swap fee\",\"params\":{\"newAdminFee\":\"new admin fee to be applied on future transactions\",\"self\":\"Swap struct to update\"}},\"setDefaultWithdrawFee(SwapUtilsGuarded.Swap storage,uint256)\":{\"params\":{\"newWithdrawFee\":\"new withdraw fee to be applied\",\"self\":\"Swap struct to update\"}},\"setSwapFee(SwapUtilsGuarded.Swap storage,uint256)\":{\"details\":\"fee cannot be higher than 1% of each swap\",\"params\":{\"newSwapFee\":\"new swap fee to be applied on future transactions\",\"self\":\"Swap struct to update\"}},\"stopRampA(SwapUtilsGuarded.Swap storage)\":{\"params\":{\"self\":\"Swap struct to update\"}},\"swap(SwapUtilsGuarded.Swap storage,uint8,uint8,uint256,uint256)\":{\"params\":{\"dx\":\"the amount of tokens the user wants to sell\",\"minDy\":\"the min amount the user would like to receive, or revert.\",\"self\":\"Swap struct to read from and write to\",\"tokenIndexFrom\":\"the token the user wants to sell\",\"tokenIndexTo\":\"the token the user wants to buy\"},\"returns\":{\"_0\":\"amount of token user received on swap\"}},\"updateUserWithdrawFee(SwapUtilsGuarded.Swap storage,address,uint256)\":{\"params\":{\"self\":\"Swap struct to read from and write to\",\"toMint\":\"amount of pool tokens to be minted\",\"user\":\"address of the user depositing tokens\"}},\"withdrawAdminFees(SwapUtilsGuarded.Swap storage,address)\":{\"params\":{\"self\":\"Swap struct to withdraw fees from\",\"to\":\"Address to send the fees to\"}}},\"title\":\"SwapUtils library\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLiquidity(SwapUtilsGuarded.Swap storage,uint256[],uint256,bytes32[])\":{\"notice\":\"Add liquidity to the pool\"},\"calculateCurrentWithdrawFee(SwapUtilsGuarded.Swap storage,address)\":{\"notice\":\"Calculate the fee that is applied when the given user withdraws. Withdraw fee decays linearly over 4 weeks.\"},\"calculateRemoveLiquidity(SwapUtilsGuarded.Swap storage,address,uint256)\":{\"notice\":\"A simple method to calculate amount of each underlying tokens that is returned upon burning given amount of LP tokens\"},\"calculateSwap(SwapUtilsGuarded.Swap storage,uint8,uint8,uint256)\":{\"notice\":\"Externally calculates a swap between two tokens.\"},\"calculateTokenAmount(SwapUtilsGuarded.Swap storage,address,uint256[],bool)\":{\"notice\":\"A simple method to calculate prices from deposits or withdrawals, excluding fees but including slippage. This is helpful as an input into the various \\\"min\\\" parameters on calls to fight front-running\"},\"calculateWithdrawOneToken(SwapUtilsGuarded.Swap storage,address,uint256,uint8)\":{\"notice\":\"Calculate the dy, the amount of selected token that user receives and the fee of withdrawing in one token\"},\"getA(SwapUtilsGuarded.Swap storage)\":{\"notice\":\"Return A, the amplification coefficient * n * (n - 1)\"},\"getAPrecise(SwapUtilsGuarded.Swap storage)\":{\"notice\":\"Return A in its raw precision\"},\"getAdminBalance(SwapUtilsGuarded.Swap storage,uint256)\":{\"notice\":\"return accumulated amount of admin fees of the token with given index\"},\"getDepositTimestamp(SwapUtilsGuarded.Swap storage,address)\":{\"notice\":\"Retrieves the timestamp of last deposit made by the given address\"},\"getVirtualPrice(SwapUtilsGuarded.Swap storage)\":{\"notice\":\"Get the virtual price, to help calculate profit\"},\"rampA(SwapUtilsGuarded.Swap storage,uint256,uint256)\":{\"notice\":\"Start ramping up or down A parameter towards given futureA_ and futureTime_ Checks if the change is too rapid, and commits the new A value only when it falls under the limit range.\"},\"removeLiquidity(SwapUtilsGuarded.Swap storage,uint256,uint256[])\":{\"notice\":\"Burn LP tokens to remove liquidity from the pool.\"},\"removeLiquidityImbalance(SwapUtilsGuarded.Swap storage,uint256[],uint256)\":{\"notice\":\"Remove liquidity from the pool, weighted differently than the pool's current balances.\"},\"removeLiquidityOneToken(SwapUtilsGuarded.Swap storage,uint256,uint8,uint256)\":{\"notice\":\"Remove liquidity from the pool all in one token.\"},\"setAdminFee(SwapUtilsGuarded.Swap storage,uint256)\":{\"notice\":\"Sets the admin fee\"},\"setDefaultWithdrawFee(SwapUtilsGuarded.Swap storage,uint256)\":{\"notice\":\"update the default withdraw fee. This also affects deposits made in the past as well.\"},\"setSwapFee(SwapUtilsGuarded.Swap storage,uint256)\":{\"notice\":\"update the swap fee\"},\"stopRampA(SwapUtilsGuarded.Swap storage)\":{\"notice\":\"Stops ramping A immediately. Once this function is called, rampA() cannot be called for another 24 hours\"},\"swap(SwapUtilsGuarded.Swap storage,uint8,uint8,uint256,uint256)\":{\"notice\":\"swap two tokens in the pool\"},\"updateUserWithdrawFee(SwapUtilsGuarded.Swap storage,address,uint256)\":{\"notice\":\"Update the withdraw fee for `user`. If the user is currently not providing liquidity in the pool, sets to default value. If not, recalculate the starting withdraw fee based on the last deposit's time & amount relative to the new deposit.\"},\"withdrawAdminFees(SwapUtilsGuarded.Swap storage,address)\":{\"notice\":\"withdraw all admin fees to a given address\"}},\"notice\":\"A library to be used within Swap.sol. Contains functions responsible for custody and AMM functionalities.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/guarded/SwapUtilsGuarded.sol\":\"SwapUtilsGuarded\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n\\n        _approve(account, _msgSender(), decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x9c0eb3b0e11d2480d49991dc384f1e5f9c9b9967cc81944d50916a9b9c6c4984\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/MathUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n/**\\n * @title MathUtils library\\n * @notice A library to be used in conjunction with SafeMath. Contains functions for calculating\\n * differences between two uint256.\\n */\\nlibrary MathUtils {\\n    /**\\n     * @notice Compares a and b and returns true if the difference between a and b\\n     *         is less than 1 or equal to each other.\\n     * @param a uint256 to compare with\\n     * @param b uint256 to compare with\\n     * @return True if the difference between a and b is less than 1 or equal,\\n     *         otherwise return false\\n     */\\n    function within1(uint256 a, uint256 b) internal pure returns (bool) {\\n        return (difference(a, b) <= 1);\\n    }\\n\\n    /**\\n     * @notice Calculates absolute difference between a and b\\n     * @param a uint256 to compare with\\n     * @param b uint256 to compare with\\n     * @return Difference between a and b\\n     */\\n    function difference(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a > b) {\\n            return a - b;\\n        }\\n        return b - a;\\n    }\\n}\\n\",\"keccak256\":\"0x455c798b26b679dff11a4ad5d52f7fef85c42d403bd430da443948f65cf000a0\",\"license\":\"MIT\"},\"contracts/guarded/LPTokenGuarded.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// https://etherscan.io/address/0xC28DF698475dEC994BE00C9C9D8658A548e6304F#code\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../interfaces/ISwapGuarded.sol\\\";\\n\\n/**\\n * @title Liquidity Provider Token\\n * @notice This token is an ERC20 detailed token with added capability to be minted by the owner.\\n * It is used to represent user's shares when providing liquidity to swap contracts.\\n */\\ncontract LPTokenGuarded is ERC20Burnable, Ownable {\\n    using SafeMath for uint256;\\n\\n    // Address of the swap contract that owns this LP token. When a user adds liquidity to the swap contract,\\n    // they receive a proportionate amount of this LPToken.\\n    ISwapGuarded public swap;\\n\\n    // Maps user account to total number of LPToken minted by them. Used to limit minting during guarded release phase\\n    mapping(address => uint256) public mintedAmounts;\\n\\n    /**\\n     * @notice Deploys LPToken contract with given name, symbol, and decimals\\n     * @dev the caller of this constructor will become the owner of this contract\\n     * @param name_ name of this token\\n     * @param symbol_ symbol of this token\\n     * @param decimals_ number of decimals this token will be based on\\n     */\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) public ERC20(name_, symbol_) {\\n        _setupDecimals(decimals_);\\n        swap = ISwapGuarded(_msgSender());\\n    }\\n\\n    /**\\n     * @notice Mints the given amount of LPToken to the recipient. During the guarded release phase, the total supply\\n     * and the maximum number of the tokens that a single account can mint are limited.\\n     * @dev only owner can call this mint function\\n     * @param recipient address of account to receive the tokens\\n     * @param amount amount of tokens to mint\\n     * @param merkleProof the bytes32 array data that is used to prove recipient's address exists in the merkle tree\\n     * stored in the allowlist contract. If the pool is not guarded, this parameter is ignored.\\n     */\\n    function mint(\\n        address recipient,\\n        uint256 amount,\\n        bytes32[] calldata merkleProof\\n    ) external onlyOwner {\\n        require(amount != 0, \\\"amount == 0\\\");\\n\\n        // If the pool is in the guarded launch phase, the following checks are done to restrict deposits.\\n        //   1. Check if the given merkleProof corresponds to the recipient's address in the merkle tree stored in the\\n        //      allowlist contract. If the account has been already verified, merkleProof is ignored.\\n        //   2. Limit the total number of this LPToken minted to recipient as defined by the allowlist contract.\\n        //   3. Limit the total supply of this LPToken as defined by the allowlist contract.\\n        if (swap.isGuarded()) {\\n            IAllowlist allowlist = swap.getAllowlist();\\n            require(\\n                allowlist.verifyAddress(recipient, merkleProof),\\n                \\\"Invalid merkle proof\\\"\\n            );\\n            uint256 totalMinted = mintedAmounts[recipient].add(amount);\\n            require(\\n                totalMinted <= allowlist.getPoolAccountLimit(address(swap)),\\n                \\\"account deposit limit\\\"\\n            );\\n            require(\\n                totalSupply().add(amount) <=\\n                    allowlist.getPoolCap(address(swap)),\\n                \\\"pool total supply limit\\\"\\n            );\\n            mintedAmounts[recipient] = totalMinted;\\n        }\\n        _mint(recipient, amount);\\n    }\\n\\n    /**\\n     * @dev Overrides ERC20._beforeTokenTransfer() which get called on every transfers including\\n     * minting and burning. This ensures that swap.updateUserWithdrawFees are called everytime.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override(ERC20) {\\n        super._beforeTokenTransfer(from, to, amount);\\n        swap.updateUserWithdrawFee(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x17375176244e496592737af5475e841507ee35e99000405fdb5f0e175b8f664f\",\"license\":\"MIT\"},\"contracts/guarded/SwapUtilsGuarded.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// https://etherscan.io/address/0x2b7a5a5923eca5c00c6572cf3e8e08384f563f93#code\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"./LPTokenGuarded.sol\\\";\\nimport \\\"../MathUtils.sol\\\";\\n\\n/**\\n * @title SwapUtils library\\n * @notice A library to be used within Swap.sol. Contains functions responsible for custody and AMM functionalities.\\n * @dev Contracts relying on this library must initialize SwapUtils.Swap struct then use this library\\n * for SwapUtils.Swap struct. Note that this library contains both functions called by users and admins.\\n * Admin functions should be protected within contracts using this library.\\n */\\nlibrary SwapUtilsGuarded {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    using MathUtils for uint256;\\n\\n    /*** EVENTS ***/\\n\\n    event TokenSwap(\\n        address indexed buyer,\\n        uint256 tokensSold,\\n        uint256 tokensBought,\\n        uint128 soldId,\\n        uint128 boughtId\\n    );\\n    event AddLiquidity(\\n        address indexed provider,\\n        uint256[] tokenAmounts,\\n        uint256[] fees,\\n        uint256 invariant,\\n        uint256 lpTokenSupply\\n    );\\n    event RemoveLiquidity(\\n        address indexed provider,\\n        uint256[] tokenAmounts,\\n        uint256 lpTokenSupply\\n    );\\n    event RemoveLiquidityOne(\\n        address indexed provider,\\n        uint256 lpTokenAmount,\\n        uint256 lpTokenSupply,\\n        uint256 boughtId,\\n        uint256 tokensBought\\n    );\\n    event RemoveLiquidityImbalance(\\n        address indexed provider,\\n        uint256[] tokenAmounts,\\n        uint256[] fees,\\n        uint256 invariant,\\n        uint256 lpTokenSupply\\n    );\\n    event NewAdminFee(uint256 newAdminFee);\\n    event NewSwapFee(uint256 newSwapFee);\\n    event NewWithdrawFee(uint256 newWithdrawFee);\\n    event RampA(\\n        uint256 oldA,\\n        uint256 newA,\\n        uint256 initialTime,\\n        uint256 futureTime\\n    );\\n    event StopRampA(uint256 currentA, uint256 time);\\n\\n    struct Swap {\\n        // variables around the ramp management of A,\\n        // the amplification coefficient * n * (n - 1)\\n        // see https://www.curve.fi/stableswap-paper.pdf for details\\n        uint256 initialA;\\n        uint256 futureA;\\n        uint256 initialATime;\\n        uint256 futureATime;\\n        // fee calculation\\n        uint256 swapFee;\\n        uint256 adminFee;\\n        uint256 defaultWithdrawFee;\\n        LPTokenGuarded lpToken;\\n        // contract references for all tokens being pooled\\n        IERC20[] pooledTokens;\\n        // multipliers for each pooled token's precision to get to POOL_PRECISION_DECIMALS\\n        // for example, TBTC has 18 decimals, so the multiplier should be 1. WBTC\\n        // has 8, so the multiplier should be 10 ** 18 / 10 ** 8 => 10 ** 10\\n        uint256[] tokenPrecisionMultipliers;\\n        // the pool balance of each token, in the token's precision\\n        // the contract's actual token balance might differ\\n        uint256[] balances;\\n        mapping(address => uint256) depositTimestamp;\\n        mapping(address => uint256) withdrawFeeMultiplier;\\n    }\\n\\n    // Struct storing variables used in calculations in the\\n    // calculateWithdrawOneTokenDY function to avoid stack too deep errors\\n    struct CalculateWithdrawOneTokenDYInfo {\\n        uint256 d0;\\n        uint256 d1;\\n        uint256 newY;\\n        uint256 feePerToken;\\n        uint256 preciseA;\\n    }\\n\\n    // Struct storing variables used in calculation in addLiquidity function\\n    // to avoid stack too deep error\\n    struct AddLiquidityInfo {\\n        uint256 d0;\\n        uint256 d1;\\n        uint256 d2;\\n        uint256 preciseA;\\n    }\\n\\n    // Struct storing variables used in calculation in removeLiquidityImbalance function\\n    // to avoid stack too deep error\\n    struct RemoveLiquidityImbalanceInfo {\\n        uint256 d0;\\n        uint256 d1;\\n        uint256 d2;\\n        uint256 preciseA;\\n    }\\n\\n    // the precision all pools tokens will be converted to\\n    uint8 public constant POOL_PRECISION_DECIMALS = 18;\\n\\n    // the denominator used to calculate admin and LP fees. For example, an\\n    // LP fee might be something like tradeAmount.mul(fee).div(FEE_DENOMINATOR)\\n    uint256 private constant FEE_DENOMINATOR = 10**10;\\n\\n    // Max swap fee is 1% or 100bps of each swap\\n    uint256 public constant MAX_SWAP_FEE = 10**8;\\n\\n    // Max adminFee is 100% of the swapFee\\n    // adminFee does not add additional fee on top of swapFee\\n    // Instead it takes a certain % of the swapFee. Therefore it has no impact on the\\n    // users but only on the earnings of LPs\\n    uint256 public constant MAX_ADMIN_FEE = 10**10;\\n\\n    // Max withdrawFee is 1% of the value withdrawn\\n    // Fee will be redistributed to the LPs in the pool, rewarding\\n    // long term providers.\\n    uint256 public constant MAX_WITHDRAW_FEE = 10**8;\\n\\n    // Constant value used as max loop limit\\n    uint256 private constant MAX_LOOP_LIMIT = 256;\\n\\n    // Constant values used in ramping A calculations\\n    uint256 public constant A_PRECISION = 100;\\n    uint256 public constant MAX_A = 10**6;\\n    uint256 private constant MAX_A_CHANGE = 2;\\n    uint256 private constant MIN_RAMP_TIME = 14 days;\\n\\n    /*** VIEW & PURE FUNCTIONS ***/\\n\\n    /**\\n     * @notice Return A, the amplification coefficient * n * (n - 1)\\n     * @dev See the StableSwap paper for details\\n     * @param self Swap struct to read from\\n     * @return A parameter\\n     */\\n    function getA(Swap storage self) external view returns (uint256) {\\n        return _getA(self);\\n    }\\n\\n    /**\\n     * @notice Return A, the amplification coefficient * n * (n - 1)\\n     * @dev See the StableSwap paper for details\\n     * @param self Swap struct to read from\\n     * @return A parameter\\n     */\\n    function _getA(Swap storage self) internal view returns (uint256) {\\n        return _getAPrecise(self).div(A_PRECISION);\\n    }\\n\\n    /**\\n     * @notice Return A in its raw precision\\n     * @dev See the StableSwap paper for details\\n     * @param self Swap struct to read from\\n     * @return A parameter in its raw precision form\\n     */\\n    function getAPrecise(Swap storage self) external view returns (uint256) {\\n        return _getAPrecise(self);\\n    }\\n\\n    /**\\n     * @notice Calculates and returns A based on the ramp settings\\n     * @dev See the StableSwap paper for details\\n     * @param self Swap struct to read from\\n     * @return A parameter in its raw precision form\\n     */\\n    function _getAPrecise(Swap storage self) internal view returns (uint256) {\\n        uint256 t1 = self.futureATime; // time when ramp is finished\\n        uint256 a1 = self.futureA; // final A value when ramp is finished\\n\\n        if (block.timestamp < t1) {\\n            uint256 t0 = self.initialATime; // time when ramp is started\\n            uint256 a0 = self.initialA; // initial A value when ramp is started\\n            if (a1 > a0) {\\n                // a0 + (a1 - a0) * (block.timestamp - t0) / (t1 - t0)\\n                return\\n                    a0.add(\\n                        a1.sub(a0).mul(block.timestamp.sub(t0)).div(t1.sub(t0))\\n                    );\\n            } else {\\n                // a0 - (a0 - a1) * (block.timestamp - t0) / (t1 - t0)\\n                return\\n                    a0.sub(\\n                        a0.sub(a1).mul(block.timestamp.sub(t0)).div(t1.sub(t0))\\n                    );\\n            }\\n        } else {\\n            return a1;\\n        }\\n    }\\n\\n    /**\\n     * @notice Retrieves the timestamp of last deposit made by the given address\\n     * @param self Swap struct to read from\\n     * @return timestamp of last deposit\\n     */\\n    function getDepositTimestamp(Swap storage self, address user)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return self.depositTimestamp[user];\\n    }\\n\\n    /**\\n     * @notice Calculate the dy, the amount of selected token that user receives and\\n     * the fee of withdrawing in one token\\n     * @param account the address that is withdrawing\\n     * @param tokenAmount the amount to withdraw in the pool's precision\\n     * @param tokenIndex which token will be withdrawn\\n     * @param self Swap struct to read from\\n     * @return the amount of token user will receive and the associated swap fee\\n     */\\n    function calculateWithdrawOneToken(\\n        Swap storage self,\\n        address account,\\n        uint256 tokenAmount,\\n        uint8 tokenIndex\\n    ) public view returns (uint256, uint256) {\\n        uint256 dy;\\n        uint256 newY;\\n\\n        (dy, newY) = calculateWithdrawOneTokenDY(self, tokenIndex, tokenAmount);\\n\\n        // dy_0 (without fees)\\n        // dy, dy_0 - dy\\n\\n        uint256 dySwapFee =\\n            _xp(self)[tokenIndex]\\n                .sub(newY)\\n                .div(self.tokenPrecisionMultipliers[tokenIndex])\\n                .sub(dy);\\n\\n        dy = dy\\n            .mul(\\n            FEE_DENOMINATOR.sub(calculateCurrentWithdrawFee(self, account))\\n        )\\n            .div(FEE_DENOMINATOR);\\n\\n        return (dy, dySwapFee);\\n    }\\n\\n    /**\\n     * @notice Calculate the dy of withdrawing in one token\\n     * @param self Swap struct to read from\\n     * @param tokenIndex which token will be withdrawn\\n     * @param tokenAmount the amount to withdraw in the pools precision\\n     * @return the d and the new y after withdrawing one token\\n     */\\n    function calculateWithdrawOneTokenDY(\\n        Swap storage self,\\n        uint8 tokenIndex,\\n        uint256 tokenAmount\\n    ) internal view returns (uint256, uint256) {\\n        require(\\n            tokenIndex < self.pooledTokens.length,\\n            \\\"Token index out of range\\\"\\n        );\\n\\n        // Get the current D, then solve the stableswap invariant\\n        // y_i for D - tokenAmount\\n        uint256[] memory xp = _xp(self);\\n        CalculateWithdrawOneTokenDYInfo memory v =\\n            CalculateWithdrawOneTokenDYInfo(0, 0, 0, 0, 0);\\n        v.preciseA = _getAPrecise(self);\\n        v.d0 = getD(xp, v.preciseA);\\n        v.d1 = v.d0.sub(tokenAmount.mul(v.d0).div(self.lpToken.totalSupply()));\\n\\n        require(tokenAmount <= xp[tokenIndex], \\\"Withdraw exceeds available\\\");\\n\\n        v.newY = getYD(v.preciseA, tokenIndex, xp, v.d1);\\n\\n        uint256[] memory xpReduced = new uint256[](xp.length);\\n\\n        v.feePerToken = _feePerToken(self);\\n        for (uint256 i = 0; i < self.pooledTokens.length; i++) {\\n            uint256 xpi = xp[i];\\n            // if i == tokenIndex, dxExpected = xp[i] * d1 / d0 - newY\\n            // else dxExpected = xp[i] - (xp[i] * d1 / d0)\\n            // xpReduced[i] -= dxExpected * fee / FEE_DENOMINATOR\\n            xpReduced[i] = xpi.sub(\\n                (\\n                    (i == tokenIndex)\\n                        ? xpi.mul(v.d1).div(v.d0).sub(v.newY)\\n                        : xpi.sub(xpi.mul(v.d1).div(v.d0))\\n                )\\n                    .mul(v.feePerToken)\\n                    .div(FEE_DENOMINATOR)\\n            );\\n        }\\n\\n        uint256 dy =\\n            xpReduced[tokenIndex].sub(\\n                getYD(v.preciseA, tokenIndex, xpReduced, v.d1)\\n            );\\n        dy = dy.sub(1).div(self.tokenPrecisionMultipliers[tokenIndex]);\\n\\n        return (dy, v.newY);\\n    }\\n\\n    /**\\n     * @notice Calculate the price of a token in the pool with given\\n     * precision-adjusted balances and a particular D.\\n     *\\n     * @dev This is accomplished via solving the invariant iteratively.\\n     * See the StableSwap paper and Curve.fi implementation for further details.\\n     *\\n     * x_1**2 + x1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)\\n     * x_1**2 + b*x_1 = c\\n     * x_1 = (x_1**2 + c) / (2*x_1 + b)\\n     *\\n     * @param a the amplification coefficient * n * (n - 1). See the StableSwap paper for details.\\n     * @param tokenIndex Index of token we are calculating for.\\n     * @param xp a precision-adjusted set of pool balances. Array should be\\n     * the same cardinality as the pool.\\n     * @param d the stableswap invariant\\n     * @return the price of the token, in the same precision as in xp\\n     */\\n    function getYD(\\n        uint256 a,\\n        uint8 tokenIndex,\\n        uint256[] memory xp,\\n        uint256 d\\n    ) internal pure returns (uint256) {\\n        uint256 numTokens = xp.length;\\n        require(tokenIndex < numTokens, \\\"Token not found\\\");\\n\\n        uint256 c = d;\\n        uint256 s;\\n        uint256 nA = a.mul(numTokens);\\n\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            if (i != tokenIndex) {\\n                s = s.add(xp[i]);\\n                c = c.mul(d).div(xp[i].mul(numTokens));\\n                // If we were to protect the division loss we would have to keep the denominator separate\\n                // and divide at the end. However this leads to overflow with large numTokens or/and D.\\n                // c = c * D * D * D * ... overflow!\\n            }\\n        }\\n        c = c.mul(d).mul(A_PRECISION).div(nA.mul(numTokens));\\n\\n        uint256 b = s.add(d.mul(A_PRECISION).div(nA));\\n        uint256 yPrev;\\n        uint256 y = d;\\n        for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {\\n            yPrev = y;\\n            y = y.mul(y).add(c).div(y.mul(2).add(b).sub(d));\\n            if (y.within1(yPrev)) {\\n                return y;\\n            }\\n        }\\n        revert(\\\"Approximation did not converge\\\");\\n    }\\n\\n    /**\\n     * @notice Get D, the StableSwap invariant, based on a set of balances and a particular A.\\n     * @param xp a precision-adjusted set of pool balances. Array should be the same cardinality\\n     * as the pool.\\n     * @param a the amplification coefficient * n * (n - 1) in A_PRECISION.\\n     * See the StableSwap paper for details\\n     * @return the invariant, at the precision of the pool\\n     */\\n    function getD(uint256[] memory xp, uint256 a)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 numTokens = xp.length;\\n        uint256 s;\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            s = s.add(xp[i]);\\n        }\\n        if (s == 0) {\\n            return 0;\\n        }\\n\\n        uint256 prevD;\\n        uint256 d = s;\\n        uint256 nA = a.mul(numTokens);\\n\\n        for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {\\n            uint256 dP = d;\\n            for (uint256 j = 0; j < numTokens; j++) {\\n                dP = dP.mul(d).div(xp[j].mul(numTokens));\\n                // If we were to protect the division loss we would have to keep the denominator separate\\n                // and divide at the end. However this leads to overflow with large numTokens or/and D.\\n                // dP = dP * D * D * D * ... overflow!\\n            }\\n            prevD = d;\\n            d = nA.mul(s).div(A_PRECISION).add(dP.mul(numTokens)).mul(d).div(\\n                nA.sub(A_PRECISION).mul(d).div(A_PRECISION).add(\\n                    numTokens.add(1).mul(dP)\\n                )\\n            );\\n            if (d.within1(prevD)) {\\n                return d;\\n            }\\n        }\\n\\n        // Convergence should occur in 4 loops or less. If this is reached, there may be something wrong\\n        // with the pool. If this were to occur repeatedly, LPs should withdraw via `removeLiquidity()`\\n        // function which does not rely on D.\\n        revert(\\\"D does not converge\\\");\\n    }\\n\\n    /**\\n     * @notice Get D, the StableSwap invariant, based on self Swap struct\\n     * @param self Swap struct to read from\\n     * @return The invariant, at the precision of the pool\\n     */\\n    function getD(Swap storage self) internal view returns (uint256) {\\n        return getD(_xp(self), _getAPrecise(self));\\n    }\\n\\n    /**\\n     * @notice Given a set of balances and precision multipliers, return the\\n     * precision-adjusted balances.\\n     *\\n     * @param balances an array of token balances, in their native precisions.\\n     * These should generally correspond with pooled tokens.\\n     *\\n     * @param precisionMultipliers an array of multipliers, corresponding to\\n     * the amounts in the balances array. When multiplied together they\\n     * should yield amounts at the pool's precision.\\n     *\\n     * @return an array of amounts \\\"scaled\\\" to the pool's precision\\n     */\\n    function _xp(\\n        uint256[] memory balances,\\n        uint256[] memory precisionMultipliers\\n    ) internal pure returns (uint256[] memory) {\\n        uint256 numTokens = balances.length;\\n        require(\\n            numTokens == precisionMultipliers.length,\\n            \\\"Balances must match multipliers\\\"\\n        );\\n        uint256[] memory xp = new uint256[](numTokens);\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            xp[i] = balances[i].mul(precisionMultipliers[i]);\\n        }\\n        return xp;\\n    }\\n\\n    /**\\n     * @notice Return the precision-adjusted balances of all tokens in the pool\\n     * @param self Swap struct to read from\\n     * @param balances array of balances to scale\\n     * @return balances array \\\"scaled\\\" to the pool's precision, allowing\\n     * them to be more easily compared.\\n     */\\n    function _xp(Swap storage self, uint256[] memory balances)\\n        internal\\n        view\\n        returns (uint256[] memory)\\n    {\\n        return _xp(balances, self.tokenPrecisionMultipliers);\\n    }\\n\\n    /**\\n     * @notice Return the precision-adjusted balances of all tokens in the pool\\n     * @param self Swap struct to read from\\n     * @return the pool balances \\\"scaled\\\" to the pool's precision, allowing\\n     * them to be more easily compared.\\n     */\\n    function _xp(Swap storage self) internal view returns (uint256[] memory) {\\n        return _xp(self.balances, self.tokenPrecisionMultipliers);\\n    }\\n\\n    /**\\n     * @notice Get the virtual price, to help calculate profit\\n     * @param self Swap struct to read from\\n     * @return the virtual price, scaled to precision of POOL_PRECISION_DECIMALS\\n     */\\n    function getVirtualPrice(Swap storage self)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        uint256 d = getD(_xp(self), _getAPrecise(self));\\n        uint256 supply = self.lpToken.totalSupply();\\n        if (supply > 0) {\\n            return\\n                d.mul(10**uint256(ERC20(self.lpToken).decimals())).div(supply);\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Calculate the new balances of the tokens given the indexes of the token\\n     * that is swapped from (FROM) and the token that is swapped to (TO).\\n     * This function is used as a helper function to calculate how much TO token\\n     * the user should receive on swap.\\n     *\\n     * @param self Swap struct to read from\\n     * @param tokenIndexFrom index of FROM token\\n     * @param tokenIndexTo index of TO token\\n     * @param x the new total amount of FROM token\\n     * @param xp balances of the tokens in the pool\\n     * @return the amount of TO token that should remain in the pool\\n     */\\n    function getY(\\n        Swap storage self,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 x,\\n        uint256[] memory xp\\n    ) internal view returns (uint256) {\\n        uint256 numTokens = self.pooledTokens.length;\\n        require(\\n            tokenIndexFrom != tokenIndexTo,\\n            \\\"Can't compare token to itself\\\"\\n        );\\n        require(\\n            tokenIndexFrom < numTokens && tokenIndexTo < numTokens,\\n            \\\"Tokens must be in pool\\\"\\n        );\\n\\n        uint256 a = _getAPrecise(self);\\n        uint256 d = getD(xp, a);\\n        uint256 c = d;\\n        uint256 s;\\n        uint256 nA = numTokens.mul(a);\\n\\n        uint256 _x;\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            if (i == tokenIndexFrom) {\\n                _x = x;\\n            } else if (i != tokenIndexTo) {\\n                _x = xp[i];\\n            } else {\\n                continue;\\n            }\\n            s = s.add(_x);\\n            c = c.mul(d).div(_x.mul(numTokens));\\n            // If we were to protect the division loss we would have to keep the denominator separate\\n            // and divide at the end. However this leads to overflow with large numTokens or/and D.\\n            // c = c * D * D * D * ... overflow!\\n        }\\n        c = c.mul(d).mul(A_PRECISION).div(nA.mul(numTokens));\\n        uint256 b = s.add(d.mul(A_PRECISION).div(nA));\\n        uint256 yPrev;\\n        uint256 y = d;\\n\\n        // iterative approximation\\n        for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {\\n            yPrev = y;\\n            y = y.mul(y).add(c).div(y.mul(2).add(b).sub(d));\\n            if (y.within1(yPrev)) {\\n                return y;\\n            }\\n        }\\n        revert(\\\"Approximation did not converge\\\");\\n    }\\n\\n    /**\\n     * @notice Externally calculates a swap between two tokens.\\n     * @param self Swap struct to read from\\n     * @param tokenIndexFrom the token to sell\\n     * @param tokenIndexTo the token to buy\\n     * @param dx the number of tokens to sell. If the token charges a fee on transfers,\\n     * use the amount that gets transferred after the fee.\\n     * @return dy the number of tokens the user will get\\n     */\\n    function calculateSwap(\\n        Swap storage self,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256 dy) {\\n        (dy, ) = _calculateSwap(self, tokenIndexFrom, tokenIndexTo, dx);\\n    }\\n\\n    /**\\n     * @notice Internally calculates a swap between two tokens.\\n     *\\n     * @dev The caller is expected to transfer the actual amounts (dx and dy)\\n     * using the token contracts.\\n     *\\n     * @param self Swap struct to read from\\n     * @param tokenIndexFrom the token to sell\\n     * @param tokenIndexTo the token to buy\\n     * @param dx the number of tokens to sell. If the token charges a fee on transfers,\\n     * use the amount that gets transferred after the fee.\\n     * @return dy the number of tokens the user will get\\n     * @return dyFee the associated fee\\n     */\\n    function _calculateSwap(\\n        Swap storage self,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) internal view returns (uint256 dy, uint256 dyFee) {\\n        uint256[] memory xp = _xp(self);\\n        require(\\n            tokenIndexFrom < xp.length && tokenIndexTo < xp.length,\\n            \\\"Token index out of range\\\"\\n        );\\n        uint256 x =\\n            dx.mul(self.tokenPrecisionMultipliers[tokenIndexFrom]).add(\\n                xp[tokenIndexFrom]\\n            );\\n        uint256 y = getY(self, tokenIndexFrom, tokenIndexTo, x, xp);\\n        dy = xp[tokenIndexTo].sub(y).sub(1);\\n        dyFee = dy.mul(self.swapFee).div(FEE_DENOMINATOR);\\n        dy = dy.sub(dyFee).div(self.tokenPrecisionMultipliers[tokenIndexTo]);\\n    }\\n\\n    /**\\n     * @notice A simple method to calculate amount of each underlying\\n     * tokens that is returned upon burning given amount of\\n     * LP tokens\\n     *\\n     * @param account the address that is removing liquidity. required for withdraw fee calculation\\n     * @param amount the amount of LP tokens that would to be burned on\\n     * withdrawal\\n     * @return array of amounts of tokens user will receive\\n     */\\n    function calculateRemoveLiquidity(\\n        Swap storage self,\\n        address account,\\n        uint256 amount\\n    ) external view returns (uint256[] memory) {\\n        return _calculateRemoveLiquidity(self, account, amount);\\n    }\\n\\n    function _calculateRemoveLiquidity(\\n        Swap storage self,\\n        address account,\\n        uint256 amount\\n    ) internal view returns (uint256[] memory) {\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n        require(amount <= totalSupply, \\\"Cannot exceed total supply\\\");\\n\\n        uint256 feeAdjustedAmount =\\n            amount\\n                .mul(\\n                FEE_DENOMINATOR.sub(calculateCurrentWithdrawFee(self, account))\\n            )\\n                .div(FEE_DENOMINATOR);\\n\\n        uint256[] memory amounts = new uint256[](self.pooledTokens.length);\\n\\n        for (uint256 i = 0; i < self.pooledTokens.length; i++) {\\n            amounts[i] = self.balances[i].mul(feeAdjustedAmount).div(\\n                totalSupply\\n            );\\n        }\\n        return amounts;\\n    }\\n\\n    /**\\n     * @notice Calculate the fee that is applied when the given user withdraws.\\n     * Withdraw fee decays linearly over 4 weeks.\\n     * @param user address you want to calculate withdraw fee of\\n     * @return current withdraw fee of the user\\n     */\\n    function calculateCurrentWithdrawFee(Swap storage self, address user)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 endTime = self.depositTimestamp[user].add(4 weeks);\\n        if (endTime > block.timestamp) {\\n            uint256 timeLeftover = endTime.sub(block.timestamp);\\n            return\\n                self\\n                    .defaultWithdrawFee\\n                    .mul(self.withdrawFeeMultiplier[user])\\n                    .mul(timeLeftover)\\n                    .div(4 weeks)\\n                    .div(FEE_DENOMINATOR);\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice A simple method to calculate prices from deposits or\\n     * withdrawals, excluding fees but including slippage. This is\\n     * helpful as an input into the various \\\"min\\\" parameters on calls\\n     * to fight front-running\\n     *\\n     * @dev This shouldn't be used outside frontends for user estimates.\\n     *\\n     * @param self Swap struct to read from\\n     * @param account address of the account depositing or withdrawing tokens\\n     * @param amounts an array of token amounts to deposit or withdrawal,\\n     * corresponding to pooledTokens. The amount should be in each\\n     * pooled token's native precision. If a token charges a fee on transfers,\\n     * use the amount that gets transferred after the fee.\\n     * @param deposit whether this is a deposit or a withdrawal\\n     * @return if deposit was true, total amount of lp token that will be minted and if\\n     * deposit was false, total amount of lp token that will be burned\\n     */\\n    function calculateTokenAmount(\\n        Swap storage self,\\n        address account,\\n        uint256[] calldata amounts,\\n        bool deposit\\n    ) external view returns (uint256) {\\n        uint256 numTokens = self.pooledTokens.length;\\n        uint256 a = _getAPrecise(self);\\n        uint256 d0 = getD(_xp(self, self.balances), a);\\n        uint256[] memory balances1 = self.balances;\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            if (deposit) {\\n                balances1[i] = balances1[i].add(amounts[i]);\\n            } else {\\n                balances1[i] = balances1[i].sub(\\n                    amounts[i],\\n                    \\\"Cannot withdraw more than available\\\"\\n                );\\n            }\\n        }\\n        uint256 d1 = getD(_xp(self, balances1), a);\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n\\n        if (deposit) {\\n            return d1.sub(d0).mul(totalSupply).div(d0);\\n        } else {\\n            return\\n                d0.sub(d1).mul(totalSupply).div(d0).mul(FEE_DENOMINATOR).div(\\n                    FEE_DENOMINATOR.sub(\\n                        calculateCurrentWithdrawFee(self, account)\\n                    )\\n                );\\n        }\\n    }\\n\\n    /**\\n     * @notice return accumulated amount of admin fees of the token with given index\\n     * @param self Swap struct to read from\\n     * @param index Index of the pooled token\\n     * @return admin balance in the token's precision\\n     */\\n    function getAdminBalance(Swap storage self, uint256 index)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        require(index < self.pooledTokens.length, \\\"Token index out of range\\\");\\n        return\\n            self.pooledTokens[index].balanceOf(address(this)).sub(\\n                self.balances[index]\\n            );\\n    }\\n\\n    /**\\n     * @notice internal helper function to calculate fee per token multiplier used in\\n     * swap fee calculations\\n     * @param self Swap struct to read from\\n     */\\n    function _feePerToken(Swap storage self) internal view returns (uint256) {\\n        return\\n            self.swapFee.mul(self.pooledTokens.length).div(\\n                self.pooledTokens.length.sub(1).mul(4)\\n            );\\n    }\\n\\n    /*** STATE MODIFYING FUNCTIONS ***/\\n\\n    /**\\n     * @notice swap two tokens in the pool\\n     * @param self Swap struct to read from and write to\\n     * @param tokenIndexFrom the token the user wants to sell\\n     * @param tokenIndexTo the token the user wants to buy\\n     * @param dx the amount of tokens the user wants to sell\\n     * @param minDy the min amount the user would like to receive, or revert.\\n     * @return amount of token user received on swap\\n     */\\n    function swap(\\n        Swap storage self,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy\\n    ) external returns (uint256) {\\n        require(\\n            dx <= self.pooledTokens[tokenIndexFrom].balanceOf(msg.sender),\\n            \\\"Cannot swap more than you own\\\"\\n        );\\n\\n        // Transfer tokens first to see if a fee was charged on transfer\\n        uint256 beforeBalance =\\n            self.pooledTokens[tokenIndexFrom].balanceOf(address(this));\\n        self.pooledTokens[tokenIndexFrom].safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            dx\\n        );\\n\\n        // Use the actual transferred amount for AMM math\\n        uint256 transferredDx =\\n            self.pooledTokens[tokenIndexFrom].balanceOf(address(this)).sub(\\n                beforeBalance\\n            );\\n\\n        (uint256 dy, uint256 dyFee) =\\n            _calculateSwap(self, tokenIndexFrom, tokenIndexTo, transferredDx);\\n        require(dy >= minDy, \\\"Swap didn't result in min tokens\\\");\\n\\n        uint256 dyAdminFee =\\n            dyFee.mul(self.adminFee).div(FEE_DENOMINATOR).div(\\n                self.tokenPrecisionMultipliers[tokenIndexTo]\\n            );\\n\\n        self.balances[tokenIndexFrom] = self.balances[tokenIndexFrom].add(\\n            transferredDx\\n        );\\n        self.balances[tokenIndexTo] = self.balances[tokenIndexTo].sub(dy).sub(\\n            dyAdminFee\\n        );\\n\\n        self.pooledTokens[tokenIndexTo].safeTransfer(msg.sender, dy);\\n\\n        emit TokenSwap(\\n            msg.sender,\\n            transferredDx,\\n            dy,\\n            tokenIndexFrom,\\n            tokenIndexTo\\n        );\\n\\n        return dy;\\n    }\\n\\n    /**\\n     * @notice Add liquidity to the pool\\n     * @param self Swap struct to read from and write to\\n     * @param amounts the amounts of each token to add, in their native precision\\n     * @param minToMint the minimum LP tokens adding this amount of liquidity\\n     * should mint, otherwise revert. Handy for front-running mitigation\\n     * @param merkleProof bytes32 array that will be used to prove the existence of the caller's address in the list of\\n     * allowed addresses. If the pool is not in the guarded launch phase, this parameter will be ignored.\\n     * @return amount of LP token user received\\n     */\\n    function addLiquidity(\\n        Swap storage self,\\n        uint256[] memory amounts,\\n        uint256 minToMint,\\n        bytes32[] calldata merkleProof\\n    ) external returns (uint256) {\\n        require(\\n            amounts.length == self.pooledTokens.length,\\n            \\\"Amounts must match pooled tokens\\\"\\n        );\\n\\n        uint256[] memory fees = new uint256[](self.pooledTokens.length);\\n\\n        // current state\\n        AddLiquidityInfo memory v = AddLiquidityInfo(0, 0, 0, 0);\\n\\n        if (self.lpToken.totalSupply() != 0) {\\n            v.d0 = getD(self);\\n        }\\n        uint256[] memory newBalances = self.balances;\\n\\n        for (uint256 i = 0; i < self.pooledTokens.length; i++) {\\n            require(\\n                self.lpToken.totalSupply() != 0 || amounts[i] > 0,\\n                \\\"Must supply all tokens in pool\\\"\\n            );\\n\\n            // Transfer tokens first to see if a fee was charged on transfer\\n            if (amounts[i] != 0) {\\n                uint256 beforeBalance =\\n                    self.pooledTokens[i].balanceOf(address(this));\\n                self.pooledTokens[i].safeTransferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    amounts[i]\\n                );\\n\\n                // Update the amounts[] with actual transfer amount\\n                amounts[i] = self.pooledTokens[i].balanceOf(address(this)).sub(\\n                    beforeBalance\\n                );\\n            }\\n\\n            newBalances[i] = self.balances[i].add(amounts[i]);\\n        }\\n\\n        // invariant after change\\n        v.preciseA = _getAPrecise(self);\\n        v.d1 = getD(_xp(self, newBalances), v.preciseA);\\n        require(v.d1 > v.d0, \\\"D should increase\\\");\\n\\n        // updated to reflect fees and calculate the user's LP tokens\\n        v.d2 = v.d1;\\n        if (self.lpToken.totalSupply() != 0) {\\n            uint256 feePerToken = _feePerToken(self);\\n            for (uint256 i = 0; i < self.pooledTokens.length; i++) {\\n                uint256 idealBalance = v.d1.mul(self.balances[i]).div(v.d0);\\n                fees[i] = feePerToken\\n                    .mul(idealBalance.difference(newBalances[i]))\\n                    .div(FEE_DENOMINATOR);\\n                self.balances[i] = newBalances[i].sub(\\n                    fees[i].mul(self.adminFee).div(FEE_DENOMINATOR)\\n                );\\n                newBalances[i] = newBalances[i].sub(fees[i]);\\n            }\\n            v.d2 = getD(_xp(self, newBalances), v.preciseA);\\n        } else {\\n            // the initial depositor doesn't pay fees\\n            self.balances = newBalances;\\n        }\\n\\n        uint256 toMint;\\n        if (self.lpToken.totalSupply() == 0) {\\n            toMint = v.d1;\\n        } else {\\n            toMint = v.d2.sub(v.d0).mul(self.lpToken.totalSupply()).div(v.d0);\\n        }\\n\\n        require(toMint >= minToMint, \\\"Couldn't mint min requested\\\");\\n\\n        // mint the user's LP tokens\\n        self.lpToken.mint(msg.sender, toMint, merkleProof);\\n\\n        emit AddLiquidity(\\n            msg.sender,\\n            amounts,\\n            fees,\\n            v.d1,\\n            self.lpToken.totalSupply()\\n        );\\n\\n        return toMint;\\n    }\\n\\n    /**\\n     * @notice Update the withdraw fee for `user`. If the user is currently\\n     * not providing liquidity in the pool, sets to default value. If not, recalculate\\n     * the starting withdraw fee based on the last deposit's time & amount relative\\n     * to the new deposit.\\n     *\\n     * @param self Swap struct to read from and write to\\n     * @param user address of the user depositing tokens\\n     * @param toMint amount of pool tokens to be minted\\n     */\\n    function updateUserWithdrawFee(\\n        Swap storage self,\\n        address user,\\n        uint256 toMint\\n    ) external {\\n        _updateUserWithdrawFee(self, user, toMint);\\n    }\\n\\n    function _updateUserWithdrawFee(\\n        Swap storage self,\\n        address user,\\n        uint256 toMint\\n    ) internal {\\n        // If token is transferred to address 0 (or burned), don't update the fee.\\n        if (user == address(0)) {\\n            return;\\n        }\\n        if (self.defaultWithdrawFee == 0) {\\n            // If current fee is set to 0%, set multiplier to FEE_DENOMINATOR\\n            self.withdrawFeeMultiplier[user] = FEE_DENOMINATOR;\\n        } else {\\n            // Otherwise, calculate appropriate discount based on last deposit amount\\n            uint256 currentFee = calculateCurrentWithdrawFee(self, user);\\n            uint256 currentBalance = self.lpToken.balanceOf(user);\\n\\n            // ((currentBalance * currentFee) + (toMint * defaultWithdrawFee)) * FEE_DENOMINATOR /\\n            // ((toMint + currentBalance) * defaultWithdrawFee)\\n            self.withdrawFeeMultiplier[user] = currentBalance\\n                .mul(currentFee)\\n                .add(toMint.mul(self.defaultWithdrawFee))\\n                .mul(FEE_DENOMINATOR)\\n                .div(toMint.add(currentBalance).mul(self.defaultWithdrawFee));\\n        }\\n        self.depositTimestamp[user] = block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Burn LP tokens to remove liquidity from the pool.\\n     * @dev Liquidity can always be removed, even when the pool is paused.\\n     * @param self Swap struct to read from and write to\\n     * @param amount the amount of LP tokens to burn\\n     * @param minAmounts the minimum amounts of each token in the pool\\n     * acceptable for this burn. Useful as a front-running mitigation\\n     * @return amounts of tokens the user received\\n     */\\n    function removeLiquidity(\\n        Swap storage self,\\n        uint256 amount,\\n        uint256[] calldata minAmounts\\n    ) external returns (uint256[] memory) {\\n        require(amount <= self.lpToken.balanceOf(msg.sender), \\\">LP.balanceOf\\\");\\n        require(\\n            minAmounts.length == self.pooledTokens.length,\\n            \\\"minAmounts must match poolTokens\\\"\\n        );\\n\\n        uint256[] memory amounts =\\n            _calculateRemoveLiquidity(self, msg.sender, amount);\\n\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            require(amounts[i] >= minAmounts[i], \\\"amounts[i] < minAmounts[i]\\\");\\n            self.balances[i] = self.balances[i].sub(amounts[i]);\\n            self.pooledTokens[i].safeTransfer(msg.sender, amounts[i]);\\n        }\\n\\n        self.lpToken.burnFrom(msg.sender, amount);\\n\\n        emit RemoveLiquidity(msg.sender, amounts, self.lpToken.totalSupply());\\n\\n        return amounts;\\n    }\\n\\n    /**\\n     * @notice Remove liquidity from the pool all in one token.\\n     * @param self Swap struct to read from and write to\\n     * @param tokenAmount the amount of the lp tokens to burn\\n     * @param tokenIndex the index of the token you want to receive\\n     * @param minAmount the minimum amount to withdraw, otherwise revert\\n     * @return amount chosen token that user received\\n     */\\n    function removeLiquidityOneToken(\\n        Swap storage self,\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount\\n    ) external returns (uint256) {\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n        uint256 numTokens = self.pooledTokens.length;\\n        require(\\n            tokenAmount <= self.lpToken.balanceOf(msg.sender),\\n            \\\">LP.balanceOf\\\"\\n        );\\n        require(tokenIndex < numTokens, \\\"Token not found\\\");\\n\\n        uint256 dyFee;\\n        uint256 dy;\\n\\n        (dy, dyFee) = calculateWithdrawOneToken(\\n            self,\\n            msg.sender,\\n            tokenAmount,\\n            tokenIndex\\n        );\\n\\n        require(dy >= minAmount, \\\"dy < minAmount\\\");\\n\\n        self.balances[tokenIndex] = self.balances[tokenIndex].sub(\\n            dy.add(dyFee.mul(self.adminFee).div(FEE_DENOMINATOR))\\n        );\\n        self.lpToken.burnFrom(msg.sender, tokenAmount);\\n        self.pooledTokens[tokenIndex].safeTransfer(msg.sender, dy);\\n\\n        emit RemoveLiquidityOne(\\n            msg.sender,\\n            tokenAmount,\\n            totalSupply,\\n            tokenIndex,\\n            dy\\n        );\\n\\n        return dy;\\n    }\\n\\n    /**\\n     * @notice Remove liquidity from the pool, weighted differently than the\\n     * pool's current balances.\\n     *\\n     * @param self Swap struct to read from and write to\\n     * @param amounts how much of each token to withdraw\\n     * @param maxBurnAmount the max LP token provider is willing to pay to\\n     * remove liquidity. Useful as a front-running mitigation.\\n     * @return actual amount of LP tokens burned in the withdrawal\\n     */\\n    function removeLiquidityImbalance(\\n        Swap storage self,\\n        uint256[] memory amounts,\\n        uint256 maxBurnAmount\\n    ) public returns (uint256) {\\n        require(\\n            amounts.length == self.pooledTokens.length,\\n            \\\"Amounts should match pool tokens\\\"\\n        );\\n        require(\\n            maxBurnAmount <= self.lpToken.balanceOf(msg.sender) &&\\n                maxBurnAmount != 0,\\n            \\\">LP.balanceOf\\\"\\n        );\\n\\n        RemoveLiquidityImbalanceInfo memory v =\\n            RemoveLiquidityImbalanceInfo(0, 0, 0, 0);\\n\\n        uint256 tokenSupply = self.lpToken.totalSupply();\\n        uint256 feePerToken = _feePerToken(self);\\n\\n        uint256[] memory balances1 = self.balances;\\n\\n        v.preciseA = _getAPrecise(self);\\n        v.d0 = getD(_xp(self), v.preciseA);\\n        for (uint256 i = 0; i < self.pooledTokens.length; i++) {\\n            balances1[i] = balances1[i].sub(\\n                amounts[i],\\n                \\\"Cannot withdraw more than available\\\"\\n            );\\n        }\\n        v.d1 = getD(_xp(self, balances1), v.preciseA);\\n        uint256[] memory fees = new uint256[](self.pooledTokens.length);\\n\\n        for (uint256 i = 0; i < self.pooledTokens.length; i++) {\\n            uint256 idealBalance = v.d1.mul(self.balances[i]).div(v.d0);\\n            uint256 difference = idealBalance.difference(balances1[i]);\\n            fees[i] = feePerToken.mul(difference).div(FEE_DENOMINATOR);\\n            self.balances[i] = balances1[i].sub(\\n                fees[i].mul(self.adminFee).div(FEE_DENOMINATOR)\\n            );\\n            balances1[i] = balances1[i].sub(fees[i]);\\n        }\\n\\n        v.d2 = getD(_xp(self, balances1), v.preciseA);\\n\\n        uint256 tokenAmount = v.d0.sub(v.d2).mul(tokenSupply).div(v.d0);\\n        require(tokenAmount != 0, \\\"Burnt amount cannot be zero\\\");\\n        tokenAmount = tokenAmount.add(1).mul(FEE_DENOMINATOR).div(\\n            FEE_DENOMINATOR.sub(calculateCurrentWithdrawFee(self, msg.sender))\\n        );\\n\\n        require(tokenAmount <= maxBurnAmount, \\\"tokenAmount > maxBurnAmount\\\");\\n\\n        self.lpToken.burnFrom(msg.sender, tokenAmount);\\n\\n        for (uint256 i = 0; i < self.pooledTokens.length; i++) {\\n            self.pooledTokens[i].safeTransfer(msg.sender, amounts[i]);\\n        }\\n\\n        emit RemoveLiquidityImbalance(\\n            msg.sender,\\n            amounts,\\n            fees,\\n            v.d1,\\n            tokenSupply.sub(tokenAmount)\\n        );\\n\\n        return tokenAmount;\\n    }\\n\\n    /**\\n     * @notice withdraw all admin fees to a given address\\n     * @param self Swap struct to withdraw fees from\\n     * @param to Address to send the fees to\\n     */\\n    function withdrawAdminFees(Swap storage self, address to) external {\\n        for (uint256 i = 0; i < self.pooledTokens.length; i++) {\\n            IERC20 token = self.pooledTokens[i];\\n            uint256 balance =\\n                token.balanceOf(address(this)).sub(self.balances[i]);\\n            if (balance != 0) {\\n                token.safeTransfer(to, balance);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets the admin fee\\n     * @dev adminFee cannot be higher than 100% of the swap fee\\n     * @param self Swap struct to update\\n     * @param newAdminFee new admin fee to be applied on future transactions\\n     */\\n    function setAdminFee(Swap storage self, uint256 newAdminFee) external {\\n        require(newAdminFee <= MAX_ADMIN_FEE, \\\"Fee is too high\\\");\\n        self.adminFee = newAdminFee;\\n\\n        emit NewAdminFee(newAdminFee);\\n    }\\n\\n    /**\\n     * @notice update the swap fee\\n     * @dev fee cannot be higher than 1% of each swap\\n     * @param self Swap struct to update\\n     * @param newSwapFee new swap fee to be applied on future transactions\\n     */\\n    function setSwapFee(Swap storage self, uint256 newSwapFee) external {\\n        require(newSwapFee <= MAX_SWAP_FEE, \\\"Fee is too high\\\");\\n        self.swapFee = newSwapFee;\\n\\n        emit NewSwapFee(newSwapFee);\\n    }\\n\\n    /**\\n     * @notice update the default withdraw fee. This also affects deposits made in the past as well.\\n     * @param self Swap struct to update\\n     * @param newWithdrawFee new withdraw fee to be applied\\n     */\\n    function setDefaultWithdrawFee(Swap storage self, uint256 newWithdrawFee)\\n        external\\n    {\\n        require(newWithdrawFee <= MAX_WITHDRAW_FEE, \\\"Fee is too high\\\");\\n        self.defaultWithdrawFee = newWithdrawFee;\\n\\n        emit NewWithdrawFee(newWithdrawFee);\\n    }\\n\\n    /**\\n     * @notice Start ramping up or down A parameter towards given futureA_ and futureTime_\\n     * Checks if the change is too rapid, and commits the new A value only when it falls under\\n     * the limit range.\\n     * @param self Swap struct to update\\n     * @param futureA_ the new A to ramp towards\\n     * @param futureTime_ timestamp when the new A should be reached\\n     */\\n    function rampA(\\n        Swap storage self,\\n        uint256 futureA_,\\n        uint256 futureTime_\\n    ) external {\\n        require(\\n            block.timestamp >= self.initialATime.add(1 days),\\n            \\\"Wait 1 day before starting ramp\\\"\\n        );\\n        require(\\n            futureTime_ >= block.timestamp.add(MIN_RAMP_TIME),\\n            \\\"Insufficient ramp time\\\"\\n        );\\n        require(\\n            futureA_ > 0 && futureA_ < MAX_A,\\n            \\\"futureA_ must be > 0 and < MAX_A\\\"\\n        );\\n\\n        uint256 initialAPrecise = _getAPrecise(self);\\n        uint256 futureAPrecise = futureA_.mul(A_PRECISION);\\n\\n        if (futureAPrecise < initialAPrecise) {\\n            require(\\n                futureAPrecise.mul(MAX_A_CHANGE) >= initialAPrecise,\\n                \\\"futureA_ is too small\\\"\\n            );\\n        } else {\\n            require(\\n                futureAPrecise <= initialAPrecise.mul(MAX_A_CHANGE),\\n                \\\"futureA_ is too large\\\"\\n            );\\n        }\\n\\n        self.initialA = initialAPrecise;\\n        self.futureA = futureAPrecise;\\n        self.initialATime = block.timestamp;\\n        self.futureATime = futureTime_;\\n\\n        emit RampA(\\n            initialAPrecise,\\n            futureAPrecise,\\n            block.timestamp,\\n            futureTime_\\n        );\\n    }\\n\\n    /**\\n     * @notice Stops ramping A immediately. Once this function is called, rampA()\\n     * cannot be called for another 24 hours\\n     * @param self Swap struct to update\\n     */\\n    function stopRampA(Swap storage self) external {\\n        require(self.futureATime > block.timestamp, \\\"Ramp is already stopped\\\");\\n        uint256 currentA = _getAPrecise(self);\\n\\n        self.initialA = currentA;\\n        self.futureA = currentA;\\n        self.initialATime = block.timestamp;\\n        self.futureATime = block.timestamp;\\n\\n        emit StopRampA(currentA, block.timestamp);\\n    }\\n}\\n\",\"keccak256\":\"0xef4013f4d4512f1f3818b8eed2e3bbd9c36bdc0a9be4d81d86d35cb367286fb5\",\"license\":\"MIT\"},\"contracts/interfaces/IAllowlist.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IAllowlist {\\n    function getPoolAccountLimit(address poolAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getPoolCap(address poolAddress) external view returns (uint256);\\n\\n    function verifyAddress(address account, bytes32[] calldata merkleProof)\\n        external\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0xf55e4d678d05bc5d0e24ec5f24504d7437b885e19579f9d29152748c3c1c732e\",\"license\":\"MIT\"},\"contracts/interfaces/ISwapGuarded.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./IAllowlist.sol\\\";\\n\\ninterface ISwapGuarded {\\n    // pool data view functions\\n    function getA() external view returns (uint256);\\n\\n    function getAllowlist() external view returns (IAllowlist);\\n\\n    function getToken(uint8 index) external view returns (IERC20);\\n\\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\\n\\n    function getTokenBalance(uint8 index) external view returns (uint256);\\n\\n    function getVirtualPrice() external view returns (uint256);\\n\\n    function isGuarded() external view returns (bool);\\n\\n    // min return calculation functions\\n    function calculateSwap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calculateRemoveLiquidity(uint256 amount)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function calculateRemoveLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex\\n    ) external view returns (uint256 availableTokenAmount);\\n\\n    // state modifying functions\\n    function swap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function addLiquidity(\\n        uint256[] calldata amounts,\\n        uint256 minToMint,\\n        uint256 deadline,\\n        bytes32[] calldata merkleProof\\n    ) external returns (uint256);\\n\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256[] calldata minAmounts,\\n        uint256 deadline\\n    ) external returns (uint256[] memory);\\n\\n    function removeLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidityImbalance(\\n        uint256[] calldata amounts,\\n        uint256 maxBurnAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    // withdraw fee update function\\n    function updateUserWithdrawFee(address recipient, uint256 transferAmount)\\n        external;\\n}\\n\",\"keccak256\":\"0xa78b759dc8413dda4299f3974c201e7807f41449b2333fd0ea7ba5f08031cc4a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x614941610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106101ce5760003560e01c80637d230a4c11610103578063d4b0de2f116100a1578063e378be161161007b578063e378be1614610825578063ee9dcccc14610855578063f3de03621461088b578063f4cd320314610893576101ce565b8063d4b0de2f1461066f578063d870cc3214610770578063e0c022171461079c576101ce565b8063b0c61948116100dd578063b0c6194814610677578063c109ee2b146106a7578063c232f71b14610729578063d011f91814610768576101ce565b80637d230a4c1461062257806398fb2d6f14610652578063ab3d85441461066f576101ce565b8063528055c6116101705780636afc52731161014a5780636afc52731461052d5780636e3af5781461056c5780636f7bc844146105c05780637341f8c1146105f6576101ce565b8063528055c6146103b1578063565bf2fa146103fa5780636a487f381461050a576101ce565b806339698415116101ac57806339698415146102a757806347298d5b146102af5780634f95f4c0146102cc57806350afb95714610385576101ce565b80630296ab50146101d357806307270f1e146101f15780633457234314610220575b600080fd5b6101db6108cc565b6040805160ff9092168252519081900360200190f35b61020e6004803603602081101561020757600080fd5b50356108d1565b60408051918252519081900360200190f35b61020e6004803603608081101561023657600080fd5b8135916001600160a01b036020820135169181019060608101604082013564010000000081111561026657600080fd5b82018360208201111561027857600080fd5b8035906020019184602083028401116401000000008311171561029a57600080fd5b91935091503515156108e4565b61020e610b96565b61020e600480360360208110156102c557600080fd5b5035610b9d565b8180156102d857600080fd5b5061020e600480360360608110156102ef57600080fd5b8135919081019060408101602082013564010000000081111561031157600080fd5b82018360208201111561032357600080fd5b8035906020019184602083028401116401000000008311171561034557600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295505091359250610ba8915050565b81801561039157600080fd5b506103af600480360360208110156103a857600080fd5b5035611325565b005b8180156103bd57600080fd5b5061020e600480360360a08110156103d457600080fd5b5080359060ff6020820135811691604081013590911690606081013590608001356113e2565b81801561040657600080fd5b5061020e6004803603608081101561041d57600080fd5b8135919081019060408101602082013564010000000081111561043f57600080fd5b82018360208201111561045157600080fd5b8035906020019184602083028401116401000000008311171561047357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929584359590949093506040810192506020013590506401000000008111156104cb57600080fd5b8201836020820111156104dd57600080fd5b803590602001918460208302840111640100000000831117156104ff57600080fd5b50909250905061183f565b61020e6004803603604081101561052057600080fd5b5080359060200135612287565b81801561053957600080fd5b506103af6004803603606081101561055057600080fd5b508035906001600160a01b036020820135169060400135612317565b6105a76004803603608081101561058257600080fd5b5080359060208101356001600160a01b0316906040810135906060013560ff16612327565b6040805192835260208301919091528051918290030190f35b61020e600480360360808110156105d657600080fd5b5080359060ff6020820135811691604081013590911690606001356123aa565b61020e6004803603604081101561060c57600080fd5b50803590602001356001600160a01b03166123c2565b81801561062e57600080fd5b506103af6004803603604081101561064557600080fd5b5080359060200135612469565b61020e6004803603602081101561066857600080fd5b5035612500565b61020e61263e565b81801561068357600080fd5b506103af6004803603604081101561069a57600080fd5b5080359060200135612646565b6106d9600480360360608110156106bd57600080fd5b508035906001600160a01b0360208201351690604001356126de565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156107155781810151838201526020016106fd565b505050509050019250505060405180910390f35b81801561073557600080fd5b5061020e6004803603608081101561074c57600080fd5b5080359060208101359060ff60408201351690606001356126f3565b61020e612a6e565b61020e6004803603604081101561078657600080fd5b50803590602001356001600160a01b0316612a73565b8180156107a857600080fd5b506106d9600480360360608110156107bf57600080fd5b8135916020810135918101906060810160408201356401000000008111156107e657600080fd5b8201836020820111156107f857600080fd5b8035906020019184602083028401116401000000008311171561081a57600080fd5b509092509050612a92565b81801561083157600080fd5b506103af6004803603604081101561084857600080fd5b5080359060200135612e69565b81801561086157600080fd5b506103af6004803603606081101561087857600080fd5b5080359060208101359060400135612f00565b61020e613178565b81801561089f57600080fd5b506103af600480360360408110156108b657600080fd5b50803590602001356001600160a01b0316613181565b601281565b60006108dc8261324b565b90505b919050565b6008850154600090816108f688613257565b9050600061095f6109598a8b600a0180548060200260200160405190810160405280929190818152602001828054801561094f57602002820191906000526020600020905b81548152602001906001019080831161093b575b50505050506132ec565b8361334a565b9050606089600a018054806020026020016040519081016040528092919081815260200182805480156109b157602002820191906000526020600020905b81548152602001906001019080831161099d575b5050505050905060005b84811015610a91578615610a1e57610a018989838181106109d857fe5b905060200201358383815181106109eb57fe5b60200260200101516134b690919063ffffffff16565b828281518110610a0d57fe5b602002602001018181525050610a89565b610a70898983818110610a2d57fe5b905060200201356040518060600160405280602381526020016148e960239139848481518110610a5957fe5b60200260200101516135109092919063ffffffff16565b828281518110610a7c57fe5b6020026020010181815250505b6001016109bb565b506000610aa7610aa18c846132ec565b8561334a565b905060008b60070160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610afb57600080fd5b505afa158015610b0f573d6000803e3d6000fd5b505050506040513d6020811015610b2557600080fd5b505190508715610b5a57610b4d84610b4783610b4186846135a7565b90613604565b9061365d565b9650505050505050610b8d565b610b4d610b76610b6a8e8e6123c2565b6402540be400906135a7565b610b476402540be400610b4188838783838b6135a7565b95945050505050565b620f424081565b60006108dc82613257565b6008830154825160009114610c04576040805162461bcd60e51b815260206004820181905260248201527f416d6f756e74732073686f756c64206d6174636820706f6f6c20746f6b656e73604482015290519081900360640190fd5b6007840154604080517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015610c6a57600080fd5b505afa158015610c7e573d6000803e3d6000fd5b505050506040513d6020811015610c9457600080fd5b50518211801590610ca457508115155b610cf5576040805162461bcd60e51b815260206004820152600d60248201527f3e4c502e62616c616e63654f6600000000000000000000000000000000000000604482015290519081900360640190fd5b610cfd6147e6565b60405180608001604052806000815260200160008152602001600081526020016000815250905060008560070160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d7657600080fd5b505afa158015610d8a573d6000803e3d6000fd5b505050506040513d6020811015610da057600080fd5b505190506000610daf876136c4565b9050606087600a01805480602002602001604051908101604052809291908181526020018280548015610e0157602002820191906000526020600020905b815481526020019060010190808311610ded575b50505050509050610e1188613257565b6060850152610e2c610e22896136f5565b856060015161334a565b845260005b6008890154811015610e9857610e79888281518110610e4c57fe5b60200260200101516040518060600160405280602381526020016148e960239139848481518110610a5957fe5b828281518110610e8557fe5b6020908102919091010152600101610e31565b50610ea6610e2289836132ec565b6020850152600888015460609067ffffffffffffffff81118015610ec957600080fd5b50604051908082528060200260200182016040528015610ef3578160200160208202803683370190505b50905060005b60088a015481101561104f576000610f3f8760000151610b478d600a018581548110610f2157fe5b90600052602060002001548a6020015161360490919063ffffffff16565b90506000610f69858481518110610f5257fe5b6020026020010151836137a390919063ffffffff16565b9050610f7e6402540be400610b478884613604565b848481518110610f8a57fe5b602002602001018181525050610fee610fcc6402540be400610b478f60050154888881518110610fb657fe5b602002602001015161360490919063ffffffff16565b868581518110610fd857fe5b60200260200101516135a790919063ffffffff16565b8c600a018481548110610ffd57fe5b906000526020600020018190555061102e84848151811061101a57fe5b6020026020010151868581518110610fd857fe5b85848151811061103a57fe5b60209081029190910101525050600101610ef9565b5061106761105d8a846132ec565b866060015161334a565b6040860181905285516000916110899190610b47908890610b419084906135a7565b9050806110dd576040805162461bcd60e51b815260206004820152601b60248201527f4275726e7420616d6f756e742063616e6e6f74206265207a65726f0000000000604482015290519081900360640190fd5b6111016110ed610b6a8c336123c2565b610b476402540be400610b418560016134b6565b905087811115611158576040805162461bcd60e51b815260206004820152601b60248201527f746f6b656e416d6f756e74203e206d61784275726e416d6f756e740000000000604482015290519081900360640190fd5b60078a0154604080517f79cc67900000000000000000000000000000000000000000000000000000000081523360048201526024810184905290516001600160a01b03909216916379cc67909160448082019260009290919082900301818387803b1580156111c657600080fd5b505af11580156111da573d6000803e3d6000fd5b5050505060005b60088b015481101561123857611230338b83815181106111fd57fe5b60200260200101518d600801848154811061121457fe5b6000918252602090912001546001600160a01b031691906137bb565b6001016111e1565b50602086015133907f3631c28b1f9dd213e0319fb167b554d76b6c283a41143eb400a0d1adb1af1755908b9085906112708a876135a7565b604051808060200180602001858152602001848152602001838103835287818151815260200191508051906020019060200280838360005b838110156112c05781810151838201526020016112a8565b50505050905001838103825286818151815260200191508051906020019060200280838360005b838110156112ff5781810151838201526020016112e7565b50505050905001965050505050505060405180910390a2955050505050505b9392505050565b4281600301541161137d576040805162461bcd60e51b815260206004820152601760248201527f52616d7020697320616c72656164792073746f70706564000000000000000000604482015290519081900360640190fd5b600061138882613257565b8083556001830181905542600284018190556003840181905560408051838152602081019290925280519293507f46e22fb3709ad289f62ce63d469248536dbc78d82b84a3d7e74ad606dc20193892918290030190a15050565b6000856008018560ff16815481106113f657fe5b60009182526020918290200154604080517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015290516001600160a01b03909216926370a0823192602480840193829003018186803b15801561145e57600080fd5b505afa158015611472573d6000803e3d6000fd5b505050506040513d602081101561148857600080fd5b50518311156114de576040805162461bcd60e51b815260206004820152601d60248201527f43616e6e6f742073776170206d6f7265207468616e20796f75206f776e000000604482015290519081900360640190fd5b6000866008018660ff16815481106114f257fe5b60009182526020918290200154604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b03909216926370a0823192602480840193829003018186803b15801561155a57600080fd5b505afa15801561156e573d6000803e3d6000fd5b505050506040513d602081101561158457600080fd5b50516008880180549192506115c4913391309188919060ff8c169081106115a757fe5b6000918252602090912001546001600160a01b031692919061383b565b600061167682896008018960ff16815481106115dc57fe5b60009182526020918290200154604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b03909216926370a0823192602480840193829003018186803b15801561164457600080fd5b505afa158015611658573d6000803e3d6000fd5b505050506040513d602081101561166e57600080fd5b5051906135a7565b90506000806116878a8a8a866138c9565b91509150858210156116e0576040805162461bcd60e51b815260206004820181905260248201527f53776170206469646e277420726573756c7420696e206d696e20746f6b656e73604482015290519081900360640190fd5b60006117228b6009018a60ff16815481106116f757fe5b9060005260206000200154610b476402540be400610b478f600501548761360490919063ffffffff16565b9050611753848c600a018c60ff168154811061173a57fe5b90600052602060002001546134b690919063ffffffff16565b8b600a018b60ff168154811061176557fe5b90600052602060002001819055506117ac816117a6858e600a018d60ff168154811061178d57fe5b90600052602060002001546135a790919063ffffffff16565b906135a7565b8b600a018a60ff16815481106117be57fe5b90600052602060002001819055506117e333848d6008018c60ff168154811061121457fe5b604080518581526020810185905260ff808d16828401528b166060820152905133917fc6c1e0630dbe9130cc068028486c0d118ddcea348550819defd5cb8c257f8a38919081900360800190a250909998505050505050505050565b600885015484516000911461189b576040805162461bcd60e51b815260206004820181905260248201527f416d6f756e7473206d757374206d6174636820706f6f6c656420746f6b656e73604482015290519081900360640190fd5b600886015460609067ffffffffffffffff811180156118b957600080fd5b506040519080825280602002602001820160405280156118e3578160200160208202803683370190505b5090506118ee6147e6565b6040518060800160405280600081526020016000815260200160008152602001600081525090508760070160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561196557600080fd5b505afa158015611979573d6000803e3d6000fd5b505050506040513d602081101561198f57600080fd5b5051156119a25761199f88613a13565b81525b606088600a018054806020026020016040519081016040528092919081815260200182805480156119f257602002820191906000526020600020905b8154815260200190600101908083116119de575b5050505050905060005b60088a0154811015611c57578960070160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611a5857600080fd5b505afa158015611a6c573d6000803e3d6000fd5b505050506040513d6020811015611a8257600080fd5b5051151580611aa457506000898281518110611a9a57fe5b6020026020010151115b611af5576040805162461bcd60e51b815260206004820152601e60248201527f4d75737420737570706c7920616c6c20746f6b656e7320696e20706f6f6c0000604482015290519081900360640190fd5b888181518110611b0157fe5b6020026020010151600014611c125760008a6008018281548110611b2157fe5b60009182526020918290200154604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b03909216926370a0823192602480840193829003018186803b158015611b8957600080fd5b505afa158015611b9d573d6000803e3d6000fd5b505050506040513d6020811015611bb357600080fd5b50518a51909150611be590339030908d9086908110611bce57fe5b60200260200101518e60080186815481106115a757fe5b611bf8818c60080184815481106115dc57fe5b8a8381518110611c0457fe5b602002602001018181525050505b611c38898281518110611c2157fe5b60200260200101518b600a01838154811061173a57fe5b828281518110611c4457fe5b60209081029190910101526001016119fc565b50611c6189613257565b6060830152611c7d611c738a836132ec565b836060015161334a565b60208301819052825110611cd8576040805162461bcd60e51b815260206004820152601160248201527f442073686f756c6420696e637265617365000000000000000000000000000000604482015290519081900360640190fd5b60208083015160408085019190915260078b015481517f18160ddd00000000000000000000000000000000000000000000000000000000815291516001600160a01b03909116926318160ddd9260048082019391829003018186803b158015611d4057600080fd5b505afa158015611d54573d6000803e3d6000fd5b505050506040513d6020811015611d6a57600080fd5b505115611ec9576000611d7c8a6136c4565b905060005b60088b0154811015611ea6576000611dc78560000151610b478e600a018581548110611da957fe5b9060005260206000200154886020015161360490919063ffffffff16565b9050611e026402540be400610b47611dfb878681518110611de457fe5b6020026020010151856137a390919063ffffffff16565b8690613604565b868381518110611e0e57fe5b602002602001018181525050611e46611e3a6402540be400610b478f600501548a8781518110610fb657fe5b858481518110610fd857fe5b8c600a018381548110611e5557fe5b9060005260206000200181905550611e86868381518110611e7257fe5b6020026020010151858481518110610fd857fe5b848381518110611e9257fe5b602090810291909101015250600101611d81565b50611ebe611eb48b846132ec565b846060015161334a565b604084015250611ee0565b8051611ede90600a8b0190602084019061480e565b505b6007890154604080517f18160ddd00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b158015611f4057600080fd5b505afa158015611f54573d6000803e3d6000fd5b505050506040513d6020811015611f6a57600080fd5b5051611f7b57506020820151612015565b6120128360000151610b478c60070160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611fd657600080fd5b505afa158015611fea573d6000803e3d6000fd5b505050506040513d602081101561200057600080fd5b505186516040880151610b41916135a7565b90505b8781101561206a576040805162461bcd60e51b815260206004820152601b60248201527f436f756c646e2774206d696e74206d696e207265717565737465640000000000604482015290519081900360640190fd5b60078a01546040517f641ce140000000000000000000000000000000000000000000000000000000008152336004820181815260248301859052606060448401908152606484018b90526001600160a01b039094169363641ce1409386928d928d92608401846020850280828437600081840152601f19601f82011690508083019250505095505050505050600060405180830381600087803b15801561211057600080fd5b505af1158015612124573d6000803e3d6000fd5b50505050336001600160a01b03167f189c623b666b1b45b83d7178f39b8c087cb09774317ca2f53c2d3c3726f222a28a8686602001518e60070160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156121aa57600080fd5b505afa1580156121be573d6000803e3d6000fd5b505050506040513d60208110156121d457600080fd5b5051604080519081018390526060810182905260808082528551908201528451819060208281019160a0840191898101910280838360005b8381101561222457818101518382015260200161220c565b50505050905001838103825286818151815260200191508051906020019060200280838360005b8381101561226357818101518382015260200161224b565b50505050905001965050505050505060405180910390a29998505050505050505050565b600882015460009082106122e2576040805162461bcd60e51b815260206004820152601860248201527f546f6b656e20696e646578206f7574206f662072616e67650000000000000000604482015290519081900360640190fd5b61230e83600a0183815481106122f457fe5b90600052602060002001548460080184815481106115dc57fe5b90505b92915050565b612322838383613a2a565b505050565b600080600080612338888688613b99565b80925081935050506000612381836117a68b6009018960ff168154811061235b57fe5b9060005260206000200154610b47866123738f6136f5565b8c60ff1681518110610fd857fe5b905061239c6402540be400610b47611dfb610b6a8d8d6123c2565b999098509650505050505050565b60006123b8858585856138c9565b5095945050505050565b6001600160a01b0381166000908152600b8301602052604081205481906123ec906224ea006134b6565b90504281111561245f57600061240282426135a7565b90506124566402540be400610b476224ea00610b4785610b418b600c0160008c6001600160a01b03166001600160a01b03168152602001908152602001600020548c6006015461360490919063ffffffff16565b92505050612311565b5060009392505050565b6305f5e1008111156124c2576040805162461bcd60e51b815260206004820152600f60248201527f46656520697320746f6f20686967680000000000000000000000000000000000604482015290519081900360640190fd5b600482018190556040805182815290517fd88ea5155021c6f8dafa1a741e173f595cdf77ce7c17d43342131d7f06afdfe59181900360200190a15050565b60008061251d61250f846136f5565b61251885613257565b61334a565b905060008360070160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561257157600080fd5b505afa158015612585573d6000803e3d6000fd5b505050506040513d602081101561259b57600080fd5b50519050801561245f5761263581610b478660070160009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156125fc57600080fd5b505afa158015612610573d6000803e3d6000fd5b505050506040513d602081101561262657600080fd5b5051859060ff16600a0a613604565b925050506108df565b6305f5e10081565b6402540be4008111156126a0576040805162461bcd60e51b815260206004820152600f60248201527f46656520697320746f6f20686967680000000000000000000000000000000000604482015290519081900360640190fd5b600582018190556040805182815290517fab599d640ca80cde2b09b128a4154a8dfe608cb80f4c9399c8b954b01fd35f389181900360200190a15050565b60606126eb848484613f03565b949350505050565b6000808560070160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561274657600080fd5b505afa15801561275a573d6000803e3d6000fd5b505050506040513d602081101561277057600080fd5b505160088701546007880154604080517f70a08231000000000000000000000000000000000000000000000000000000008152336004820152905193945091926001600160a01b03909116916370a08231916024808301926020929190829003018186803b1580156127e157600080fd5b505afa1580156127f5573d6000803e3d6000fd5b505050506040513d602081101561280b57600080fd5b5051861115612861576040805162461bcd60e51b815260206004820152600d60248201527f3e4c502e62616c616e63654f6600000000000000000000000000000000000000604482015290519081900360640190fd5b808560ff16106128b8576040805162461bcd60e51b815260206004820152600f60248201527f546f6b656e206e6f7420666f756e640000000000000000000000000000000000604482015290519081900360640190fd5b6000806128c789338a8a612327565b9250905085811015612920576040805162461bcd60e51b815260206004820152600e60248201527f6479203c206d696e416d6f756e74000000000000000000000000000000000000604482015290519081900360640190fd5b61295f61294d6129466402540be400610b478d600501548761360490919063ffffffff16565b83906134b6565b8a600a018960ff168154811061178d57fe5b89600a018860ff168154811061297157fe5b600091825260208220019190915560078a0154604080517f79cc6790000000000000000000000000000000000000000000000000000000008152336004820152602481018c905290516001600160a01b03909216926379cc67909260448084019382900301818387803b1580156129e757600080fd5b505af11580156129fb573d6000803e3d6000fd5b50505050612a1633828b6008018a60ff168154811061121457fe5b604080518981526020810186905260ff89168183015260608101839052905133917f43fb02998f4e03da2e0e6fff53fdbf0c40a9f45f145dc377fc30615d7d7a8a64919081900360800190a298975050505050505050565b606481565b6001600160a01b03166000908152600b91909101602052604090205490565b6007840154604080517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015290516060926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015612af857600080fd5b505afa158015612b0c573d6000803e3d6000fd5b505050506040513d6020811015612b2257600080fd5b5051841115612b78576040805162461bcd60e51b815260206004820152600d60248201527f3e4c502e62616c616e63654f6600000000000000000000000000000000000000604482015290519081900360640190fd5b60088501548214612bd0576040805162461bcd60e51b815260206004820181905260248201527f6d696e416d6f756e7473206d757374206d6174636820706f6f6c546f6b656e73604482015290519081900360640190fd5b6060612bdd863387613f03565b905060005b8151811015612cd757848482818110612bf757fe5b90506020020135828281518110612c0a57fe5b60200260200101511015612c65576040805162461bcd60e51b815260206004820152601a60248201527f616d6f756e74735b695d203c206d696e416d6f756e74735b695d000000000000604482015290519081900360640190fd5b612c8b828281518110612c7457fe5b602002602001015188600a01838154811061178d57fe5b87600a018281548110612c9a57fe5b9060005260206000200181905550612ccf33838381518110612cb857fe5b602002602001015189600801848154811061121457fe5b600101612be2565b506007860154604080517f79cc67900000000000000000000000000000000000000000000000000000000081523360048201526024810188905290516001600160a01b03909216916379cc67909160448082019260009290919082900301818387803b158015612d4657600080fd5b505af1158015612d5a573d6000803e3d6000fd5b50505050336001600160a01b03167f88d38ed598fdd809c2bf01ee49cd24b7fdabf379a83d29567952b60324d58cef828860070160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612dda57600080fd5b505afa158015612dee573d6000803e3d6000fd5b505050506040513d6020811015612e0457600080fd5b50516040805160208181018490528282528451928201929092528351909182916060830191868101910280838360005b83811015612e4c578181015183820152602001612e34565b50505050905001935050505060405180910390a295945050505050565b6305f5e100811115612ec2576040805162461bcd60e51b815260206004820152600f60248201527f46656520697320746f6f20686967680000000000000000000000000000000000604482015290519081900360640190fd5b600682018190556040805182815290517fd5fe46099fa396290a7f57e36c3c3c8774e2562c18ed5d1dcc0fa75071e03f1d9181900360200190a15050565b6002830154612f1290620151806134b6565b421015612f66576040805162461bcd60e51b815260206004820152601f60248201527f57616974203120646179206265666f7265207374617274696e672072616d7000604482015290519081900360640190fd5b612f7342621275006134b6565b811015612fc7576040805162461bcd60e51b815260206004820152601660248201527f496e73756666696369656e742072616d702074696d6500000000000000000000604482015290519081900360640190fd5b600082118015612fd95750620f424082105b61302a576040805162461bcd60e51b815260206004820181905260248201527f667574757265415f206d757374206265203e203020616e64203c204d41585f41604482015290519081900360640190fd5b600061303584613257565b90506000613044846064613604565b9050818110156130b2578161305a826002613604565b10156130ad576040805162461bcd60e51b815260206004820152601560248201527f667574757265415f20697320746f6f20736d616c6c0000000000000000000000604482015290519081900360640190fd5b613111565b6130bd826002613604565b811115613111576040805162461bcd60e51b815260206004820152601560248201527f667574757265415f20697320746f6f206c617267650000000000000000000000604482015290519081900360640190fd5b8185556001850181905542600286018190556003860184905560408051848152602081018490528082019290925260608201859052517fa2b71ec6df949300b59aab36b55e189697b750119dd349fcfa8c0f779e83c2549181900360800190a15050505050565b6402540be40081565b60005b60088301548110156123225760008360080182815481106131a157fe5b6000918252602082200154600a860180546001600160a01b03909216935061322591859081106131cd57fe5b9060005260206000200154836001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561164457600080fd5b90508015613241576132416001600160a01b03831685836137bb565b5050600101613184565b60006108dc6064610b47845b6003810154600182015460009190428211156132e35760028401548454808311156132b5576132aa6132a361328c86856135a7565b610b4761329942876135a7565b610b4188876135a7565b82906134b6565b9450505050506108df565b6132aa6132dc6132c586856135a7565b610b476132d242876135a7565b610b4186896135a7565b82906135a7565b91506108df9050565b606061230e828460090180548060200260200160405190810160405280929190818152602001828054801561334057602002820191906000526020600020905b81548152602001906001019080831161332c575b50505050506140b3565b815160009081805b8281101561338a5761338086828151811061336957fe5b6020026020010151836134b690919063ffffffff16565b9150600101613352565b508061339b57600092505050612311565b600081816133a98786613604565b905060005b610100811015613468578260005b878110156133eb576133e16133d7898d8481518110610fb657fe5b610b478488613604565b91506001016133bc565b50929350839261343f61341f61340683610b418b60016134b6565b6134196064610b4789610b418a846135a7565b906134b6565b610b4786610b41613430868d613604565b6134196064610b478b8f613604565b935061344b84866141aa565b1561345f5783975050505050505050612311565b506001016133ae565b506040805162461bcd60e51b815260206004820152601360248201527f4420646f6573206e6f7420636f6e766572676500000000000000000000000000604482015290519081900360640190fd5b60008282018381101561230e576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000818484111561359f5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561356457818101518382015260200161354c565b50505050905090810190601f1680156135915780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000828211156135fe576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b60008261361357506000612311565b8282028284828161362057fe5b041461230e5760405162461bcd60e51b815260040180806020018281038252602181526020018061489e6021913960400191505060405180910390fd5b60008082116136b3576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816136bc57fe5b049392505050565b60088101546000906108dc906136e290600490610b419060016135a7565b60088401546004850154610b4791613604565b60606108dc82600a0180548060200260200160405190810160405280929190818152602001828054801561374857602002820191906000526020600020905b815481526020019060010190808311613734575b505050505083600901805480602002602001604051908101604052809291908181526020018280548015613340576020028201919060005260206000209081548152602001906001019080831161332c5750505050506140b3565b6000818311156137b65750808203612311565b500390565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526123229084906141c1565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd000000000000000000000000000000000000000000000000000000001790526138c39085906141c1565b50505050565b60008060606138d7876136f5565b905080518660ff161080156138ef575080518560ff16105b613940576040805162461bcd60e51b815260206004820152601860248201527f546f6b656e20696e646578206f7574206f662072616e67650000000000000000604482015290519081900360640190fd5b600061398b828860ff168151811061395457fe5b60200260200101516134198a6009018a60ff168154811061397157fe5b90600052602060002001548861360490919063ffffffff16565b9050600061399c8989898587614272565b90506139b660016117a683868b60ff1681518110610fd857fe5b94506139d86402540be400610b478b600401548861360490919063ffffffff16565b9350613a05896009018860ff16815481106139ef57fe5b600091825260209091200154610b4787876135a7565b945050505094509492505050565b60006108dc613a21836136f5565b61251884613257565b6001600160a01b038216613a3d57612322565b6006830154613a6d576001600160a01b0382166000908152600c8401602052604090206402540be4009055613b78565b6000613a7984846123c2565b6007850154604080517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b038781166004830152915193945060009391909216916370a08231916024808301926020929190829003018186803b158015613ae757600080fd5b505afa158015613afb573d6000803e3d6000fd5b505050506040513d6020811015613b1157600080fd5b50516006860154909150613b5a90613b2d90610b4186856134b6565b610b476402540be400610b41613b508a600601548961360490919063ffffffff16565b6134198789613604565b6001600160a01b0385166000908152600c8701602052604090205550505b506001600160a01b03166000908152600b9190910160205260409020429055565b6008830154600090819060ff851610613bf9576040805162461bcd60e51b815260206004820152601860248201527f546f6b656e20696e646578206f7574206f662072616e67650000000000000000604482015290519081900360640190fd5b6060613c04866136f5565b9050613c0e614859565b6040518060a001604052806000815260200160008152602001600081526020016000815260200160008152509050613c4587613257565b60808201819052613c5790839061334a565b81526007870154604080517f18160ddd0000000000000000000000000000000000000000000000000000000081529051613d0292613cfa926001600160a01b03909116916318160ddd91600480820192602092909190829003018186803b158015613cc157600080fd5b505afa158015613cd5573d6000803e3d6000fd5b505050506040513d6020811015613ceb57600080fd5b50518351610b47908990613604565b8251906135a7565b60208201528151829060ff8816908110613d1857fe5b6020026020010151851115613d74576040805162461bcd60e51b815260206004820152601a60248201527f5769746864726177206578636565647320617661696c61626c65000000000000604482015290519081900360640190fd5b613d888160800151878484602001516144c9565b6040820152815160609067ffffffffffffffff81118015613da857600080fd5b50604051908082528060200260200182016040528015613dd2578160200160208202803683370190505b509050613dde886136c4565b606083015260005b6008890154811015613e95576000848281518110613e0057fe5b60200260200101519050613e756132dc6402540be400610b4787606001518d60ff168714613e4e57885160208a0151613e4991613e4291610b47908a90613604565b87906135a7565b610b41565b610b4189604001516117a68b60000151610b478d602001518b61360490919063ffffffff16565b838381518110613e8157fe5b602090810291909101015250600101613de6565b506000613ebe613eaf84608001518a8587602001516144c9565b838a60ff1681518110610fd857fe5b9050613eec896009018960ff1681548110613ed557fe5b600091825260209091200154610b478360016135a7565b604090930151929550919350505050935093915050565b606060008460070160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015613f5757600080fd5b505afa158015613f6b573d6000803e3d6000fd5b505050506040513d6020811015613f8157600080fd5b5051905080831115613fda576040805162461bcd60e51b815260206004820152601a60248201527f43616e6e6f742065786365656420746f74616c20737570706c79000000000000604482015290519081900360640190fd5b6000613ffc6402540be400610b47613ff5610b6a8a8a6123c2565b8790613604565b600887015490915060609067ffffffffffffffff8111801561401d57600080fd5b50604051908082528060200260200182016040528015614047578160200160208202803683370190505b50905060005b60088801548110156140a85761408984610b47858b600a01858154811061407057fe5b906000526020600020015461360490919063ffffffff16565b82828151811061409557fe5b602090810291909101015260010161404d565b509695505050505050565b8151815160609190811461410e576040805162461bcd60e51b815260206004820152601f60248201527f42616c616e636573206d757374206d61746368206d756c7469706c6965727300604482015290519081900360640190fd5b60608167ffffffffffffffff8111801561412757600080fd5b50604051908082528060200260200182016040528015614151578160200160208202803683370190505b50905060005b828110156141a15761418285828151811061416e57fe5b6020026020010151878381518110610fb657fe5b82828151811061418e57fe5b6020908102919091010152600101614157565b50949350505050565b600060016141b884846137a3565b11159392505050565b6060614216826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166146369092919063ffffffff16565b8051909150156123225780806020019051602081101561423557600080fd5b50516123225760405162461bcd60e51b815260040180806020018281038252602a8152602001806148bf602a913960400191505060405180910390fd5b600885015460009060ff86811690861614156142d5576040805162461bcd60e51b815260206004820152601d60248201527f43616e277420636f6d7061726520746f6b656e20746f20697473656c66000000604482015290519081900360640190fd5b808660ff161080156142e95750808560ff16105b61433a576040805162461bcd60e51b815260206004820152601660248201527f546f6b656e73206d75737420626520696e20706f6f6c00000000000000000000604482015290519081900360640190fd5b600061434588613257565b90506000614353858361334a565b9050806000806143638686613604565b90506000805b878110156143dc578c60ff16811415614384578a91506143ae565b8b60ff1681146143a95789818151811061439a57fe5b602002602001015191506143ae565b6143d4565b6143b884836134b6565b93506143d16143c7838a613604565b610b478789613604565b94505b600101614369565b506143f96143ea8389613604565b610b476064610b41888a613604565b9350600061441661440f84610b47896064613604565b85906134b6565b9050600086815b61010081101561447b5790915081906144506144428a6117a687613419876002613604565b610b478a6134198680613604565b915061445c82846141aa565b1561447357509950610b8d98505050505050505050565b60010161441d565b506040805162461bcd60e51b815260206004820152601e60248201527f417070726f78696d6174696f6e20646964206e6f7420636f6e76657267650000604482015290519081900360640190fd5b815160009060ff85168111614525576040805162461bcd60e51b815260206004820152600f60248201527f546f6b656e206e6f7420666f756e640000000000000000000000000000000000604482015290519081900360640190fd5b826000806145338985613604565b905060005b8481101561459a578860ff1681146145925761457088828151811061455957fe5b6020026020010151846134b690919063ffffffff16565b925061458f614585868a8481518110610fb657fe5b610b47868a613604565b93505b600101614538565b506145b76145a88286613604565b610b476064610b41878b613604565b925060006145d46145cd83610b478a6064613604565b84906134b6565b9050600087815b61010081101561447b57909150819061460e6146008b6117a687613419876002613604565b610b47896134198680613604565b915061461a82846141aa565b1561462e575096506126eb95505050505050565b6001016145db565b60606126eb84846000858561464a8561477a565b61469b576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106146f857805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016146bb565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461475a576040519150601f19603f3d011682016040523d82523d6000602084013e61475f565b606091505b509150915061476f828286614780565b979650505050505050565b3b151590565b6060831561478f57508161131e565b82511561479f5782518084602001fd5b60405162461bcd60e51b815260206004820181815284516024840152845185939192839260440191908501908083836000831561356457818101518382015260200161354c565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b828054828255906000526020600020908101928215614849579160200282015b8281111561484957825182559160200191906001019061482e565b50614855929150614888565b5090565b6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b5b80821115614855576000815560010161488956fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f74207375636365656443616e6e6f74207769746864726177206d6f7265207468616e20617661696c61626c65a264697066735822122069f8ef7807cf09db718e6b039f4cacd25a13d71b0b948fd24d9aecd2773d5ceb64736f6c634300060c0033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Contracts relying on this library must initialize SwapUtils.Swap struct then use this library for SwapUtils.Swap struct. Note that this library contains both functions called by users and admins. Admin functions should be protected within contracts using this library.",
    "kind": "dev",
    "methods": {
      "addLiquidity(SwapUtilsGuarded.Swap storage,uint256[],uint256,bytes32[])": {
        "params": {
          "amounts": "the amounts of each token to add, in their native precision",
          "merkleProof": "bytes32 array that will be used to prove the existence of the caller's address in the list of allowed addresses. If the pool is not in the guarded launch phase, this parameter will be ignored.",
          "minToMint": "the minimum LP tokens adding this amount of liquidity should mint, otherwise revert. Handy for front-running mitigation",
          "self": "Swap struct to read from and write to"
        },
        "returns": {
          "_0": "amount of LP token user received"
        }
      },
      "calculateCurrentWithdrawFee(SwapUtilsGuarded.Swap storage,address)": {
        "params": {
          "user": "address you want to calculate withdraw fee of"
        },
        "returns": {
          "_0": "current withdraw fee of the user"
        }
      },
      "calculateRemoveLiquidity(SwapUtilsGuarded.Swap storage,address,uint256)": {
        "params": {
          "account": "the address that is removing liquidity. required for withdraw fee calculation",
          "amount": "the amount of LP tokens that would to be burned on withdrawal"
        },
        "returns": {
          "_0": "array of amounts of tokens user will receive"
        }
      },
      "calculateSwap(SwapUtilsGuarded.Swap storage,uint8,uint8,uint256)": {
        "params": {
          "dx": "the number of tokens to sell. If the token charges a fee on transfers, use the amount that gets transferred after the fee.",
          "self": "Swap struct to read from",
          "tokenIndexFrom": "the token to sell",
          "tokenIndexTo": "the token to buy"
        },
        "returns": {
          "dy": "the number of tokens the user will get"
        }
      },
      "calculateTokenAmount(SwapUtilsGuarded.Swap storage,address,uint256[],bool)": {
        "details": "This shouldn't be used outside frontends for user estimates.",
        "params": {
          "account": "address of the account depositing or withdrawing tokens",
          "amounts": "an array of token amounts to deposit or withdrawal, corresponding to pooledTokens. The amount should be in each pooled token's native precision. If a token charges a fee on transfers, use the amount that gets transferred after the fee.",
          "deposit": "whether this is a deposit or a withdrawal",
          "self": "Swap struct to read from"
        },
        "returns": {
          "_0": "if deposit was true, total amount of lp token that will be minted and if deposit was false, total amount of lp token that will be burned"
        }
      },
      "calculateWithdrawOneToken(SwapUtilsGuarded.Swap storage,address,uint256,uint8)": {
        "params": {
          "account": "the address that is withdrawing",
          "self": "Swap struct to read from",
          "tokenAmount": "the amount to withdraw in the pool's precision",
          "tokenIndex": "which token will be withdrawn"
        },
        "returns": {
          "_0": "the amount of token user will receive and the associated swap fee"
        }
      },
      "getA(SwapUtilsGuarded.Swap storage)": {
        "details": "See the StableSwap paper for details",
        "params": {
          "self": "Swap struct to read from"
        },
        "returns": {
          "_0": "A parameter"
        }
      },
      "getAPrecise(SwapUtilsGuarded.Swap storage)": {
        "details": "See the StableSwap paper for details",
        "params": {
          "self": "Swap struct to read from"
        },
        "returns": {
          "_0": "A parameter in its raw precision form"
        }
      },
      "getAdminBalance(SwapUtilsGuarded.Swap storage,uint256)": {
        "params": {
          "index": "Index of the pooled token",
          "self": "Swap struct to read from"
        },
        "returns": {
          "_0": "admin balance in the token's precision"
        }
      },
      "getDepositTimestamp(SwapUtilsGuarded.Swap storage,address)": {
        "params": {
          "self": "Swap struct to read from"
        },
        "returns": {
          "_0": "timestamp of last deposit"
        }
      },
      "getVirtualPrice(SwapUtilsGuarded.Swap storage)": {
        "params": {
          "self": "Swap struct to read from"
        },
        "returns": {
          "_0": "the virtual price, scaled to precision of POOL_PRECISION_DECIMALS"
        }
      },
      "rampA(SwapUtilsGuarded.Swap storage,uint256,uint256)": {
        "params": {
          "futureA_": "the new A to ramp towards",
          "futureTime_": "timestamp when the new A should be reached",
          "self": "Swap struct to update"
        }
      },
      "removeLiquidity(SwapUtilsGuarded.Swap storage,uint256,uint256[])": {
        "details": "Liquidity can always be removed, even when the pool is paused.",
        "params": {
          "amount": "the amount of LP tokens to burn",
          "minAmounts": "the minimum amounts of each token in the pool acceptable for this burn. Useful as a front-running mitigation",
          "self": "Swap struct to read from and write to"
        },
        "returns": {
          "_0": "amounts of tokens the user received"
        }
      },
      "removeLiquidityImbalance(SwapUtilsGuarded.Swap storage,uint256[],uint256)": {
        "params": {
          "amounts": "how much of each token to withdraw",
          "maxBurnAmount": "the max LP token provider is willing to pay to remove liquidity. Useful as a front-running mitigation.",
          "self": "Swap struct to read from and write to"
        },
        "returns": {
          "_0": "actual amount of LP tokens burned in the withdrawal"
        }
      },
      "removeLiquidityOneToken(SwapUtilsGuarded.Swap storage,uint256,uint8,uint256)": {
        "params": {
          "minAmount": "the minimum amount to withdraw, otherwise revert",
          "self": "Swap struct to read from and write to",
          "tokenAmount": "the amount of the lp tokens to burn",
          "tokenIndex": "the index of the token you want to receive"
        },
        "returns": {
          "_0": "amount chosen token that user received"
        }
      },
      "setAdminFee(SwapUtilsGuarded.Swap storage,uint256)": {
        "details": "adminFee cannot be higher than 100% of the swap fee",
        "params": {
          "newAdminFee": "new admin fee to be applied on future transactions",
          "self": "Swap struct to update"
        }
      },
      "setDefaultWithdrawFee(SwapUtilsGuarded.Swap storage,uint256)": {
        "params": {
          "newWithdrawFee": "new withdraw fee to be applied",
          "self": "Swap struct to update"
        }
      },
      "setSwapFee(SwapUtilsGuarded.Swap storage,uint256)": {
        "details": "fee cannot be higher than 1% of each swap",
        "params": {
          "newSwapFee": "new swap fee to be applied on future transactions",
          "self": "Swap struct to update"
        }
      },
      "stopRampA(SwapUtilsGuarded.Swap storage)": {
        "params": {
          "self": "Swap struct to update"
        }
      },
      "swap(SwapUtilsGuarded.Swap storage,uint8,uint8,uint256,uint256)": {
        "params": {
          "dx": "the amount of tokens the user wants to sell",
          "minDy": "the min amount the user would like to receive, or revert.",
          "self": "Swap struct to read from and write to",
          "tokenIndexFrom": "the token the user wants to sell",
          "tokenIndexTo": "the token the user wants to buy"
        },
        "returns": {
          "_0": "amount of token user received on swap"
        }
      },
      "updateUserWithdrawFee(SwapUtilsGuarded.Swap storage,address,uint256)": {
        "params": {
          "self": "Swap struct to read from and write to",
          "toMint": "amount of pool tokens to be minted",
          "user": "address of the user depositing tokens"
        }
      },
      "withdrawAdminFees(SwapUtilsGuarded.Swap storage,address)": {
        "params": {
          "self": "Swap struct to withdraw fees from",
          "to": "Address to send the fees to"
        }
      }
    },
    "title": "SwapUtils library",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addLiquidity(SwapUtilsGuarded.Swap storage,uint256[],uint256,bytes32[])": {
        "notice": "Add liquidity to the pool"
      },
      "calculateCurrentWithdrawFee(SwapUtilsGuarded.Swap storage,address)": {
        "notice": "Calculate the fee that is applied when the given user withdraws. Withdraw fee decays linearly over 4 weeks."
      },
      "calculateRemoveLiquidity(SwapUtilsGuarded.Swap storage,address,uint256)": {
        "notice": "A simple method to calculate amount of each underlying tokens that is returned upon burning given amount of LP tokens"
      },
      "calculateSwap(SwapUtilsGuarded.Swap storage,uint8,uint8,uint256)": {
        "notice": "Externally calculates a swap between two tokens."
      },
      "calculateTokenAmount(SwapUtilsGuarded.Swap storage,address,uint256[],bool)": {
        "notice": "A simple method to calculate prices from deposits or withdrawals, excluding fees but including slippage. This is helpful as an input into the various \"min\" parameters on calls to fight front-running"
      },
      "calculateWithdrawOneToken(SwapUtilsGuarded.Swap storage,address,uint256,uint8)": {
        "notice": "Calculate the dy, the amount of selected token that user receives and the fee of withdrawing in one token"
      },
      "getA(SwapUtilsGuarded.Swap storage)": {
        "notice": "Return A, the amplification coefficient * n * (n - 1)"
      },
      "getAPrecise(SwapUtilsGuarded.Swap storage)": {
        "notice": "Return A in its raw precision"
      },
      "getAdminBalance(SwapUtilsGuarded.Swap storage,uint256)": {
        "notice": "return accumulated amount of admin fees of the token with given index"
      },
      "getDepositTimestamp(SwapUtilsGuarded.Swap storage,address)": {
        "notice": "Retrieves the timestamp of last deposit made by the given address"
      },
      "getVirtualPrice(SwapUtilsGuarded.Swap storage)": {
        "notice": "Get the virtual price, to help calculate profit"
      },
      "rampA(SwapUtilsGuarded.Swap storage,uint256,uint256)": {
        "notice": "Start ramping up or down A parameter towards given futureA_ and futureTime_ Checks if the change is too rapid, and commits the new A value only when it falls under the limit range."
      },
      "removeLiquidity(SwapUtilsGuarded.Swap storage,uint256,uint256[])": {
        "notice": "Burn LP tokens to remove liquidity from the pool."
      },
      "removeLiquidityImbalance(SwapUtilsGuarded.Swap storage,uint256[],uint256)": {
        "notice": "Remove liquidity from the pool, weighted differently than the pool's current balances."
      },
      "removeLiquidityOneToken(SwapUtilsGuarded.Swap storage,uint256,uint8,uint256)": {
        "notice": "Remove liquidity from the pool all in one token."
      },
      "setAdminFee(SwapUtilsGuarded.Swap storage,uint256)": {
        "notice": "Sets the admin fee"
      },
      "setDefaultWithdrawFee(SwapUtilsGuarded.Swap storage,uint256)": {
        "notice": "update the default withdraw fee. This also affects deposits made in the past as well."
      },
      "setSwapFee(SwapUtilsGuarded.Swap storage,uint256)": {
        "notice": "update the swap fee"
      },
      "stopRampA(SwapUtilsGuarded.Swap storage)": {
        "notice": "Stops ramping A immediately. Once this function is called, rampA() cannot be called for another 24 hours"
      },
      "swap(SwapUtilsGuarded.Swap storage,uint8,uint8,uint256,uint256)": {
        "notice": "swap two tokens in the pool"
      },
      "updateUserWithdrawFee(SwapUtilsGuarded.Swap storage,address,uint256)": {
        "notice": "Update the withdraw fee for `user`. If the user is currently not providing liquidity in the pool, sets to default value. If not, recalculate the starting withdraw fee based on the last deposit's time & amount relative to the new deposit."
      },
      "withdrawAdminFees(SwapUtilsGuarded.Swap storage,address)": {
        "notice": "withdraw all admin fees to a given address"
      }
    },
    "notice": "A library to be used within Swap.sol. Contains functions responsible for custody and AMM functionalities.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
